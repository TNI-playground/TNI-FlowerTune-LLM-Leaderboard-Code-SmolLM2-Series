[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  let count = 0;\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > threshold){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  let groups = [];\n  let groups_count = 0;\n  let groups_array = [];\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let group_count = 0;\n  let group_index = 0;\n  let"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '$1');\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let max_balance = operations[0];\n  let min_balance = operations[operations.length-1];\n  let total_balance = 0;\n\n  for(let i=0; i<operations.length; i++){\n    if(operations[i] > max_balance){\n      max_balance = operations[i];\n      total_balance = operations[i];\n    }\n  }\n\n  if(min_balance < total_balance){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = numbers[0];\n  var mean_absolute_deviation = 0;\n  for(var i = 0; i < numbers.length; i++){\n    mean += numbers[i];\n    mean_absolute_deviation += Math.abs(mean - mean_absolute_deviation);\n  }\n  return mean_absolute_deviation;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === delimeter) {\n      newNumbers.push(numbers.splice(i, 1));\n    }\n  }\n  return newNumbers;\n}\n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let nested_parens = [];\n  let level = 0;\n  let parenthesis_list = [];\n  let parenthesis_list_length = 0;\n  let parenthesis_list_index = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let parenthesis_list_index_length = 0;\n  let"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  let filtered_strings = [];\n  for(let i=0; i<strings.length; i++){\n    if(strings[i].toLowerCase().includes(substring)){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n  }\n  return sum;\n}\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max_value = 0;\n  let max_index = 0;\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] > max_value){\n      max_value = numbers[i];\n      max_index = i;\n    }\n  }\n  return max_value;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let palindrome = \"\";\n  let postfix = \"\";\n  let prefix = \"\";\n  let reverse = \"\";\n  let postfix_length = 0;\n  let postfix_length = postfix.length;\n\n  for(let i = 0; i < postfix_length; i++){\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n      postfix = postfix.substring(0, postfix_length);\n    }\n    if(postfix[i] === postfix[postfix_length - 1 - i]){\n      postfix_length++;\n     "], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let a_str = a.toString().split('');\n    let b_str = b.toString().split('');\n    let a_len = a_str.length;\n    let b_len = b_str.length;\n    let a_len = a_str.length;\n    let b_len = b_str.length;\n    let a_xor = a_str.join('');\n    let b_xor = b_str.join('');\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = a_len - b_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a_len - b_len;\n    let b_xor_a_len = b_len - a_len;\n    let a_xor_b_len = a"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  let longest = 0;\n  let longest_string = strings[0];\n  let longest_index = 0;\n  for (let i = 0; i < strings.length; i++) {\n    let current_string = strings[i];\n    let current_index = 0;\n    let current_length = current_string.length;\n    let current_max_length = 0;\n    let current_max_index = 0;\n    let current_max_length = 0;\n    for (let j = 0; j < current_length; j++) {\n      if (current_string.charAt(current_index) === current_string.charAt(current_index + j)) {\n        current_max_length = Math.max(current_max_length, j);\n        current_max_index = j;\n      }\n      if (current_max_length > current_max_length) {\n        current_max_length = current_max_length;\n        current_max_index = j;\n      }\n    }\n    if (current_max_length === current_max_length) {\n      longest = current_string;\n      longest_index = i;\n    }\n  }\n  return longest;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if(a > b){\n    return a;\n  }\n  if(b > a){\n    return b;\n  }\n  if(a % b == 0){\n    return a;\n  }\n  return a;\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  let prefix_array = [];\n  let prefix_length = string.length;\n  let prefix_start = 0;\n  let prefix_end = prefix_length - 1;\n  let prefix_end_index = prefix_end - 1;\n\n  for(let i = prefix_start; i <= prefix_end; i++){\n    if(string.charAt(i) === 'a'){\n      prefix_array.push(i);\n    }\n  }\n  return prefix_array;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  let string = \"\";\n  for(let i=0; i<n; i++){\n    string += \"0\";\n  }\n  return string;\n}\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  let count = 0;\n  let char_count = 0;\n  let char_count_str = string.split(\"\");\n  for(let i = 0; i < char_count.length; i++){\n    if(char_count[i] === char_count_str[i]){\n      char_count_str.splice(i, 1);\n    }\n    else{\n      char_count_str.push(char_count[i]);\n      char_count.splice(i, 1);\n    }\n  }\n  return char_count_str.length;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  let music_array = music_string.split('');\n  let beats = 0;\n  for(let i = 0; i < music_array.length; i++){\n    let current_beat = parseInt(music_array[i]);\n    beats += current_beat;\n  }\n  return beats;\n}\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  let count = 0;\n  let start = 0;\n  let end = 0;\n  let count_of_overlapping_cases = 0;\n  let count_of_overlapping_cases_in_substring = 0;\n\n  for(let i = 0; i < string.length; i++){\n    if(substring.charAt(i) === string.charAt(i)){\n      count += 1;\n    }\n  }\n  if(count > 0){\n    count_of_overlapping_cases += count;\n  }\n  if(count_of_overlapping_cases > 0){\n    count_of_overlapping_cases_in_substring += count_of_overlapping_cases;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping_cases_in_substring === 0){\n    count_of_overlapping_cases_in_substring = 0;\n  }\n  if(count_of_overlapping"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  let sorted_numbers = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(numbers[i] < numbers[i+1]){\n      sorted_numbers.push(numbers[i]);\n    }\n  }\n  return sorted_numbers;\n}\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  let min_num = 0;\n  let max_num = 0;\n  let min_num = 0;\n  let max_num = 0;\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_num_list = [];\n  let min_num_list = [];\n  let max_"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push(numbers[iilter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  let filtered = [];\n  for(let i=0; i<values.length; i++){\n    if(values[i] >= 0){\n      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let len = 0;\n    for(let i = 0; i < string.length; i++){\n        let char = string.charCodeAt(i);\n        if(char >= 65 && char <= 90){\n            len++;\n        }\n    }\n    return len;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  let divisor = 1;\n  for(let i = 1; i <= n; i++){\n    divisor *= i;\n  }\n  return divisor;\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factor = [];\n  for(let i = 0; i < n; i++){\n    if(n % i === 0){\n      factor.push(i);\n    }\n  }\n  return factor;\n}\n"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  let sorted_numbers = numbers.sort(function(a, b){\n    return a - b\n  });\n  let new_numbers = [];\n  for(let i = 0; i < sorted_numbers.length; i++){\n    if(new_numbers.indexOf(sorted_numbers[i]) === -1){\n      new_numbers.push(sorted_numbers[i]);\n    }\n  }\n  return new_numbers;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  let newStrings = [];\n  for(let i = 0; i < strings.length; i++){\n    newStrings.push(strings[i].concat(strings[i]));\n  }\n  return newStrings;\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  let filtered_strings = [];\n  for(let i = 0; i < strings.length; i++){\n    if(strings[i].startsWith(prefix)){\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  let positive = [];\n  for(let i = 0; i < l.length; i++){\n    if(l[i] > 0){\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n}\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if(n<=1) return false;\n  for(let i=2;i<=n/2;i++){\n    if(n%i==0) return false;\n  }\n  return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  let l_indicies = l.map(function(el){\n    return el % 3;\n  });\n\n  let l_values = l.map(function(el){\n    return el % 3;\n  });\n\n  let l_values_sorted = l_values.sort(function(a, b){\n    return a - b;\n  });\n\n  return l_values_sorted;\n}\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  let unique = [];\n  for(let i = 0; i < l.length; i++){\n    if(unique.indexOf(l[i]) === -1){\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  let max = 0;\n  for(let i = 0; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n  }\n  return max;\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var fizz_buzz_count = 0;\n  for(var i = 0; i < n; i++){\n    if(i % 11 === 0 && i % 13 === 0){\n      fizz_buzz_count++;\n    }\n  }\n  return fizz_buzz_count;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  let even_l = l.filter(x => x % 2 === 0);\n  let odd_l = l.filter(x => x % 2 !== 0);\n  even_l.sort((a, b) => a - b);\n  odd_l.sort((a, b) => a - b);\n  return even_l.concat(odd_l);\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  if(n<=0) return 0;\n  if(n==1) return 1;\n  if(n==2) return 1;\n  if(n%2==0) return prime_fib(n-2);\n  else return prime_fib(n-1);\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  let sum = 0;\n  for(let i = 0; i < l.length; i++){\n    sum += l[i];\n  }\n  return sum;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  var cars = [];\n  var cars_left = 0;\n  var cars_right = 0;\n  for(var i = 0; i < n; i++){\n    cars.push(new Car(i, i, 0));\n  }\n  for(var i = 0; i < cars.length; i++){\n    if(cars[i].x > cars[i].x + cars[i].width){\n      cars_left++;\n    }\n    if(cars[i].x < cars[i].x - cars[i].width){\n      cars_right++;\n    }\n  }\n  return cars_left + cars_right;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var arr = [];\n  for(var i=0; i<l; i++){\n    arr.push(lpairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  let pairs = [];\n  for(let i = 0; i < l.length; i++){\n    if(l[i] == 0){\n      pairs.push(i);\n    }\n  }\n  return pairs;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  if(x < base){\n    return x;\n  }\n  else if(x > base){\n    return x - base;\n  }\n  else{\n    return x;\n  }\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return a * (h / 2)\n}\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n<=0) return 0;\n  if(n==1) return 1;\n  if(n==2) return 1;\n  if(n==3) return 2;\n  if(n==4) return 3;\n  if(n==5) return 5;\n  if(n==6) return 6;\n  if(n==7) return 7;\n  if(n==8) return 8;\n  if(n==9) return 9;\n  if(n==10) return 10;\n  if(n==11) return 11;\n  if(n==12) return 12;\n  if(n==13) return 13;\n  if(n==14) return 14;\n  if(n==15) return 15;\n  if(n==16) return 16;\n  if(n==17) return 17;\n  if(n==18) return 18;\n  if(n==19) return 19;\n  if(n==20) return 20;\n  if(n==21) return 21;\n  if(n==22) return 22;\n  if(n==23) return 23;\n  if(n==24) return 24;\n  if(n==25) return 25;\n  if(n==26) return 26;\n  if(n==27) return 27;\n  if(n==28) return 28;\n  if(n==29) return 29;\n  if(n==30) return 30;\n  if(n==31) return 31;\n  if(n==32) return 32;\n  if(n==33) return 33;\n  if(n==34) return 34;\n  if(n==35) return 35;\n  if(n==36) return 36;\n  if(n==37) return 37;\n  if(n==38) return 38;\n  if(n==39) return 39;\n  if(n==40) return 40;\n  if(n==41) return 41;\n  if(n==42) return 42;\n  if(n==43) return 43;\n  if(n==44) return 44;\n  if(n==45) return 45;\n  if(n==46) return 46;\n  if(n==47) return 47;\n  if(n==48) return 48;\n  if(n==49) return 49;\n  if(n==50) return 50;\n  if(n==51) return 51;\n  if(n==52) return 52;\n  if(n==53) return 53;\n  if(n==54) return 54;\n  if(n==55) return 55;\n  if(n==56) return 56;\n  if(n==57) return 57;\n  if(n==58) return 58;\n  if(n==59) return 59;\n  if(n==60) return 60;\n  if(n==61) return 61;\n  if(n==62) return 62;\n  if(n==63) return 63;\n  if(n==64) return 64;\n  if(n==65) return 65;\n  if(n==66) return"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  let arr = l.slice(0);\n  let median = arr.reduce((a, b) => a + b);\n  return a / (l.length - 1);\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let palindrome = false;\n    let current = 0;\n    let last = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let lastIndex = 0;\n    let currentIndex = 0;\n    let last"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n<=0){\n    return 0;\n  }\n  if(p==0){\n    return 1;\n  }\n  if(p==1){\n    return n;\n  }\n  if(p%2==0){\n    return (n*modp(n-1, p/2))%p;\n  }\n  return (n*modp(n-1, p/2))%p;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"z\"];\n  var vowels_count = 0;\n  for(var i = 0; i < text.length; i++){\n    if(text.charAt(i) == \"a\" || text.charAt(i) == \"e\" || text.charAt(i) == \"i\" || text.charAt(i) == \"o\" || text.charAt(i) == \"u\" || text.charAt(i) == \"y\" || text.charAt(i) == \"z\"){\n      vowels_count++;\n    }\n  }\n  return text.substring(0, i);\n}\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  let num_l = l.length;\n  let num_t = t.length;\n  let num_threshold = 0;\n  let num_threshold_min = 0;\n  let num_threshold_max = 0;\n  let num_threshold_min_max = 0;\n  let num_threshold_min_max_min = 0;\n  let num_threshold_min_max_max = 0;\n  let num_threshold_min_max_max_min = 0;\n  let num_threshold_min_max_max_max = 0;\n  let num_threshold_min_max_max_max_min = 0;\n  let num_threshold_min_max_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_min_max_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max = 0;\n  let num_threshold_min_max_max_max_min_max_max_max_min_max_max_min_max_max_min_max ="], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  let chars = s0.toLowerCase().split(\"\").map(char => char.charCodeAt(0));\n  let chars_to_check = chars.filter(char => char.toLowerCase().includes(s1.toLowerCase()));\n  return chars_to_check;\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n<=0) return 0;\n  if(n==1) return 1;\n  if(n==2) return 1;\n  return fib(n-1) + fib(n-2);\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  let correct = false;\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \">\"){\n      correct = true;\n    }\n    if(brackets[i] === \"<\"){\n      correct = true;\n    }\n  }\n  return correct;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  let count = 0;\n  let max = 0;\n  let min = 0;\n  let total = 0;\n  for(let i = 0; i < l.length; i++){\n    if(l[i] > max){\n      max = l[i];\n    }\n    if(l[i] < min){\n      min = l[i];\n    }\n    if(l[i] > total){\n      total = l[i];\n    }\n    if(l[i] < total){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  let common = [];\n  for(let i = 0; i < l1.length; i++){\n    if(l1[i] === l2[i]){\n      common.push(l1[i]);\n    }\n  }\n  return common;\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  let prime_factors = [];\n  for(let i = 2; i <= n; i++){\n    prime_factors.push(i);\n  }\n  let largest_prime_factor = prime_factors.reduce((a, b) => a > b ? a : b);\n  return largest_prime_factor;\n}\n"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n * (n+1) / 2;\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  let result = [];\n  for(let i = 0; i < brackets.length; i++){\n    if(brackets[i] === \"(\"){\n      result.push(brackets[i]);\n    }else if(brackets[i] === \")\"){\n      result.pop();\n    }\n  }\n  return result.length === 0;\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  return xs.map(function(x){\n    return x * x;\n  }).reduce((acc, x) => acc + x);\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n<=0){\n    return 0;\n  }\n  if(n<=1){\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  let vowels = [];\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u'){\n      vowels.push(i);\n    }\n  }\n  return vowels.length;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  let result = \"\";\n  for(let i = 0; i < x.length; i++){\n    if(x[i] > shift){\n      result += x[i];\n    }\n  }\n  return result;\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  let sum = 0;\n  for(let i = 0; i < s.length; i++){\n    let c = s.charCodeAt(i);\n    if(c >= 65 && c <= 90){\n      sum += c;\n    }\n  }\n  return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let arr = s.split('').map(Number);\n  let count = 0;\n  let max = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > max){\n      max = arr[i];\n      count = i;\n    }\n  }\n  return count;\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let res = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let max_freq = 0;\n  let max_index = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] > max){\n      max = lst[i];\n      max_freq = i;\n    }\n  }\n  max_index = max_freq;\n  max_index = max_index % lst.length;\n  if(max_index > max){\n    max = max_index;\n  }\n  if(max_index == -1){\n    max_index = 0;\n  }\n  if(max_freq > max_index){\n    max = max_freq;\n  }\n  return max;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  let sorted_lst = [];\n  for(let i = 0; i < lst.length; i++){\n    let temp = lst[i];\n    sorted_lst.push(temp);\n  }\n  return sorted_lst;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  return a + b + c;\n}\n"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length == 0) return false;\n  let max_weight = Math.max(q.length, w);\n  let max_weight_sum = 0;\n  for(let i = 0; i < q.length; i++){\n    max_weight_sum += q[i];\n  }\n  let sum = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight, sum_of_weights);\n  let max_weight_sum = 0;\n  for(let i = 0; i < w; i++){\n    max_weight_sum += w[i];\n  }\n  let sum_of_weights = max_weight_sum - w;\n  let max_weight = Math.max(max_weight"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let new_arr = [];\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] % 2 === 0){\n      new_arr.push(arr[i]);\n    }\n  }\n  let min_change = new_arr.length - 1;\n  let min_index = new_arr.indexOf(min_change);\n  let new_arr = new_arr.slice(0, min_index);\n  new_arr.push(arr[min_index]);\n  return new_arr.length;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  let total = 0;\n  for(let i=0; i<lst1.length; i++){\n    for(let j=0; j<lst2.length; j++){\n      if(lst1[i] === lst2[j]){\n        total++;\n      }\n    }\n  }\n  return total;\n}\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  if(a < 100){\n    return true;\n  }\n  if(a % 3 === 0){\n    return false;\n  }\n  for(let i = 0; i < a; i++){\n    if(is_prime(a - i)){\n      return true;\n    }\n  }\n  return false;\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(x == 1){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == n**int){\n    return true;\n  }\n  if(x == n**(int-1)){\n    return true;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if(x == n**(int-1)){\n    return false;\n  }\n  if"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  if(a > 0){\n    return true;\n  }\n  return false;\n}\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  let hex = \"\";\n  let i = 0;\n  while(i < num){\n    hex += String.fromCharCode(Math.floor(Math.random() * 16777216));\n    i++;\n  }\n  return hex;\n}\n"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary_string = \"\";\n  let binary_num = 0;\n  let binary_num_str = \"\";\n  let binary_num_str_str = \"\";\n  let binary_num_str_str = \"\";\n  let binary_num_str_str_str = \"\";\n  let binary_num_str_str_str = \"\";\n  let binary_num_str_str_str_str = \"\";\n  let binary_num_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str_str_str_str_str_str_str_str_str_str = \"\";\n  let binary_num_str_str_str"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  let len = s.length;\n  let count = 0;\n  for(let i = 0; i < len; i++){\n    if(s[i] === s[i+1]){\n      count++;\n    }\n  }\n  if(count === 3){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let grades_array = grades.split(\",\");\n  let grades_array_length = grades_array.length;\n  let grades_array_sorted = grades_array.sort();\n  let grades_array_sorted_index = grades_array_length - 1;\n  let grades_array_sorted_index_sorted = grades_array_sorted.sort();\n  let grades_array_sorted_index_sorted = grades_array_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted = grades_array_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted = grades_array_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted = grades_array_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted = grades_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sort();\n  let grades_array_sorted_index_sorted_sorted_"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  let len = string.length;\n  let prime_count = 0;\n  let prime_num = 0;\n  let prime_num_count = 0;\n  for(let i = 0; i < len; i++){\n    if(string.charAt(i) === '0'){\n      prime_count++;\n    }\n    if(prime_count === 2){\n      prime_num++;\n    }\n    if(prime_count === 3){\n      prime_num_count++;\n    }\n  }\n  if(prime_num === prime_num_count){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for(let i = 0; i < n; i++){\n    if(i % 10 === 0){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let digits = [];\n    for(let i = 0; i < N; i++){\n        digits.push(i);\n    }\n    let sum = 0;\n    for(let i = 0; i < digits.length; i++){\n        sum += digits[i];\n    }\n    return sum;\n}\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  let even = [];\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      even.push(lst[i]);\n    }\n  }\n  return even;\n}\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let arr = s.split(\"\");\n  let newArr = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i].charCodeAt() > 96 && arr[i].charCodeAt() < 123){\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  let row = [];\n  for (let i = 0; i < lst.length; i++) {\n    let row = [];\n    for (let j = 0; j < lst[i].length; j++) {\n      row.push(lst[i][j]);\n    }\n    row.push(x);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j]);\n    row.push(lst[i][j"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  let sortedArray = [];\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] % 2 !== 0) {\n      sortedArray.push(array[i]);\n    }\n  }\n  return sortedArray;\n}\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let shift = 2;\n  let alphabetShift = shift * 2;\n  let alphabetShift2 = alphabetShift * 2;\n  let shift2 = shift * 2;\n  let shift3 = shift * 2;\n  let shift4 = shift * 2;\n  let shift5 = shift * 2;\n  let shift6 = shift * 2;\n  let shift7 = shift * 2;\n  let shift8 = shift * 2;\n  let shift9 = shift * 2;\n  let shift10 = shift * 2;\n  let shift11 = shift * 2;\n  let shift12 = shift * 2;\n  let shift13 = shift * 2;\n  let shift14 = shift * 2;\n  let shift15 = shift * 2;\n  let shift16 = shift * 2;\n  let shift17 = shift * 2;\n  let shift18 = shift * 2;\n  let shift19 = shift * 2;\n  let shift20 = shift * 2;\n  let shift21 = shift * 2;\n  let shift22 = shift * 2;\n  let shift23 = shift * 2;\n  let shift24 = shift * 2;\n  let shift25 = shift * 2;\n  let shift26 = shift * 2;\n  let shift27 = shift * 2;\n  let shift28 = shift * 2;\n  let shift29 = shift * 2;\n  let shift30 = shift * 2;\n  let shift31 = shift * 2;\n  let shift32 = shift * 2;\n  let shift33 = shift * 2;\n  let shift34 = shift * 2;\n  let shift35 = shift * 2;\n  let shift36 = shift * 2;\n  let shift37 = shift * 2;\n  let shift38 = shift * 2;\n  let shift39 = shift * 2;\n  let shift40 = shift * 2;\n  let shift41 = shift * 2;\n  let shift42 = shift * 2;\n  let shift43 = shift * 2;\n  let shift44 = shift * 2;\n  let shift45 = shift * 2;\n  let shift46 = shift * 2;\n  let shift47 = shift * 2;\n  let shift48 = shift * 2;\n  let shift49 = shift * 2;\n  let shift50 = shift * 2;\n  let shift51 = shift * 2;\n  let shift52 = shift * 2;\n  let shift53 = shift * 2;\n  let shift54 = shift * 2;\n  let shift55 = shift * 2;\n  let shift56 = shift * 2;\n  let shift57 = shift * 2;\n  let shift58 = shift * 2;\n  let shift59 = shift * 2;\n  let shift60 = shift * 2;\n  let shift61 = shift * 2;\n  let shift62 = shift * 2;\n  let shift63 = shift * 2;\n  let shift64 = shift * 2;\n  let shift65 = shift * 2;\n  let shift66 = shift * 2;\n  let shift67 = shift * 2;\n  let shift68 = shift * 2;\n  let shift69 = shift * 2;\n  let shift70 = shift * 2;\n  let shift71 = shift * 2;\n  let shift72 = shift * 2;\n  let shift73 = shift * 2;\n  let shift74 = shift * 2;\n  let shift75 = shift * 2;\n  let shift76 = shift * 2;\n  let shift77 = shift * 2;\n  let shift78 = shift * 2;\n  let shift79 = shift * 2;\n  let shift8"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  let min = lst[0];\n  for(let i = 1; i < lst.length; i++){\n    if(lst[i] < min){\n      min = lst[i];\n    }\n  }\n  return min;\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  let count = 0;\n  for(let i = 0; i < S.length; i++){\n    if(S[i] === 'I'){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  return x + y + z;\n}\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  var letters = message.split('').sort().join('');\n  var encoded = \"\";\n  for(var i = 0; i < letters.length; i++){\n    encoded += letters[i];\n  }\n  return encoded;\n}\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  let max = 0;\n  let max_digits = 0;\n  for(let i=0; i<lst.length; i++){\n    let num = lst[i];\n    if(num > max){\n      max = num;\n      max_digits = i;\n    }\n  }\n  return max_digits + max;\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter(key => key !== \"a\");\n  let upperCaseKeys = upperCaseKeys.filter(key => key !== \"b\");\n  let lowerCaseKeys = lowerCaseKeys.filter"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  let count = 0;\n  for(let i = 0; i < n; i++){\n    if(isPrime(i)){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  return a * b;\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \"a\" || s.charAt(i) === \"e\" || s.charAt(i) === \"i\" || s.charAt(i) === \"o\" || s.charAt(i) === \"u\"){\n      count++;\n    }\n  }\n  return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  let closest = Math.min(value, value - 1);\n  let closest_integer = value;\n  let closest_integer_to_closest = closest;\n  let closest_integer_to_closest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_to_nearest = closest;\n  let closest_integer_to_closest_"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  let level = [];\n  for(let i = 0; i < n; i++){\n    level.push(0);\n  }\n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < n; j++){\n      if(i == 0 && j == 0){\n        level[i][j] = 1;\n      }\n      else if(i == 0){\n        level[i][j] = level[i-1][j];\n      }\n      else if(j == 0){\n        level[i][j] = level[i-1][j-1];\n      }\n      else if(i == n-1){\n        level[i][j] = level[i-1][j-1];\n      }\n      else if(j == n-1){\n        level[i][j] = level[i-1][j-1];\n      }\n    }\n  }\n  return level.length;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  let words = [];\n  let split = s.split(/\\s+/);\n  for(let i = 0; i < split.length; i++){\n    if(split[i].length > 0){\n      words.push(split[i].split(' ')[0]);\n    }\n  }\n  return words;\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if(x > y){\n    return x;\n  }\n  else if(y > x){\n    return y;\n  }\n  else{\n    return choose_num(x, y);\n  }\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  let avg = 0;\n  for(let i = 0; i < n; i++){\n    avg += (m - i) * (m - i);\n  }\n  avg = Math.floor(avg/n);\n  return avg;\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let arr = [];\n  for(let i=0; i<x.length; i++){\n    if(x[i]%2===0){\n      arr.push(x.slice(i,i+1));\n    }\n  }\n  return arr;\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  let sortedArr = arr.sort((a, b) => a - b);\n  let newArr = [];\n  for(let i = 0; i < sortedArr.length; i++){\n    let digit = sortedArr[i];\n    if(digit === 1){\n      newArr.push(digit);\n    }\n  }\n  return newArr;\n}\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  let factorial = 1;\n  for(let i = 1; i <= n; i++){\n    factorial *= i;\n  }\n  return factorial;\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let even_palindromes = [];\n  let odd_palindromes = [];\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_palindromes_count = 0;\n  let even_palindromes_count = 0;\n  let odd_pal"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let sum = 0;\n  for(let i=0; i<arr.length; i++){\n    if(arr[i] > 0){\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  let new_arr = [];\n  for(let i = 0; i < arr.length; i++){\n    new_arr.push(arr[i]);\n  }\n  new_arr.sort(function(a, b){\n    return a - b;\n  });\n  return new_arr;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  let even = 0;\n  let odd = 0;\n  let even_odd = 0;\n  let odd_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even_even = 0;\n  let even_odd_even = 0;\n  let odd_even"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let count = 0;\n  let arr = test.split(\"\");\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i].length > count){\n      count = arr[i].length;\n    }\n  }\n  return {\n    count: count,\n    arr: arr,\n    count_str: arr.join(\"\"),\n    count_str_arr: arr.join(\"\"),\n    count_str_arr: arr.join(\"\"),\n    count_str_arr_arr: arr.join(\"\"),\n    count_str_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_str_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr: arr.join(\"\"),\n    count_"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = [];\n  for(let i = 0; i < s.length; i++){\n    let char = s.charAt(i);\n    if(c.indexOf(char) >= 0){\n      result.push(c.toUpperCase());\n    }\n  }\n  return result;\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  let odd_count = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !== 0){\n      odd_count++;\n    }\n  }\n  return odd_count;\n}\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let maxSum = 0;\n    let maxIndex = -1;\n    for(let i = 0; i < nums.length; i++){\n        maxSum += nums[i];\n        if(maxSum > maxIndex){\n            maxIndex = maxSum;\n        }\n    }\n    let minSum = maxSum;\n    for(let i = maxIndex + 1; i < nums.length; i++){\n        minSum += nums[i];\n    }\n    return minSum;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let buckets = [];\n  let max_fill = 0;\n  for(let i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n      if(grid[i][j] == 0){\n        buckets.push(j);\n      }\n    }\n  }\n  for(let i = 0; i < buckets.length; i++){\n    if(capacity > buckets[i]){\n      max_fill = i;\n    }\n  }\n  return max_fill;\n}\n"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  let sortedArr = [];\n  for(let i=0; i<arr.length; i++){\n    let num = arr[i];\n    if(num == 1){\n      sortedArr.push(i);\n    }\n  }\n  return sortedArr;\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  let words = [];\n  let count = 0;\n  let current = s.length;\n  while(current > 0){\n    let current_char = s.charAt(current--);\n    if(current_char === ' '){\n      words.push(current);\n      current--;\n    }\n    if(current_char === ' '){\n      count++;\n    }\n  }\n  return words;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_count = 0;\n  let vowels_count_count = 0;\n  let vowels_count_count_count = 0;\n  let vowels_count_count_count_count = 0;\n  let vowels_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels_count_count_count_count_count = 0;\n  let vowels"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  let result = [];\n  for(let i=0; i<lst.length; i++){\n    if(lst[i] === \"(\"){\n      result.push(lst[i]);\n    }\n    else if(lst[i] === \")\"){\n      if(result.length > 0){\n        result.pop();\n      }\n    }\n  }\n  return result.join(\"\");\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = arr.length;\n  let max_index = -1;\n  let max_index_list = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > max){\n      max = arr[i];\n      max_index = i;\n    }\n  }\n  max_index_list.push(max_index);\n  max_index_list.sort(function(a, b){\n    return a - b;\n  });\n  return max_index_list;\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  let even = [];\n  for(let i=0; i<lst.length; i++){\n    if(lst[i] % 2 === 0){\n      even.push(lst[i]);\n    }\n  }\n  return even.reduce((a,b) => a + b);\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    sum += arr[i];\n  }\n  for(let i = 0; i < k; i++){\n    sum += arr[i];\n  }\n  return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let arr = [];\n  for(let i=0; i<n; i++){\n    arr.push(i);\n  }\n  let collatz = [];\n  for(let i=0; i<arr.length; i++){\n    if(arr[i]%2 === 0){\n      collatz.push(arr[i]);\n    }\n  }\n  return collatz;\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  if(!/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date)){\n    return false;\n  }\n  let year = parseInt(date.substring(0, 2), 10);\n  let month = parseInt(date.substring(3, 5), 10);\n  let day = parseInt(date.substring(6, 8), 10);\n  let hour = parseInt(date.substring(9, 11), 10);\n  let minute = parseInt(date.substring(12, 14), 10);\n  let second = parseInt(date.substring(15, 18), 10);\n  let day_of_month = parseInt(date.substring(19, 22), 10);\n  let month_of_year = parseInt(date.substring(23, 26), 10);\n  let day_of_month_of_year = parseInt(date.substring(27, 30), 10);\n  let hour_of_day = parseInt(date.substring(31, 34), 10);\n  let minute_of_hour = parseInt(date.substring(35, 39), 10);\n  let second_of_hour = parseInt(date.substring(40, 44), 10);\n  let day_of_month_of_year = parseInt(date.substring(45, 49), 10);\n  let day_of_month = parseInt(date.substring(50, 54), 10);\n  let month_of_year = parseInt(date.substring(55, 59), 10);\n  let day_of_month_of_year = parseInt(date.substring(60, 64), 10);\n  let hour_of_day = parseInt(date.substring(65, 69), 10);\n  let minute_of_hour = parseInt(date.substring(70, 74), 10);\n  let second_of_hour = parseInt(date.substring(75, 79), 10);\n  let day_of_month_of_year = parseInt(date.substring(80, 84), 10);\n  let day_of_month = parseInt(date.substring(85, 89), 10);\n  let month_of_year = parseInt(date.substring(90, 94), 10);\n  let day_of_month_of_year = parseInt(date.substring(95, 99), 10);\n  let hour_of_day = parseInt(date.substring(100, 104), 10);\n  let minute_of_hour = parseInt(date.substring(105, 109), 10);\n  let second_of_hour = parseInt(date.substring"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  let words = txt.split(\"\");\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words_lowercase = [];\n  let words_uppercase = [];\n  let words"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] !== lst[i]) {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted.length === 0;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = interval1[0];\n  let end = interval1[1];\n  let end2 = interval2[0];\n  let start2 = interval2[1];\n\n  let start1 = start;\n  let end1 = end;\n  let end2 = end2;\n\n  let start1 = start1;\n  let end1 = end1;\n  let end2 = end2;\n\n  let start2 = start2;\n  let end2 = end2;\n\n  let start3 = start2;\n  let end3 = end3;\n\n  let start4 = start3;\n  let end4 = end4;\n\n  let start5 = start4;\n  let end5 = end5;\n\n  let start6 = start5;\n  let end6 = end6;\n\n  let start7 = start6;\n  let end7 = end7;\n\n  let start8 = start7;\n  let end8 = end8;\n\n  let start9 = start8;\n  let end9 = end9;\n\n  let start10 = start9;\n  let end10 = end10;\n\n  let start11 = start10;\n  let end11 = end11;\n\n  let start12 = start11;\n  let end12 = end12;\n\n  let start13 = start12;\n  let end13 = end13;\n\n  let start14 = start13;\n  let end14 = end14;\n\n  let start15 = start14;\n  let end15 = end15;\n\n  let start16 = start15;\n  let end16 = end16;\n\n  let start17 = start16;\n  let end17 = end17;\n\n  let start18 = start17;\n  let end18 = end18;\n\n  let start19 = start18;\n  let end19 = end19;\n\n  let start20 = start19;\n  let end20 = end20;\n\n  let start21 = start20;\n  let end21 = end21;\n\n  let start22 = start21;\n  let end22 = end22;\n\n  let start23 = start22;\n  let end23 = end23;\n\n  let start24 = start23;\n  let end24 = end24;\n\n  let start25 = start24;\n  let end25 = end25;\n\n  let start26 = start25;\n  let end26 = end26;\n\n  let start27 = start26;\n  let end27 = end27;\n\n  let start28 = start27;\n  let end28 = end28;\n\n  let start29 = start28;\n  let end29 = end29;\n\n  let start30 = start29;\n  let end30 = end30;\n\n  let start31 = start30;\n  let end31 = end31;\n\n  let start32 = start31;\n  let end32 = end32;\n\n  let start33 = start32;\n  let end33 = end33;\n\n  let start34 = start33;\n  let end34 = end34;\n\n  let start35 = start34;\n  let end35 = end35;\n\n  let start36 = start35;\n  let end36 = end36;\n\n  let"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++){\n    let sign = arr[i];\n    let sum = 0;\n    for(let j = 0; j < sign.length; j++){\n      sum += sign[j] * (sign[j] - 1) / 2;\n    }\n    sum = sum + (sign[0] * (sign[1] - 1));\n  }\n  return sum;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let lst_A = [];\n  let lst_B = [];\n  let lst_C = [];\n  let lst_D = [];\n  let lst_E = [];\n  let lst_F = [];\n  let lst_G = [];\n  let lst_H = [];\n  let lst_I = [];\n  let lst_J = [];\n  let lst_K = [];\n  let lst_L = [];\n  let lst_M = [];\n  let lst_N = [];\n  let lst_O = [];\n  let lst_P = [];\n  let lst_Q = [];\n  let lst_R = [];\n  let lst_S = [];\n  let lst_T = [];\n  let lst_U = [];\n  let lst_V = [];\n  let lst_W = [];\n  let lst_X = [];\n  let lst_Y = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = [];\n  let lst_Z = []"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if(n<=0) return [];\n  let tri = [];\n  for(let i=0; i<n; i++){\n    tri.push(tri(i));\n  }\n  return tri;\n}\n"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  let result = 1;\n  for(let i = 0; i < n; i++){\n    if(n % i === 0){\n      result *= i;\n    }\n  }\n  return result;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  let result = false;\n  let start = 0;\n  let end = string.length - 1;\n  while(start < end){\n    let bracket = string.charAt(start);\n    let bracket_index = bracket.indexOf(\"(\");\n    if(bracket_index >= 0){\n      let bracket_substring = string.substring(start, bracket_index + 1);\n      let bracket_substring_index = bracket_substring.indexOf(\"(\");\n      if(bracket_substring_index === -1){\n        result = true;\n      }\n      start = bracket_index + 1;\n      end = bracket_index + 1;\n    }\n    else{\n      start = bracket_index + 1;\n      end = bracket_index + 1;\n    }\n  }\n  return result;\n}\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    sum += (lst[i] * lst[i]);\n  }\n  return sum;\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  let last_char = txt.lastIndexOf(txt.charAt(0));\n  if (last_char === -1){\n    return false;\n  }\n  return true;\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  let arr_len = arr.length;\n  let max_index = -1;\n  let max_index_arr = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] > arr[i + 1]){\n      max_index = i;\n      max_index_arr = i;\n    }\n  }\n  return max_index_arr;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  let largest = 0;\n  let smallestreate a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  return a - b;\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  let sum = 0;\n  for(let i = 0; i < n; i++){\n    sum += (n % 2 === 0);\n  }\n  return sum === 4;\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if(n<0){\n    return 1;\n  }\n  if(n==0){\n    return 1;\n  }\n  if(n%2==0){\n    return (n*special_factorial(n-1));\n  }\n  return (n*special_factorial(n-1));\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  let newText = text.split(\"\").join(\"\");\n  let newStr = newText.split(\"\").join(\"\");\n  let newStr2 = newText.split(\"\").join(\"\");\n  let newStr3 = newText.split(\"\").join(\"\");\n  let newStr4 = newText.split(\"\").join(\"\");\n  let newStr5 = newText.split(\"\").join(\"\");\n  let newStr6 = newText.split(\"\").join(\"\");\n  let newStr7 = newText.split(\"\").join(\"\");\n  let newStr8 = newText.split(\"\").join(\"\");\n  let newStr9 = newText.split(\"\").join(\"\");\n  let newStr10 = newText.split(\"\").join(\"\");\n  let newStr11 = newText.split(\"\").join(\"\");\n  let newStr12 = newText.split(\"\").join(\"\");\n  let newStr13 = newText.split(\"\").join(\"\");\n  let newStr14 = newText.split(\"\").join(\"\");\n  let newStr15 = newText.split(\"\").join(\"\");\n  let newStr16 = newText.split(\"\").join(\"\");\n  let newStr17 = newText.split(\"\").join(\"\");\n  let newStr18 = newText.split(\"\").join(\"\");\n  let newStr19 = newText.split(\"\").join(\"\");\n  let newStr20 = newText.split(\"\").join(\"\");\n  let newStr21 = newText.split(\"\").join(\"\");\n  let newStr22 = newText.split(\"\").join(\"\");\n  let newStr23 = newText.split(\"\").join(\"\");\n  let newStr24 = newText.split(\"\").join(\"\");\n  let newStr25 = newText.split(\"\").join(\"\");\n  let newStr26 = newText.split(\"\").join(\"\");\n  let newStr27 = newText.split(\"\").join(\"\");\n  let newStr28 = newText.split(\"\").join(\"\");\n  let newStr29 = newText.split(\"\").join(\"\");\n  let newStr30 = newText.split(\"\").join(\"\");\n  let newStr31 = newText.split(\"\").join(\"\");\n  let newStr32 = newText.split(\"\").join(\"\");\n  let newStr33 = newText.split(\"\").join(\"\");\n  let newStr34 = newText.split(\"\").join(\"\");\n  let newStr35 = newText.split(\"\").join(\"\");\n  let newStr36 = newText.split(\"\").join(\"\");\n  let newStr37 = newText.split(\"\").join(\"\");\n  let newStr38 = newText.split(\"\").join(\"\");\n  let newStr39 = newText.split(\"\").join(\"\");\n  let newStr40 = newText.split(\"\").join(\"\");\n  let newStr41 = newText.split(\"\").join(\"\");\n  let newStr42 = newText.split(\"\").join(\"\");\n  let newStr43 = newText.split(\"\").join(\"\");\n  let newStr44 = newText.split(\"\").join(\"\");\n  let newStr45 = newText.split(\"\").join(\"\");\n  let newStr46 = newText.split(\"\").join(\"\");\n  let newStr47 = newText.split(\"\").join(\"\");\n  let newStr48 = newText.split(\"\").join(\"\");\n  let newStr49 = newText.split(\"\").join(\"\");\n  let newStr50 = newText.split(\"\").join(\"\");\n  let"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  if(file_name.match(/^[a-zA-Z0-9]+$/)){\n    return 'Yes';\n  }\n  else{\n    return 'No';\n  }\n}\n"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += (lst[i] ** 2);\n  }\n  return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let new_sentence = \"\";\n  let len_of_sentence = sentence.length;\n  let new_word_count = 0;\n  for(let i = 0; i < len_of_sentence; i++){\n    let current_word = sentence[i];\n    let new_word = current_word.toLowerCase();\n    if(new_word.length > len_of_sentence){\n      new_word = new_word.substring(0, new_word.length - 1);\n    }\n    if(new_word.length > len_of_sentence){\n      new_word = new_word.substring(0, new_word.length - 1);\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length > len_of_sentence){\n      new_word = new_word.substring(0, new_word.length - 1);\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLowerCase();\n    }\n    if(new_word.length === len_of_sentence){\n      new_word = new_word.toLower"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  if(x < 0){\n    return false;\n  }\n  if(n < 0){\n    return false;\n  }\n  if(x > n){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  return false;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  let sorted_nums = [];\n  for(let i = 0; i < nums.length; i++){\n    let sum = nums[i] + nums[i+1];\n    if(sum > 9){\n      sorted_nums.push(nums[i]);\n    }\n  }\n  return sorted_nums;\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let max = 0;\n  let max_index = -1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = new Array(n).fill(0);\n  let a_max = 0;\n  for(let i = 0; i < n; i++){\n    a[i] = a[i] + a[i+1];\n    a_max = Math.max(a_max, a[i]);\n  }\n  return a_max;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  let planets = [];\n  let closest = planet1;\n  let closest_orbit = planet2;\n  let closest_orbit_distance = 0;\n  let closest_orbit_perihelion = 0;\n  let closest_orbit_perihelion = 0;\n  let closest_orbit_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion = 0;\n  let closest_orbit_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance_perihelion_distance = 0;\n  let closest_orbit_perihelion_distance_perihelion_distance_perihelion_distance_per"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  let arr = [];\n  for(let i=0; i<lst.length; i++){\n    arr.push(lst[i].length);\n  }\n  return arr;\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(n == 0) return x;\n  if(n == 1) return y;\n  if(n % 2 == 0) return x_or_y(n - 1, x, y);\n  if(n % 3 == 0) return x_or_y(n - 1, x, y + 1);\n  if(n % 5 == 0) return x_or_y(n - 1, x, y + 1);\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    sum += (lst[i] % 2 == 0) ? (lst[i] ** 2) : (lst[i] ** 3);\n  }\n  return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  let score = game[guess];\n  let guess = parseInt(guess);\n  let score = game[guess];\n  let score = parseInt(score);\n  let diff = score - guess;\n  if(diff > 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  var strongest_extension = 0;\n  var strongest_extension_count = 0;\n  for(var i = 0; i < extensions.length; i++){\n    if(extensions[i].length > strongest_extension){\n      strongest_extension = extensions[i];\n      strongest_extension_count = extensions[i].length;\n    }\n  }\n  return strongest_extension;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if(a.length > b.length){\n    return false;\n  }\n  let i = a.length - 1;\n  let j = b.length - 1;\n  while(i >= 0 && j >= 0){\n    if(a[i] == b[j]){\n      i--;\n      j--;\n    }else{\n      return false;\n    }\n  }\n  return true;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  let even_count = 0;\n  let odd_count = 0;\n  for(let i=0; i<num; i++){\n    if(num%i === 0){\n      even_count++;\n    }\n  }\n  for(let j=0; j<num; j++){\n    if(num%i === 0){\n      odd_count++;\n    }\n  }\n  return even_count + odd_count;\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let roman = \"\";\n  for(let i = 0; i < number; i++){\n    roman += String.fromCharCode(Math.floor(Math.random() * 1000000000));\n  }\n  return roman;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  return a + b + c;\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_word = words[0];\n  let max_count = 0;\n  for(let i=0; i<words.length; i++){\n    if(words[i].length > max_word.length){\n      max_word = words[i];\n      max_count = i;\n    }\n  }\n  return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if(number <= 0){\n    return remaining;\n  }\n  if(number > 1000){\n    return remaining;\n  }\n  if(number == 0){\n    return remaining;\n  }\n  if(number == 1){\n    return remaining;\n  }\n  if(number == 2){\n    return remaining;\n  }\n  if(number == 3){\n    return remaining;\n  }\n  if(number == 4){\n    return remaining;\n  }\n  if(number == 5){\n    return remaining;\n  }\n  if(number == 6){\n    return remaining;\n  }\n  if(number == 7){\n    return remaining;\n  }\n  if(number == 8){\n    return remaining;\n  }\n  if(number == 9){\n    return remaining;\n  }\n  if(number == 10){\n    return remaining;\n  }\n  if(number == 11){\n    return remaining;\n  }\n  if(number == 12){\n    return remaining;\n  }\n  if(number == 13){\n    return remaining;\n  }\n  if(number == 14){\n    return remaining;\n  }\n  if(number == 15){\n    return remaining;\n  }\n  if(number == 16){\n    return remaining;\n  }\n  if(number == 17){\n    return remaining;\n  }\n  if(number == 18){\n    return remaining;\n  }\n  if(number == 19){\n    return remaining;\n  }\n  if(number == 20){\n    return remaining;\n  }\n  if(number == 21){\n    return remaining;\n  }\n  if(number == 22){\n    return remaining;\n  }\n  if(number == 23){\n    return remaining;\n  }\n  if(number == 24){\n    return remaining;\n  }\n  if(number == 25){\n    return remaining;\n  }\n  if(number == 26){\n    return remaining;\n  }\n  if(number == 27){\n    return remaining;\n  }\n  if(number == 28){\n    return remaining;\n  }\n  if(number == 29){\n    return remaining;\n  }\n  if(number == 30){\n    return remaining;\n  }\n  if(number == 31){\n    return remaining;\n  }\n  if(number == 32){\n    return remaining;\n  }\n  if(number == 33){\n    return remaining;\n  }\n  if(number == 34){\n    return remaining;\n  }\n  if(number == 35){\n    return remaining;\n  }\n  if(number == 36){\n    return remaining;\n  }\n  if(number == 37){\n    return remaining;\n  }\n  if(number == 38){\n    return remaining;\n  }\n  if(number == 39){\n    return remaining;\n  }\n  if(number == 40){\n    return remaining;\n  }\n  if(number == 41){\n    return remaining;\n  }\n  if(number == 42){\n    return remaining;\n  }\n  if(number == 43){\n    return remaining"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  let result = 0;\n  let op = operator.toLowerCase();\n  let op_array = op.split('');\n  let op_array_length = op_array.length;\n  let op_array_length = op_array.length;\n  let op_array_length_max = op_array_length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_length_max = op_array.length;\n  let op_array_"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  let res = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(s[i] === \"a\"){\n      res += \"a\";\n    }else if(s[i] === \"b\"){\n      res += \"b\";\n    }else if(s[i] === \"c\"){\n      res += \"c\";\n    }else if(s[i] === \"d\"){\n      res += \"d\";\n    }else if(s[i] === \"e\"){\n      res += \"e\";\n    }else if(s[i] === \"f\"){\n      res += \"f\";\n    }else if(s[i] === \"g\"){\n      res += \"g\";\n    }else if(s[i] === \"h\"){\n      res += \"h\";\n    }else if(s[i] === \"i\"){\n      res += \"i\";\n    }else if(s[i] === \"j\"){\n      res += \"j\";\n    }else if(s[i] === \"k\"){\n      res += \"k\";\n    }else if(s[i] === \"l\"){\n      res += \"l\";\n    }else if(s[i] === \"m\"){\n      res += \"m\";\n    }else if(s[i] === \"n\"){\n      res += \"n\";\n    }else if(s[i] === \"o\"){\n      res += \"o\";\n    }else if(s[i] === \"p\"){\n      res += \"p\";\n    }else if(s[i] === \"q\"){\n      res += \"q\";\n    }else if(s[i] === \"r\"){\n      res += \"r\";\n    }else if(s[i] === \"s\"){\n      res += \"s\";\n    }else if(s[i] === \"t\"){\n      res += \"t\";\n    }else if(s[i] === \"u\"){\n      res += \"u\";\n    }else if(s[i] === \"v\"){\n      res += \"v\";\n    }else if(s[i] === \"w\"){\n      res += \"w\";\n    }else if(s[i] === \"x\"){\n      res += \"x\";\n    }else if(s[i] === \"y\"){\n      res += \"y\";\n    }else if(s[i] === \"z\"){\n      res += \"z\";\n    }\n  }\n  return res;\n}\n"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  let hash = 0;\n  let str = text.split(\"\");\n  for(let i = 0; i < str.length; i++){\n    let char = str[i];\n    let hash = (hash + char) % 256;\n  }\n  return hash;\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  let even_digits = [];\n  for(let i = a; i <= b; i++){\n    even_digits.push(i);\n  }\n  return even_digits;\n}\n"]]