[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    return string[len(string) - len(string) - 1:-1]\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    common = {}\n    for word, count in counts.items():\n        if count > 1:\n            common[word] = count\n    return common"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base, height, slant_height):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Args:\n        base (float): The base of the triangular prism.\n        height (float): The height of the triangular prism.\n        slant_height (float): The length of the slant of the triangular prism.\n\n    Returns:\n        float: The volume of the triangular prism.\n    \"\"\"\n    return (base * height * slant_height) / 3\n\n# Example usage\nbase = 10\nheight = 8\nslant_height = 6"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(s):\n    return s.lower().split(' ')\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input text.\n\n    Returns:\n        str: A string containing sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    return ''.join(c for c in text if c.islower()) + '_'\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\"\"\"\ndef square_perimeter(side):\n    return side * side"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(str1, str2):\n    clean_str1 = ''.join(c for c in str1 if c not in str2)\n    clean_str2 = ''.join(c for c in str2 if c not in str1)\n    return clean_str1, clean_str2\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    if num % 7 == 0:\n        return False\n    return True\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i for i in range(1, m) if i % n == 0]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list_of_lists):\n    if len(list_of_lists) == 0:\n        return 0\n    max_sum = list_of_lists[0][0]\n    for i in range(1, len(list_of_lists)):\n        for j in range(1, len(list_of_lists[i])):\n            max_sum = max(max_sum, list_of_lists[i][j] + max_sum)\n    return max_sum\n\nlist_of_lists = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i, bit in enumerate(binary[::-1]):\n        decimal += int(bit) * (2 ** i)\n    return decimal\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tuple_list, k):\n    return len(tuple_list) == k"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove_digits(lst):\n    return [s for s in lst if not any(c.isdigit() for c in s)]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\"\"\"\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst, target):\n    count = 0\n    for element in lst:\n        if element == target:\n            count += 1\n    return count % 2 == 1\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and j == len(s) - i - 1:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heappush, heappop\n\ndef func(lst, k):\n    # Sort the list and convert it to a list of tuples\n    sorted_lst = sorted(lst, key=lambda x: x[1])\n    # Create a heap to store the top k elements\n    heap = []\n    for i in range(k):\n        heappush(heap, (sorted_lst[i][1], i))\n\n    # Traverse the heap and find the top k elements\n    top_k_elements = []\n    while heap:\n        current_element = heappop(heap)\n        top_k_elements.append(current_element)\n        if len(top_k_elements) == k:\n            break\n\n    return top_k_elements\n\n# Test the function\nlst = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nk = 3"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        count += arr.count(i)\n    return count\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\"\"\"\ndef find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n\n    Args:\n        n (int): The n-th rectangular number.\n\n    Returns:\n        int: The n-th rectangular number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 10\n    if n == 5:\n        return 17\n    if n == 6:\n        return 32\n    if n == 7:\n        return 63\n    if n == 8:\n        return 125\n    if n == 9:\n        return 252\n    if n == 10:\n        return 505\n    if n == 11:\n        return 1015\n    if n == 12:\n        return 2035\n    if n == 13:\n        return 4075\n    if n == 14:\n        return 8195\n    if n == 15:\n        return 16385\n    if n == 16:\n        return 32765\n    if n == 17:\n        return 65535\n    if n == 18:\n        return 131075\n    if n == 19:\n        return 262145\n    if n == 20:\n        return 524285\n    if n == 21:\n        return 1048575\n    if n == 22:\n        return 2197355\n    if n == 23:\n        return 4394715\n    if n == 24:\n        return 8789175\n    if n == 25:\n        return 17687955\n    if n == 26:\n        return 35377955\n    if n == 27:\n        return 70755955\n    if n == 28:\n        return 141535955\n    if n == 29:\n        return 303111955\n    if n == 30:\n        return 606211955\n    if n == 31:\n        return 1219711955\n    if n == 32:\n        return 24394711955\n    if n == 33:\n        return 5678711955\n    if n == 34:\n        return 1116221955\n    if n == 35:\n        return 3333331955\n    if n == 36:\n        return 6666661955\n    if n == 37:\n        return 12666661955\n    if n == 38:\n        return 19333331955\n    if n == 39:\n        return 5666661955\n    if n == 40:\n        return 1111111955\n    if n == 41:\n        return 3333331955\n    if n == 42:\n        return 6666661955\n    if n == 43:\n        return 12666661955\n    if n == 44:\n        return 19333331955\n    if n == 45:\n        return 5666661955\n    if n == 46:\n        return 1111111955\n    if n == 47:\n        return 3333331955\n    if n == 48:\n        return 6666661955\n    if n == 49:\n        return 12666661955\n    if n == 50:\n        return 19333331955\n    if n == 51:\n        return 5666661955\n    if n == 52:\n        return 1111111955\n    if n == 53:\n        return 3333331955\n    if n == 54:\n        return 6666661955\n    if n == 55:\n        return 12666661955\n    if n == 56:\n        return 19333331955\n    if n == 57:\n        return 5666661955\n    if n == 58:\n        return 1111111955\n    if n == 59:\n        return 3333331955\n    if n == 60:\n        return 6666661955\n    if n == 61:\n        return 12666661955\n    if n == 62:\n        return 19333331955\n    if n == 63:\n        return 5666661955\n    if n == 64:\n        return 1111111955\n    if n == 65:\n        return 3333331955\n    if n == 66:\n        return 6666661955\n    if n == 67:\n        return 12666661955\n    if n == 68:\n        return 19333331955\n    if n == 69:\n        return 5666661955\n    if n == 70:\n        return 1111111955\n    if n == 71:\n        return 3333331955\n    if n == 72:\n        return 6666661955\n    if n == 73:\n        return 12666661955\n    if n == 74:\n        return 19333331955\n    if n == 75:\n        return 5666661955\n    if n == 76:\n        return 1111111955\n    if n == 77:\n        return 3333331955\n    if n == 78:\n        return 6666661955\n    if n == 79:\n        return 12666661955\n    if n == 80:\n        return 19333331955\n    if n == 81:\n        return 5666661955\n    if n == 82:\n        return 1111111955\n    if n == 83:\n        return 3333331955\n    if n == 84:\n        return 6666661955\n    if n == 85:\n        return 12666661955\n    if n == 86:\n        return 19333331955\n    if n == 87:\n        return 5666661955\n    if n == 88:\n        return 1111111955\n    if n == 89:\n        return 3333331955\n    if n == 90:\n        return 6666661955\n    if n == 91:\n        return 12666661955\n    if n == 92:\n        return 19333331955\n    if n == 93:\n        return 5666661955\n    if n == 94:\n        return 1111111955\n    if n == 95:\n        return 3333331955\n    if n == 96:\n        return 6666661955\n    if n == 97:\n        return 12666661955\n    if n == 98:\n        return 19333331955\n    if n == 99:\n        return 5666661955\n    if n == 100:\n        return 1"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    if n == 0:\n        return num1 % 10\n    else:\n        return find_Nth_Digit(num2 % 10, num1 % 10, n - 1)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: x[0])\n\n# Example usage\nmixed_list = [19, 'red', 12, 'green', 10, 'white', 'green', 'red', 'blue']"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even_odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even_odd.append(num)\n        else:\n            odd_odd.append(num)\n    return even_odd, odd_odd\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    result = []\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            result.append(string[i])\n            result.append(string[i+1])\n            result.append(string[i+1])\n            result.append(string[i])\n        else:\n            result.append(string[i])\n            result.append(string[i+1])\n    return result\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nimport collections\n\ndef freq_element(lists):\n    freq_dict = collections.defaultdict(int)\n    for lst in lists:\n        for element in lst:\n            freq_dict[element] += 1\n    return freq_dict\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, target):\n    count = 0\n    for num in arr:\n        if num == target:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n\n    Args:\n        text (str): The text to search for sequences of lowercase letters joined with an underscore.\n\n    Returns:\n        str: The found sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    pattern = r'\\b\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    \"\"\"\n    Matching a word at the beginning of a string.\n\n    Args:\n        text (str): The string to be matched.\n\n    Returns:\n        str: The matched word.\n    \"\"\"\n    return text[0]\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    if len(arr) < 2:\n        return arr\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = get_gcd(arr[i])\n    return gcd"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return False\n    return True"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    if b == 0:\n        return a % 10\n    else:\n        return compute_Last_Digit(b, a % b)\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(number):\n    result = 0\n    for i in range(number):\n        if number % 2 == 1:\n            result |= 1 << i\n    return result\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef extract_first_element(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_by_index(lst, index1, index2):\n    return lst[index1][index2]\n\ndef extract_first_element_by_index_by_index_by_index(lst, index1, index2, index3):\n    return lst[index1][index2][index3]\n\ndef extract_first_element_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4):\n    return lst[index1][index2][index3][index4]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5):\n    return lst[index1][index2][index3][index4][index5]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6):\n    return lst[index1][index2][index3][index4][index5][index6]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7):\n    return lst[index1][index2][index3][index4][index5][index6][index7]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13][index14]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14, index15):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13][index14][index15]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14, index15, index16):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13][index14][index15][index16]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14, index15, index16, index17):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13][index14][index15][index16][index17]\n\ndef extract_first_element_by_index_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14, index15, index16, index17, index18):\n    return lst[index1][index2][index3][index4][index5][index6][index7][index8][index9][index10][index11][index12][index13][index14][index15][index16][index17][index18]\n\ndef extract_first_element_by_index_by_index_by_index_by_index(lst, index1, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13, index14, index15, index16, index17, index18, index19):\n    return lst[index1][index2][index3][index"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(len(lst), key=len)\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a, b, c):\n    if a == b and a == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\"\"\"\ndef parallelogram_area(base, height):\n    return base * height\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    first_char = string[0]\n    last_char = string[-1]\n    if first_char == last_char:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    count = [0] * 1000000\n    for num in arr:\n        count[num] += 1\n    sorted_arr = [num for num in count]\n    return sorted_arr"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n, k, r):\n    \"\"\"\n    Calculate the nth term of a geometric series.\n\n    Args:\n        n (int): The term number.\n        k (int): The common ratio.\n        r (float): The first term of the geometric series.\n\n    Returns:\n        int: The nth term of the geometric series.\n    \"\"\"\n    if k == 0:\n        return r\n    else:\n        return r * tn_gp(n, k - 1, r)\n\n# Example usage\ntn_gp(1, 5, 2)  # Output: 16"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(number):\n    reversed_number = number[::-1]\n    return number - int(reversed_number) == int(reversed_number)\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, max_num):\n    max_num_list = []\n    for num in digits:\n        if num > max_num:\n            max_num = num\n            max_num_list = [num]\n        elif num > max_num and num < max_num_list[-1]:\n            max_num_list[-1] = num\n    return max_num_list[0]\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\"\"\"\ndef is_octagonal(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return is_octagonal(n - 1) * is_octagonal(n - 2)\n    else:\n        return is_octagonal(n - 1) * is_octagonal(n - 3)"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, target):\n    max_len = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_len:\n                max_len = diff\n    return max_len"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s, length):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] + s[j] == s[0]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    return min(lst)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(t):\n    max_diff = 0\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            diff = t[i] - t[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef subject_marks(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1])"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\"\"\"\ndef bell_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number(n // 2) * bell_number(n // 2)\n    else:\n        return bell_number(n // 2) + bell_number(n // 2 - 1)\n\ndef bell_number_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive(n // 2) * bell_number_recursive(n // 2)\n    else:\n        return bell_number_recursive(n // 2) + bell_number_recursive(n // 2 - 1)\n\ndef bell_number_iterative(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_iterative(n // 2) * bell_number_iterative(n // 2)\n    else:\n        return bell_number_iterative(n // 2) + bell_number_iterative(n // 2 - 1)\n\ndef bell_number_recursive_iterative(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative(n // 2) * bell_number_recursive_iterative(n // 2)\n    else:\n        return bell_number_recursive_iterative(n // 2) + bell_number_recursive_iterative(n // 2 - 1)\n\ndef bell_number_iterative_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_iterative_recursive(n // 2) * bell_number_iterative_recursive(n // 2)\n    else:\n        return bell_number_iterative_recursive(n // 2) + bell_number_iterative_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive(n // 2) * bell_number_recursive_iterative_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive(n // 2) + bell_number_recursive_iterative_recursive(n // 2 - 1)\n\ndef bell_number_iterative_recursive_iterative_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_iterative_recursive_iterative_recursive(n // 2) * bell_number_iterative_recursive_recursive(n // 2)\n    else:\n        return bell_number_iterative_recursive_recursive(n // 2) + bell_number_iterative_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive(n // 2) + bell_number_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive(n // 2) * bell_number_recursive_iterative_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive_recursive(n // 2) + bell_number_recursive_iterative_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive(n // 2) + bell_number_recursive_iterative_recursive_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive_recursive_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive(n // 2) + bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2) + bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n // 2)\n    else:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2) + bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2 - 1)\n\ndef bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return bell_number_recursive_iterative_recursive_recursive_recursive_recursive_recursive_recursive(n // 2) * bell_number_recursive_recursive_recursive_recursive_recursive"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return is_Monotonic(arr[1:])\n    return True\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(lst, sublist):\n    for item in sublist:\n        if item in lst:\n            return True\n    return False"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    \"\"\"\n    Check if all the given tuples have equal length or not.\n\n    Args:\n        tuples (list): A list of tuples.\n        length (int): The length of the tuples.\n\n    Returns:\n        str: 'All tuples have same length' if all tuples have equal length, otherwise 'Not all tuples have same length'\n    \"\"\"\n    if len(tuples) != length:\n        return 'Not all tuples have same length'\n    else:\n        return 'All tuples have same length'\n\n# Example usage\ntuples = [(11, 22, 33), (44, 55, 66)]"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    \"\"\"\n    Sort a list of elements using comb sort.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: A sorted list of elements.\n    \"\"\"\n    def comb_sort_helper(lst, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            comb_sort_helper(lst, low, mid)\n            comb_sort_helper(lst, mid + 1, high)\n            comb_sort_helper(lst, low, high)\n\n    comb_sort_helper(lst, 0, len(lst) - 1)\n    return lst\n\n# Example usage\nlst = [5, 15, 37, 25, 79]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    if n < 0:\n        return False\n    return (n**2 - 1) % 4 == 0\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\nimport re\n\ndef multiple_split(string):\n    return re.split(r'\\s*,\\s*', string)\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n\n    Parameters:\n        patterns (list): A list of strings.\n\n    Returns:\n        bool: True if it follows the sequence, False otherwise.\n    \"\"\"\n    for pattern in patterns:\n        if pattern in patterns[0]:\n            return True\n    return False\n\n# Example usage\npatterns = [\"red\",\"green\",\"green\"]"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples which have all elements divisible by k.\n    \"\"\"\n    return [tuple for tuple in tuples if all(divisible(tuple, k) for divisor in range(k))]\n\ndef divisible(tuple, k):\n    \"\"\"\n    Checks if a tuple has all elements divisible by k.\n\n    Args:\n        tuple (tuple): A tuple.\n        k (int): The divisor.\n\n    Returns:\n        bool: True if all elements are divisible by k, False otherwise.\n    \"\"\"\n    return all(divisible(tuple, k) for divisor in range(k))\n\ndef divisible_tuples(tuples, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples which have all elements divisible by k.\n    \"\"\"\n    return [tuple for tuple in tuples if divisible(tuple, k)]\n\n# Example usage\ntuples = [(6, 24, 12), (7, 9, 6), (12, 18, 21), (15, 25, 30)]\nk = 6"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\"\"\"\ndef count_Squares(width, height):\n    count = 0\n    for i in range(width):\n        for j in range(height):\n            if i == 0 or j == 0 or i == width - 1 or j == height - 1:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\ndef diff_sum(num):\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(str(num))):\n        if is_Diff(str(num)[i]):\n            sum_even += int(str(num)[i])\n        else:\n            sum_odd += int(str(num)[i])\n    return sum_even - sum_odd\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        count += n & (1 << i)\n    return count"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    return len(word)"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\nimport math\n\ndef tetrahedral_number(n):\n    return math.pow(n, 4) / 24\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(a, b):\n    return tuple(zip(a, b))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return math.pi * (radius ** 3)\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    result = \"\"\n    for char in string:\n        result += char\n    return result\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n\ndef newman_conway(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway(n-1) + newman_conway(n-2)\n\ndef newman_conway_sequence(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence(n-1) + newman_conway_sequence(n-2)\n\ndef newman_conway_sequence_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive(n-1) + newman_conway_sequence_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-2)\n\ndef newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(n):\n    \"\"\"\n    Returns the n-th number in the newman conway sequence.\n\n    Args:\n        n (int): The number of the sequence to find.\n\n    Returns:\n        int: The n-th number in the sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-1) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-2) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-3) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-4) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-5) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-6) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-7) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-8) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-9) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-10) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-11) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-12) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-13) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-14) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-15) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-16) + newman_conway_sequence_recursive_recursive_recursive_recursive_recursive_recursive(n-17)"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2\n\n# Example usage"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Args:\n        n (int): The number of centered hexagonal numbers to find.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n\n# Example usage"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single expression.\n\n    Parameters:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    return {key: dict1[key] + dict2[key] + dict3[key] for key in dict1}\n\n# Example usage\ndict1 = {\n    \"R\": \"Red\",\n    \"B\": \"Black\",\n    \"P\": \"Pink\"\n}\ndict2 = {\n    \"G\": \"Green\",\n    \"W\": \"White\"\n}\ndict3 = {\n    \"O\": \"Orange\",\n    \"W\": \"White\",\n    \"B\": \"Black\"\n}\n\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    num_list = [11, 12, 13, 14, 15]\n    min_num = min(num_list)\n    closest_num = min_num\n    for num in num_list:\n        if num < min_num:\n            min_num = num\n            closest_num = num\n    return closest_num\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\"\"\"\ndef len_log(word):\n    length = 0\n    for char in word:\n        length += 1\n    return length\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string, substring):\n    \"\"\"\n    Check if a substring is present in a given list of string values.\n\n    Args:\n        string (str): The substring to check.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is present in the list, False otherwise.\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == substring:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Args:\n        num (str): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    if len(num) == 1:\n        return True\n    if num[0] == num[-1]:\n        return is_undulating(num[1:-1])\n    else:\n        return False\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return power(a, b-1) * a\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_index = 0\n    for i in range(len(tuples)):\n        if tuples[i][1] < tuples[min_index][1]:\n            min_index = i\n    return min_index\n\n# Example usage\ntuples = [('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    min_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                min_length = len(lst[i])\n                lst[i] = lst[j]\n                lst[j] = None\n    return min_length\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    frequency = {}\n    for lst in lists:\n        for item in lst:\n            if item not in frequency:\n                frequency[item] = 1\n            else:\n                frequency[item] += 1\n    return frequency\n\n# Test the function\nlists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return [x * y for x, y in zip(lst, lst)]\n\ndef divide_num(lst):\n    return [x / len(lst) for x in lst]\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary_string = ''\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    return binary_string\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Finds the next smallest palindrome of a specified number.\n\n    Args:\n        n (int): The number to find the next smallest palindrome for.\n\n    Returns:\n        int: The next smallest palindrome.\n    \"\"\"\n    palindrome_dict = {\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"10\": 10,\n        \"11\": 11,\n        \"12\": 12,\n        \"13\": 13,\n        \"14\": 14,\n        \"15\": 15,\n        \"16\": 16,\n        \"17\": 17,\n        \"18\": 18,\n        \"19\": 19,\n        \"20\": 20,\n        \"21\": 21,\n        \"22\": 22,\n        \"23\": 23,\n        \"24\": 24,\n        \"25\": 25,\n        \"26\": 26,\n        \"27\": 27,\n        \"28\": 28,\n        \"29\": 29,\n        \"30\": 30,\n        \"31\": 31,\n        \"32\": 32,\n        \"33\": 33,\n        \"34\": 34,\n        \"35\": 35,\n        \"36\": 36,\n        \"37\": 37,\n        \"38\": 38,\n        \"39\": 39,\n        \"40\": 40,\n        \"41\": 41,\n        \"42\": 42,\n        \"43\": 43,\n        \"44\": 44,\n        \"45\": 45,\n        \"46\": 46,\n        \"47\": 47,\n        \"48\": 48,\n        \"49\": 49,\n        \"50\": 50,\n        \"51\": 51,\n        \"52\": 52,\n        \"53\": 53,\n        \"54\": 54,\n        \"55\": 55,\n        \"56\": 56,\n        \"57\": 57,\n        \"58\": 58,\n        \"59\": 59,\n        \"60\": 60,\n        \"61\": 61,\n        \"62\": 62,\n        \"63\": 63,\n        \"64\": 64,\n        \"65\": 65,\n        \"66\": 66,\n        \"67\": 67,\n        \"68\": 68,\n        \"69\": 69,\n        \"70\": 70,\n        \"71\": 71,\n        \"72\": 72,\n        \"73\": 73,\n        \"74\": 74,\n        \"75\": 75,\n        \"76\": 76,\n        \"77\": 77,\n        \"78\": 78,\n        \"79\": 79,\n        \"80\": 80,\n        \"81\": 81,\n        \"82\": 82,\n        \"83\": 83,\n        \"84\": 84,\n        \"85\": 85,\n        \"86\": 86,\n        \"87\": 87,\n        \"88\": 88,\n        \"89\": 89,\n        \"90\": 90,\n        \"91\": 91,\n        \"92\": 92,\n        \"93\": 93,\n        \"94\": 94,\n        \"95\": 95,\n        \"96\": 96,\n        \"97\": 97,\n        \"98\": 98,\n        \"99\": 99,\n    }\n    for num in range(n, 0, -1):\n        if num in palindrome_dict:\n            return num\n        else:\n            palindrome_dict[num] = n\n    return n\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k):\n    if k > len(arr):\n        return None\n    return arr[k-1]"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(s):\n    words = s.split('_')\n    return ''.join([word.capitalize() for word in words])\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == m:\n        return 1\n    if n > m:\n        return eulerian_num(m, n)\n    return eulerian_num(n, m - 1) + eulerian_num(n - m, m)\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda sublist: [sorted(sublist), sorted(sublist)[::-1]])\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true_booleans(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    return tuple(list1 + list2)\n\n# Test the function"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        if hex(i).count('A') > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2):\n    \"\"\"\n    Merge two sorted lists into a single sorted iterator.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n\n    Returns:\n        iterator: A single sorted iterator.\n    \"\"\"\n    # Create a heap to store the elements\n    heap = []\n\n    # Iterate through the two sorted lists\n    for element in list1 + list2:\n        # Insert the element into the heap\n        heap.append(element)\n\n        # If the heap is empty, it is the smallest element\n        if len(heap) > 1:\n            # Pop the smallest element from the heap\n            smallest = heap.pop()\n            # Insert the popped element into the heap\n            heap.append(smallest)\n\n    # Return the iterator\n    return iter(heap)\n\n# Test the function\nlist1 = [25, 24, 15, 4, 5, 29, 110]\nlist2 = [19, 20, 11, 56, 25, 233, 154]"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            count += 1\n    if n % 2 == 1:\n        count += 1\n    return count\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start, end):\n    return [(start, end)] + [\n        (start, end)\n        for start in range(start, end + 1)\n        for end in range(start, end + 1)\n        if end - start > 1\n    ]"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(list_a, list_b):\n    result = []\n    for item in list_a:\n        if isinstance(item, list):\n            result.extend(common_in_nested_lists(item, list_b))\n        else:\n            result.append(item)\n    return result\n\ndef common_in_nested_lists_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a, list_b):\n    if not list_a:\n        return list_b\n    if not list_b:\n        return list_a\n    if list_a[0] == list_b[0]:\n        return [list_a[0]] + common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b[1:])\n    else:\n        return common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive(list_a[1:], list_b)\n\ndef common_in_nested_lists_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive_recursive"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    \"\"\"\n    Calculate the perimeter of a cylinder.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The perimeter of the cylinder.\n    \"\"\"\n    return 2 * (radius * radius + height * height)\n\n# Example usage"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuple_list):\n    freq = {}\n    for item in tuple_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef empty_dit(dict_list):\n    return all(dict_list)\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(t):\n    return sum(t)\n\n# Test the function"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    return [float(element) for element in lst]\n\n# Test the function"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0]*tuples[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function\ntuples = [(2, 7), (2, 6), (1, 8), (4, 9)]"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, target_sum, left, right):\n    if left > right:\n        return False\n\n    mid = (left + right) // 2\n\n    if arr[mid] == target_sum:\n        return True\n\n    if arr[mid] > target_sum:\n        return check_triplet(arr, target_sum, left, mid - 1)\n\n    return check_triplet(arr, target_sum, mid + 1, right)\n\ndef find_triplet(arr, target_sum):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if check_triplet(arr, target_sum, i, j) and check_triplet(arr, target_sum, j, k):\n                    return True\n    return False\n\n# Test the function\narr = [2, 7, 4, 0, 9, 5, 1, 3]\ntarget_sum = 8"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    else:\n        return smartNumber(n-1) + 1\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\"\"\"\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit for amicable numbers.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i + j == n and (i, j, n) in amicable_numbers_sum(n):\n                total += i\n    return total\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to n.\n\n    Args:\n        n (int): The upper limit for amicable numbers.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i + j == n and (i, j, n) in amicable_numbers_sum(n):\n                total += i\n    return total\n\n# Example usage"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nimport math\n\ndef angle_complex(x, y):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Args:\n        x (complex): The real part of the complex number.\n        y (complex): The imaginary part of the complex number.\n\n    Returns:\n        float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(y, x)\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, length):\n    count_zeros = 0\n    count_ones = 0\n    for char in binary_string:\n        if char == '0':\n            count_zeros += 1\n        elif char == '1':\n            count_ones += 1\n    return count_zeros - count_ones\n\ndef find_length_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive(binary_string, length - 1)\n        return count_zeros + count_ones\n\ndef find_length_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + 1\n\ndef find_length_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_recursive(binary_string, length - 1)\n        return count_zeros + count_ones + count_zeroes + count_ones_recursive\n\ndef find_length_recursive_recursive_recursive_recursive_recursive_recursive(binary_string, length):\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        count_zeros = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones = find_length_recursive_recursive(binary_string, length - 1)\n        count_zeroes = find_length_recursive_recursive(binary_string, length - 1)\n        count_ones_recursive = find_length_recursive_"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_common_divisors(num1, num2):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        int: The sum of common divisors of num1 and num2.\n    \"\"\"\n    common_divisors = [i for i in range(1, num1 + num2) if num1 % i == 0 and num2 % i == 0]\n    return sum(common_divisors)\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a, b):\n    result = 0\n    for i in range(b):\n        result += a\n    return result\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\"\"\"\ndef long_words(n, words):\n    return [word for word in words if len(word) > n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square_test(matrix):\n    \"\"\"\n    Calculate magic square.\n\n    Args:\n        matrix (list): A list of lists.\n\n    Returns:\n        bool: True if magic square, False otherwise.\n    \"\"\"\n    # Check if matrix is valid\n    if not all(isinstance(row, list) and len(row) == len(matrix) for row in matrix):\n        return False\n\n    # Check if matrix is square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Check if all elements are unique\n    if len(set(matrix)) != len(matrix):\n        return False\n\n    # Check if all elements are positive\n    if any(element < 0 for element in matrix):\n        return False\n\n    # Check if all elements are negative\n    if any(element > 0 for element in matrix):\n        return False\n\n    # Check if all elements are equal\n    if any(element == matrix[0][0] for element in matrix):\n        return False\n\n    # Calculate magic square\n    magic_square = [[matrix[0][0], matrix[0][1], matrix[0][2], matrix[0][3]], \n                [matrix[1][0], matrix[1][1], matrix[1][2], matrix[1][3]], \n                [matrix[2][0], matrix[2][1], matrix[2][2], matrix[2][3]], \n                [matrix[3][0], matrix[3][1], matrix[3][2], matrix[3][3]]]\n\n    return True\n\n# Test magic square\nmatrix = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    max_count = 0\n    max_item = None\n    for item in lst:\n        if item > max_count:\n            max_count = item\n            max_item = item\n    return max_item"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in s if char not in vowels])\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \",\".join(map(str, tup))\n\n# Test the function\ntup = (\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\")"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(lst):\n    return sum(num for num in lst if num < 0)\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, op):\n    if op == 1:\n        return \"ODD\"\n    else:\n        return \"EVEN\"\n\ndef check_last_op(arr, op):\n    if op == 1:\n        return check_last(arr, len(arr), op)\n    else:\n        return check_last(arr, op, 1)\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    Args:\n        n (int): The position of the hexagonal number to find.\n\n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\ndef cal_electbill(power):\n    return power * 0.00246\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    return count / len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num <= 0:\n        return False\n    count = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            count += 1\n    return count == 1\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test the function"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tup):\n    return [x for x in tup if x in tup]"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using pancake sort.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: A sorted list of elements.\n    \"\"\"\n    def pancake_sort_helper(lst, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            pancake_sort_helper(lst, start, mid)\n            pancake_sort_helper(lst, mid + 1, end)\n            if lst[start] > lst[mid]:\n                lst[start], lst[mid] = lst[mid], lst[start]\n        return lst\n\n    return pancake_sort_helper(lst, 0, len(lst) - 1)\n\n# Test the function"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                count += 1\n    return count"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(list_tuple):\n    return len(list_tuple)"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += abs(arr[i] - arr[j])\n    return sum\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(char) for char in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, path_sum, path_sum_prev):\n    if len(triangle) == 0:\n        return 0\n\n    max_path_sum = max(path_sum, path_sum_prev)\n    max_path_sum_prev = max(path_sum_prev, path_sum)\n\n    for i in range(1, len(triangle)):\n        max_path_sum = max(max_path_sum, triangle[i][i] + path_sum_prev + path_sum[i - 1])\n        max_path_sum_prev = max(max_path_sum_prev, path_sum[i - 1])\n\n    return max_path_sum\n\ndef max_path_sum_traversal(triangle):\n    max_path_sum = 0\n    path_sum = [0] * len(triangle)\n    path_sum_prev = [0] * len(triangle)\n\n    for i in range(len(triangle)):\n        for j in range(i):\n            path_sum[i] += triangle[i][j]\n            path_sum_prev[i] = max(path_sum_prev[i], path_sum[i])\n\n    for i in range(len(triangle)):\n        max_path_sum = max(max_path_sum, path_sum[i])\n        max_path_sum_prev = max(max_path_sum_prev, path_sum[i])\n\n    return max_path_sum\n\n# Test the function\ntriangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]\nmax_path_sum = max_path_sum_traversal(triangle)"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(n):\n    parts = []\n    while n > 0:\n        parts.append(n % 10)\n        n //= 10\n    return max(parts)\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, target):\n    longest = 0\n    current = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] - arr[j] == target:\n                current += 1\n                if current > longest:\n                    longest = current\n    return longest"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_A(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_C(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_D(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_E(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_F(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_G(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_H(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_I(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_J(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_K(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_L(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_M(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_N(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_O(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_P(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_Q(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_R(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_S(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_T(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_U(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_V(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_W(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_X(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_Y(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_Z(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_A(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_B(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_C(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_D(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_E(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_F(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_G(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_H(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_I(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_J(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_K(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_L(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_M(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_N(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_O(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_P(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_Q(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_R(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_S(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_T(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_U(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_V(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n\ndef does_Contain_W(num, sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    if num1 == 0 or num2 == 0:\n        return False\n    if num1 == num2:\n        return True\n    for i in range(2, int(num1**0.5) + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n\n    Args:\n        a (float): The coefficient of the x^2 term.\n        b (float): The coefficient of the x term.\n        c (float): The constant term.\n\n    Returns:\n        tuple: The vertex of the parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check for real and complex roots\n    if discriminant > 0:\n        # Calculate the real root\n        root = (-b + (discriminant**0.5)) / (2*a)\n        # Calculate the imaginary root\n        root_imag = (-b - (discriminant**0.5)) / (2*a)\n        return root, root_imag\n    else:\n        # No real root\n        return None\n\n# Example usage\na = 5\nb = 3\nc = 2\n\nroot, root_imag = parabola_vertex(a, b, c)"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, index):\n    return lst[index]\n\ndef extract_elements(lst, index):\n    return [specified_element(lst, index) for index in range(len(lst))]\n\ndef extract_elements_from_list(lst, index):\n    return extract_elements(lst, index)\n\ndef extract_elements_from_list_2d(lst, index):\n    return extract_elements_from_list(lst, index)\n\ndef extract_elements_from_list_2d_2d(lst, index):\n    return extract_elements_from_list_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d(lst, index):\n    return extract_elements_from_list_2d_2d_2d(lst, index)\n\ndef extract_elements_from_list_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2d_2"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(n):\n    return ~n & ~(1 << 1)"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tuple_of_str):\n    return tuple(map(int, tuple_of_str))\n\n# Test the function"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(lst):\n    encoded = []\n    for item in lst:\n        if isinstance(item, list):\n            encoded.append(encode_list(item))\n        else:\n            encoded.append([item])\n    return encoded"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr, k, n):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize the result\n    result = 0\n\n    # Iterate over the frequency dictionary\n    for key, value in freq.items():\n        # If the frequency is greater than k, we need to make k number of operations\n        if value > k:\n            result += k - value\n            for i in range(k - value, 0, -1):\n                freq[arr[i]] -= 1\n                if freq[arr[i]] == 0:\n                    del freq[arr[i]]\n\n    return result\n\n# Test the function"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    season = []\n    if month == 'January' and day == 4:\n        season.append('winter')\n    elif month == 'January' and day == 5:\n        season.append('spring')\n    elif month == 'January' and day == 6:\n        season.append('summer')\n    elif month == 'January' and day == 7:\n        season.append('autumn')\n    elif month == 'February' and day == 4:\n        season.append('winter')\n    elif month == 'February' and day == 5:\n        season.append('spring')\n    elif month == 'February' and day == 6:\n        season.append('summer')\n    elif month == 'February' and day == 7:\n        season.append('autumn')\n    elif month == 'March' and day == 4:\n        season.append('winter')\n    elif month == 'March' and day == 5:\n        season.append('spring')\n    elif month == 'March' and day == 6:\n        season.append('summer')\n    elif month == 'March' and day == 7:\n        season.append('autumn')\n    elif month == 'April' and day == 4:\n        season.append('winter')\n    elif month == 'April' and day == 5:\n        season.append('spring')\n    elif month == 'April' and day == 6:\n        season.append('summer')\n    elif month == 'April' and day == 7:\n        season.append('autumn')\n    elif month == 'May' and day == 4:\n        season.append('winter')\n    elif month == 'May' and day == 5:\n        season.append('spring')\n    elif month == 'May' and day == 6:\n        season.append('summer')\n    elif month == 'May' and day == 7:\n        season.append('autumn')\n    elif month == 'June' and day == 4:\n        season.append('winter')\n    elif month == 'June' and day == 5:\n        season.append('spring')\n    elif month == 'June' and day == 6:\n        season.append('summer')\n    elif month == 'June' and day == 7:\n        season.append('autumn')\n    elif month == 'July' and day == 4:\n        season.append('winter')\n    elif month == 'July' and day == 5:\n        season.append('spring')\n    elif month == 'July' and day == 6:\n        season.append('summer')\n    elif month == 'July' and day == 7:\n        season.append('autumn')\n    elif month == 'August' and day == 4:\n        season.append('winter')\n    elif month == 'August' and day == 5:\n        season.append('spring')\n    elif month == 'August' and day == 6:\n        season.append('summer')\n    elif month == 'August' and day == 7:\n        season.append('autumn')\n    elif month == 'September' and day == 4:\n        season.append('winter')\n    elif month == 'September' and day == 5:\n        season.append('spring')\n    elif month == 'September' and day == 6:\n        season.append('summer')\n    elif month == 'September' and day == 7:\n        season.append('autumn')\n    elif month == 'October' and day == 4:\n        season.append('winter')\n    elif month == 'October' and day == 5:\n        season.append('spring')\n    elif month == 'October' and day == 6:\n        season.append('summer')\n    elif month == 'October' and day == 7:\n        season.append('autumn')\n    elif month == 'November' and day == 4:\n        season.append('winter')\n    elif month == 'November' and day == 5:\n        season.append('spring')\n    elif month == 'November' and day == 6:\n        season.append('summer')\n    elif month == 'November' and day == 7:\n        season.append('autumn')\n    elif month == 'December' and day == 4:\n        season.append('winter')\n    elif month == 'December' and day == 5:\n        season.append('spring')\n    elif month == 'December' and day == 6:\n        season.append('summer')\n    elif month == 'December' and day == 7:\n        season.append('autumn')\n    elif month == 'January' and day == 4:\n        season.append('winter')\n    elif month == 'January' and day == 5:\n        season.append('spring')\n    elif month == 'January' and day == 6:\n        season.append('summer')\n    elif month == 'January' and day == 7:\n        season.append('autumn')\n    elif month == 'February' and day == 4:\n        season.append('winter')\n    elif month == 'February' and day == 5:\n        season.append('spring')\n    elif month == 'February' and day == 6:\n        season.append('summer')\n    elif month == 'February' and day == 7:\n        season.append('autumn')\n    elif month == 'March' and day == 4:\n        season.append('winter')\n    elif month == 'March' and day == 5:\n        season.append('spring')\n    elif month == 'March' and day == 6:\n        season.append('summer')\n    elif month == 'March' and day == 7:\n        season.append('autumn')\n    elif month == 'April' and day == 4:\n        season.append('winter')\n    elif month == 'April' and day == 5:\n        season.append('spring')\n    elif month == 'April' and day == 6:\n        season.append('summer')\n    elif month == 'April' and day == 7:\n        season.append('autumn')\n    elif month == 'May' and day == 4:\n        season.append('winter')\n    elif month == 'May' and day == 5:\n        season.append('spring')\n    elif month == 'May' and day == 6:\n        season.append('summer')\n    elif month == 'May' and day == 7:\n        season.append('autumn')\n    elif month == 'June' and day == 4:\n        season.append('winter')\n    elif month == 'June' and day == 5:\n        season.append('spring')\n    elif month == 'June' and day == 6:\n        season.append('summer')\n    elif month == 'June' and day == 7:\n        season.append('autumn')\n    elif month == 'July' and day == 4:\n        season.append('winter')\n    elif month == 'July' and day == 5:\n        season.append('spring')\n    elif month == 'July' and day == 6:\n        season.append('summer')\n    elif month == 'July' and day == 7:\n        season.append('autumn')\n    elif month == 'August' and day == 4:\n        season.append('winter')\n    elif month == 'August' and day == 5:\n        season.append('spring')\n    elif month == 'August' and day == 6:\n        season.append('summer')\n    elif month == 'August' and day == 7:\n        season.append('autumn')\n    elif month == 'September' and day == 4:\n        season.append('winter')\n    elif month == 'September' and day == 5:\n        season.append('spring')\n    elif month == 'September' and day == 6:\n        season.append('summer')\n    elif month == 'September' and day == 7:\n        season.append('autumn')\n    elif month == 'October' and day == 4:\n        season.append('winter')\n    elif month == 'October' and day == 5:\n        season.append('spring')\n    elif month == 'October' and day == 6:\n        season.append('summer')\n    elif month == 'October' and day == 7:\n        season.append('autumn')\n    elif month == 'November' and day == 4:\n        season.append('winter')\n    elif month == 'November' and day == 5:\n        season.append('spring')\n    elif month == 'November' and day == 6:\n        season.append('summer')\n    elif month == 'November' and day == 7:\n        season.append('autumn')\n    elif month == 'December' and day == 4:\n        season.append('winter')\n    elif month == 'December' and day == 5:\n        season.append('spring')\n    elif month == 'December' and day == 6:\n        season.append('summer')\n    elif month == 'December' and day == 7:\n        season.append('autumn')\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x, y = 0, 0\n    while a <= n:\n        x += a\n        y += b\n        a += b\n    return (x, y)"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    return sum\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\"\"\"\ndef area_polygon(n, side):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Args:\n        n (int): Number of sides of the polygon.\n        side (float): Length of one side of the polygon.\n\n    Returns:\n        float: Area of the polygon.\n    \"\"\"\n    area = side * (side * (n - 2) + n * (n - 3) / 2) / 2\n    return area\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(a, b):\n    if a == b:\n        return True\n    else:\n        for i in range(1, int(a**0.5) + 1):\n            if a % i == 0 and b % i == 0:\n                return False\n        return True\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    for char in string:\n        if char.islower() or char.isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] % 2 == 0:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1)\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + get_pell(n-2)\n\ndef get_pell_recursive(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_pell_recursive(n-1) + get_pell_recursive(n-2)\n\ndef get_pell_iterative(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n            result *= 2\n        return result\n\ndef get_pell_iterative_recursive_recursive_iterative_recursive_recursive_recursive_recursive(n):\n    if n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Test the function"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\"\"\"\ndef perimeter_pentagon(n):\n    if n == 5:\n        return 25\n    else:\n        return perimeter_pentagon(n-1) + 5\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    \"\"\"\n    This function takes a string as input and returns the count of the occurence of the character 'std' in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of the occurence of the character 'std' in the given string.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    return sum(char_count.values())\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(s):\n    return ''.join(c for c in s if c.isalnum())\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(keyvalue):\n    return {key: [value] for key, value in keyvalue}\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    \"\"\"\n    Calculate the perimeter of a triangle.\n\n    Args:\n        a (float): The length of the first side of the triangle.\n        b (float): The length of the second side of the triangle.\n        c (float): The length of the third side of the triangle.\n\n    Returns:\n        float: The perimeter of the triangle.\n    \"\"\"\n    return a + b + c\n\n# Example usage"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a, b):\n    lcm = a * b // gcd(a, b)\n    return (lcm, lcm % (a, b))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_lcm(a, b):\n    lcm = a * b // gcd(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_2(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_3(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_4(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_5(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_6(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_7(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_8(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_9(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_10(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_11(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_12(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_13(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_14(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_15(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_16(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_17(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_18(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_19(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_20(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_21(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_22(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_23(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_24(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_25(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_26(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_27(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_28(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_29(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_30(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_31(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_32(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_33(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_34(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_35(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_36(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_37(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_38(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_39(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_40(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_41(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_42(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_43(a, b):\n    lcm = find_lcm(a, b)\n    return (lcm, lcm % (a, b))\n\ndef find_lcm_range_44(a, b):\n    lcm = find_"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literal_strings, language):\n    return ''.join(literal_strings)\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num < 1 or num > 100:\n        return False\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    if num % 7 == 0:\n        return False\n    if num % 9 == 0:\n        return False\n    if num % 11 == 0:\n        return False\n    if num % 13 == 0:\n        return False\n    if num % 17 == 0:\n        return False\n    if num % 19 == 0:\n        return False\n    if num % 23 == 0:\n        return False\n    if num % 29 == 0:\n        return False\n    if num % 31 == 0:\n        return False\n    if num % 37 == 0:\n        return False\n    if num % 41 == 0:\n        return False\n    if num % 43 == 0:\n        return False\n    if num % 47 == 0:\n        return False\n    if num % 49 == 0:\n        return False\n    if num % 53 == 0:\n        return False\n    if num % 59 == 0:\n        return False\n    if num % 61 == 0:\n        return False\n    if num % 67 == 0:\n        return False\n    if num % 71 == 0:\n        return False\n    if num % 73 == 0:\n        return False\n    if num % 79 == 0:\n        return False\n    if num % 83 == 0:\n        return False\n    if num % 89 == 0:\n        return False\n    if num % 91 == 0:\n        return False\n    if num % 97 == 0:\n        return False\n    if num % 101 == 0:\n        return False\n    if num % 103 == 0:\n        return False\n    if num % 107 == 0:\n        return False\n    if num % 109 == 0:\n        return False\n    if num % 113 == 0:\n        return False\n    if num % 127 == 0:\n        return False\n    if num % 131 == 0:\n        return False\n    if num % 137 == 0:\n        return False\n    if num % 149 == 0:\n        return False\n    if num % 151 == 0:\n        return False\n    if num % 157 == 0:\n        return False\n    if num % 163 == 0:\n        return False\n    if num % 167 == 0:\n        return False\n    if num % 173 == 0:\n        return False\n    if num % 179 == 0:\n        return False\n    if num % 181 == 0:\n        return False\n    if num % 191 == 0:\n        return False\n    if num % 193 == 0:\n        return False\n    if num % 197 == 0:\n        return False\n    if num % 199 == 0:\n        return False\n    if num % 211 == 0:\n        return False\n    if num % 223 == 0:\n        return False\n    if num % 229 == 0:\n        return False\n    if num % 233 == 0:\n        return False\n    if num % 239 == 0:\n        return False\n    if num % 241 == 0:\n        return False\n    if num % 243 == 0:\n        return False\n    if num % 247 == 0:\n        return False\n    if num % 249 == 0:\n        return False\n    if num % 251 == 0:\n        return False\n    if num % 257 == 0:\n        return False\n    if num % 259 == 0:\n        return False\n    if num % 263 == 0:\n        return False\n    if num % 267 == 0:\n        return False\n    if num % 269 == 0:\n        return False\n    if num % 271 == 0:\n        return False\n    if num % 273 == 0:\n        return False\n    if num % 279 == 0:\n        return False\n    if num % 283 == 0:\n        return False\n    if num % 289 == 0:\n        return False\n    if num % 293 == 0:\n        return False\n    if num % 297 == 0:\n        return False\n    if num % 299 == 0:\n        return False\n    if num % 303 == 0:\n        return False\n    if num % 307 == 0:\n        return False\n    if num % 313 == 0:\n        return False\n    if num % 319 == 0:\n        return False\n    if num % 323 == 0:\n        return False\n    if num % 329 == 0:\n        return False\n    if num % 333 == 0:\n        return False\n    if num % 339 == 0:\n        return False\n    if num % 343 == 0:\n        return False\n    if num % 349 == 0:\n        return False\n    if num % 353 == 0:\n        return False\n    if num % 359 == 0:\n        return False\n    if num % 367 == 0:\n        return False\n    if num % 373 == 0:\n        return False\n    if num % 379 == 0:\n        return False\n    if num % 383 == 0:\n        return False\n    if num % 389 == 0:\n        return False\n    if num % 393 == 0:\n        return False\n    if num % 399 == 0:\n        return False\n    if num % 403 == 0:\n        return False\n    if num % 409 == 0:\n        return False\n    if num % 413 == 0:\n        return False\n    if num % 419 == 0:\n        return False\n    if num % 423 == 0:\n        return False\n    if num % 429 == 0:\n        return False\n    if num % 433 == 0:\n        return False\n    if num % 439 == 0:\n        return False\n    if num % 443 == 0:\n        return False\n    if num % 449 == 0:\n        return False\n    if num % 453 == 0:\n        return False\n    if num % 459 == 0:\n        return False\n    if num % 463 == 0:\n        return False\n    if num % 469 == 0:\n        return False\n    if num % 473 == 0:\n        return False\n    if num % 479 == 0:\n        return False\n    if num % 483 == 0:\n        return False\n    if num % 489 == 0:\n        return False\n    if num % 493 == 0:\n        return False\n    if num % 499 == 0:\n        return False\n    if num % 503 == 0:\n        return False\n    if num % 509 == 0:\n        return False\n    if num % 513 == 0:\n        return False\n    if num % 523 == 0:\n        return False\n    if num % 529 == 0:\n        return False\n    if num % 533 == 0:\n        return False\n    if num % 539 == 0:\n        return False\n    if num % 543 == 0:\n        return False\n    if num % 549 == 0:\n        return False\n    if num % 553 == 0:\n        return False\n    if num % 559 == 0:\n        return False\n    if num % 563 == 0:\n        return False\n    if num % 569 == 0:\n        return False\n    if num % 573 == 0:\n        return False\n    if num % 579 == 0:\n        return False\n    if num % 583 == 0:\n        return False\n    if num % 589 == 0:\n        return False\n    if num % 593 == 0:\n        return False\n    if num % 603 == 0:\n        return False\n    if num % 609 == 0:\n        return False\n    if num % 613 == 0:\n        return False\n    if num % 619 == 0:\n        return False\n    if num % 623 == 0:\n        return False\n    if num % 629 == 0:\n        return False\n    if num % 63"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points using latitude and longitude.\n\n    Parameters:\n        lat1 (float): Latitude of the first point.\n        lon1 (float): Longitude of the first point.\n        lat2 (float): Latitude of the second point.\n        lon2 (float): Longitude of the second point.\n\n    Returns:\n        float: The distance between the two points in kilometers.\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    return math.degrees(c) * 1.1107203685743161e-08\n\n# Example usage"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strings, length):\n    prefix = \"\"\n    for i in range(length):\n        for j in range(i + 1, length):\n            if strings[i] == strings[j]:\n                prefix += strings[i]\n                break\n        if not prefix:\n            return \"\"\n    return prefix\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(text):\n    pattern = r\"[A-Za-z0-9_]\"\n    return [re.findall(pattern, text), [re.findall(pattern, text, re.IGNORECASE)], [re.findall(pattern, text, re.S)], []]\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n\n    Args:\n        a (float): The x-coordinate of the focus.\n        b (float): The y-coordinate of the focus.\n        c (float): The y-coordinate of the vertex.\n\n    Returns:\n        tuple: The coordinates of the focus.\n    \"\"\"\n    # Calculate the focal length\n    f = (a * c - b * b) / (2 * a * c)\n\n    # Calculate the x-coordinate of the focus\n    x = -f / (2 * a)\n\n    # Calculate the y-coordinate of the focus\n    y = (b * x - c) / (2 * a)\n\n    return (x, y)"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text, literals):\n    return re.search(r'\\b' + '|'.join(literal for literal in literals) + r'\\b', text)\n\n# Test the function\ntext = 'The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.'\nliterals = ['fox', 'dog']\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\"\"\"\ndef longest_common_subsequence(seq1, seq2, length, width):\n    if length == 0 or width == 0:\n        return 0\n\n    if length == width:\n        return 1\n\n    if seq1[length - 1] == seq2[width - 1]:\n        return 1 + longest_common_subsequence(seq1, seq2, length - 1, width - 1)\n\n    return max(longest_common_subsequence(seq1, seq2, length - 1, width), longest_common_subsequence(seq1, seq2, length, width - 1))\n\ndef longest_common_subsequence_memoized(seq1, seq2, length, width):\n    if length == 0 or width == 0:\n        return 0\n\n    if length == width:\n        return 1\n\n    if seq1[length - 1] == seq2[width - 1]:\n        return 1 + longest_common_subsequence_memoized(seq1, seq2, length - 1, width - 1)\n\n    return max(longest_common_subsequence_memoized(seq1, seq2, length - 1, width - 1), longest_common_subsequence_memoized(seq1, seq2, length, width - 1))\n\ndef longest_common_subsequence_memoized_memoized(seq1, seq2, length, width):\n    if length == 0 or width == 0:\n        return 0\n\n    if length == width:\n        return 1\n\n    if seq1[length - 1] == seq2[width - 1]:\n        return 1 + longest_common_subsequence_memoized_memoized(seq1, seq2, length - 1, width - 1)\n\n    return max(longest_common_subsequence_memoized_memoized(seq1, seq2, length - 1, width - 1), longest_common_subsequence_memoized_memoized(seq1, seq2, length, width - 1))\n\ndef longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length, width):\n    if length == 0 or width == 0:\n        return 0\n\n    if length == width:\n        return 1\n\n    if seq1[length - 1] == seq2[width - 1]:\n        return 1 + longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length - 1, width - 1)\n\n    if seq1[length - 1] != seq2[width - 1]:\n        return max(longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length - 1, width - 1), longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length, width - 1))\n\n    return max(longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length - 1, width - 1), longest_common_subsequence_memoized_memoized_memoized(seq1, seq2, length, width - 1))"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(number):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n\n    Args:\n        number (int): The given number.\n\n    Returns:\n        bool: True if the number can be represented by product of two squares, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 1:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 3:\n        return False\n\n    # Check if the number is a perfect square\n    if number % 4 == 2:\n        return False\n\n    # Check if"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\"\"\"\ndef first_Missing_Positive(nums):\n    count = 0\n    for num in nums:\n        count += 1\n        if count > 0:\n            return count\n    return count\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, x2, y1, y2):\n    count = 0\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            if x**2 + y**2 == (x2 + y2) ** 2:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month_name):\n    if month_name in [\"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    return any(char.isalpha() or char.isdigit() for char in string)\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(t):\n    return tuple(set(t))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_num):\n    decimal_num = 0\n    for i in range(0, len(octal_num), 8):\n        decimal_num += int(octal_num[i:i+8], 8) * (2 ** i)\n    return decimal_num\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, target, target_index):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [(t[0], t[1]) for t in tuples if len(t) < k]\n\n# Test the function\ntuples = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\nk = 1"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(a, b, c, d):\n    return (a * b * c * d) ** (1 / (b * c * d))\n\ndef find_exponentio_tuple(a, b, c, d):\n    return (a * b * c * d) ** (1 / (b * c * d))\n\ndef find_exponentio_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple(a, b, c, d), find_exponentio_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c, d))\n\ndef find_exponentio_tuple_tuple_tuple_tuple_tuple_tuple(a, b, c, d):\n    return (find_exponentio_tuple_tuple_tuple(a, b, c, d), find_exponentio_tuple_tuple_tuple_tuple(a, b, c"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\nimport math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Find the largest triangle that can be inscribed in an ellipse.\n\n    Args:\n        a (float): The semi-major axis of the ellipse.\n        b (float): The semi-minor axis of the ellipse.\n\n    Returns:\n        float: The largest triangle that can be inscribed in the ellipse.\n    \"\"\"\n    # Calculate the semi-axes of the ellipse\n    semi_a = a / math.sqrt(a**2 + b**2)\n    semi_b = b / math.sqrt(a**2 + b**2)\n\n    # Calculate the area of the ellipse\n    area = semi_a * semi_b\n\n    # Calculate the semi-perimeter of the ellipse\n    semi_perimeter = (a + b + semi_a + semi_b) / 2\n\n    # Calculate the area of the triangle\n    area_triangle = semi_perimeter * (semi_a + semi_b) / 2\n\n    # Calculate the area of the largest triangle\n    area_largest = area_triangle / area\n\n    return area_largest\n\n# Test the function"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 0\n    while n > 0:\n        power += 1\n        n //= 2\n    return power\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_val = max(lst)\n    max_index = lst.index(max_val)\n    return [max_index]\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef check_same_elements(lst):\n    return len(set(lst)) == len(lst)\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return ''.join(c for c in s if c not in 'aeiou')\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(a, b):\n    \"\"\"\n    Calculate the hamming distance between two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The hamming distance between a and b.\n    \"\"\"\n    return bin(a ^ b).count('1')\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for char in string:\n        if char == char:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(t):\n    \"\"\"\n    Finds the inversions of tuple elements in the given tuple list.\n\n    Args:\n        t (tuple): A tuple of integers.\n\n    Returns:\n        list: A list of inversions of tuple elements.\n    \"\"\"\n    inversions = []\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            if t[i] < t[j]:\n                t[i], t[j] = t[j], t[i]\n                inversions.append(t[i] - t[j])\n    return inversions\n\n# Example usage\nt = (7, 8, 9, 1, 10, 7)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuples):\n    \"\"\"\n    Concatenates adjacent elements in the given tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list of concatenated elements.\n    \"\"\"\n    return [tuple[0] + tuple[1] + tuple[2] + tuple[3] + tuple[4] + tuple[5] for tuple in tuples]\n\n# Example usage\ntuples = [('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS')]"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    Find the longest repeating subsequence in a string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The length of the longest repeating subsequence.\n    \"\"\"\n    if not s:\n        return 0\n\n    dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    longest_repeating_subseq = 0\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if dp[i][j] > longest_repeating_subseq:\n                longest_repeating_subseq = dp[i][j]\n\n    return longest_repeating_subseq\n\n# Example usage\ns = \"AABEBCDD\""], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\nimport re\n\ndef is_decimal(decimal):\n    pattern = r'[+-]?[0-9]+\\.?[0-9]+'\n    return bool(re.match(pattern, decimal))\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    if len(heap) > 1:\n        heap.pop()\n        heap.append(item)\n        heapify(heap)\n    return heap"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    pattern = r\"[a-zA-Z0-9]\"\n    return bool(re.search(pattern, string))\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i & j) == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return (n * (n - 1) * (n - 2) * (n - 3) * (n - 4)) / 8\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(string_1, string_2):\n    return tuple(string_1 + string_2)\n\n# Test the function"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(degree):\n    return degree * (180 / math.pi)\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(encoded_list):\n    decoded_list = []\n    for encoded_list_item in encoded_list:\n        if encoded_list_item == ' ':\n            decoded_list.append(encoded_list_item)\n        elif encoded_list_item == ' ':\n            decoded_list.append(encoded_list_item)\n            decoded_list.append(encoded_list_item)\n        else:\n            decoded_list.append(int(encoded_list_item))\n    return decoded_list"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(nested_list1, nested_list2):\n    for item in nested_list1:\n        if isinstance(item, list):\n            if check_subset_list(item, nested_list2):\n                return True\n        else:\n            if item in nested_list2:\n                return True\n    return False"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    if a > b:\n        return min_Operations(b, a)\n    else:\n        return min_Operations(a, b) + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    if len(tup) < k:\n        return None\n    min_val = max_val = tup[0]\n    for i in range(1, k):\n        if tup[i] < min_val:\n            min_val = tup[i]\n        elif tup[i] > max_val:\n            max_val = tup[i]\n    return (min_val, max_val)\n\n# Test the function"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    Replaces maximum n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        text (str): The text to be modified.\n        n (int): The maximum number of occurrences to replace.\n\n    Returns:\n        str: The modified text.\n    \"\"\"\n    max_count = 0\n    max_count_str = ''\n    max_count_str_str = ''\n\n    for char in text:\n        if char == ' ':\n            max_count += 1\n            max_count_str += ':'\n        elif char == ',':\n            max_count += 1\n            max_count_str_str += ':'\n        elif char == '.':\n            max_count += 1\n            max_count_str_str += ':'\n        else:\n            max_count += 1\n\n    if max_count > 0:\n        max_count_str += ':'\n        max_count_str += str(max_count)\n        max_count_str_str += ':'\n        max_count_str_str += str(max_count)\n\n    return max_count_str_str + ':' + max_count_str\n\n# Test the function\ntext = 'Python language, Programming language.'\nn = 2"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    return all(isinstance(x, type(t)) for x in t)\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, num, count):\n    for i in range(len(arr)):\n        if arr[i] == num and count < 2:\n            return False\n    return True\n\ndef majority_element(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == num and count < 2:\n            count += 1\n        else:\n            count -= 1\n    return num if count > len(arr) / 2 else None\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr, left, right):\n    if left > right:\n        return float('inf')\n    mid = (left + right) // 2\n    if mid == 0 or mid == len(arr) - 1:\n        return arr[mid]\n    if arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return find_Min(arr, left, mid - 1)\n    elif arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return find_Min(arr, mid - 1, right)\n    else:\n        return find_Min(arr, left, mid - 1)"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef odd_values_string(s):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string without odd index characters.\n    \"\"\"\n    return ''.join([c for c in s if c not in ['a', 'b', 'c', 'd', 'e', 'f'] and c not in ['a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']])\n\n# Test the function"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(start, end, bit_range):\n    return all(bin(i)[2:].count(bit) == 1 for i in range(start, end+1) for bit in bit_range)\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr):\n    \"\"\"\n    Re-arrange the elements of the given array so that all negative elements appear before positive ones.\n\n    Args:\n        arr (list): The given array.\n\n    Returns:\n        list: The re-arranged array.\n    \"\"\"\n    for i in range(len(arr) - 1, -1, -1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# Example usage\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, char):\n    return s.replace(' ', char)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle):\n    \"\"\"\n    Find the maximum sum in the given right triangle of numbers.\n\n    Args:\n        triangle (list): A list of lists, where each sublist represents a row of the triangle.\n\n    Returns:\n        int: The maximum sum in the triangle.\n    \"\"\"\n    if not triangle:\n        return 0\n\n    max_sum = 0\n    for i in range(1, len(triangle)):\n        for j in range(i):\n            for k in range(j, len(triangle)):\n                current_sum = triangle[i][j] + triangle[i][k] + triangle[k][j] + triangle[k][k]\n                max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n# Example usage\ntriangle = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nimport heapq\n\ndef larg_nnum(num_list, n):\n    return heapq.nlargest(n, num_list)\n\n# Test the function"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * pi * radius * height"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\"\"\"\ndef volume_cube(side):\n    return side**3"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(number):\n    result = 0\n    for i in range(number):\n        if number % 2 == 0:\n            result |= 1 << i\n    return result\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\"\"\"\ndef No_of_Triangle(n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(m):\n                if i == j and j == k:\n                    count += 1\n    return count\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\"\"\"\ndef check_occurences(tuples):\n    counts = {}\n    for tup in tuples:\n        for record in tup:\n            if record in counts:\n                counts[record] += 1\n            else:\n                counts[record] = 1\n    return counts\n\n# Test the function\ntuples = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    else:\n        return get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-2, m) + get_total_number_of_sequences(n-3, m) + get_total_number_of_sequences(n-4, m)\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, lst2):\n    return [lst2[0]] + lst2[1:] + [lst2[0]]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\nimport numpy as np\n\ndef array_3d(rows, cols, cols):\n    array = np.zeros((rows, cols, cols))\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(cols):\n                array[i, j, k] = '*'\n    return array\n\n# Test the function\narray = array_3d(6, 4, 3)"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\"\"\"\ndef count_charac(string):\n    count = 0\n    for char in string:\n        count += len(char)\n    return count\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    Args:\n        n (int): The number to find the next perfect square greater than.\n\n    Returns:\n        int: The next perfect square greater than n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    perfect_squares = [i**2 for i in range(1, int(n**0.5) + 1)]\n\n    for i in range(len(perfect_squares) - 1):\n        if perfect_squares[i+1] - perfect_squares[i] == 1:\n            return perfect_squares[i] + 1\n\n    return perfect_squares[-1] + 1\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, target):\n    if len(arr) == 0:\n        return 0\n    \n    max_sum = 0\n    current_sum = 0\n    \n    for num in arr:\n        current_sum += num\n        if current_sum > target:\n            max_sum = current_sum\n            current_sum = num\n    \n    return max_sum\n\n# Test the function"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(n):\n    \"\"\"\n    Compute square roots using the babylonian method.\n\n    Args:\n        n (int): The number for which to compute the square root.\n\n    Returns:\n        float: The square root of n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = n\n        while b > 1:\n            a = b\n            b = (a + b) // 2\n        return b\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\"\"\"\ndef lps(s):\n    lps = [0] * len(s)\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps[i] = j + 1\n                break\n        if lps[i] > lps[j]:\n            lps[i] = j + 1\n    return lps\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return 1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 / (1 + 1 /"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(complex_num):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n\n    Args:\n        complex_num (complex): A complex number.\n\n    Returns:\n        tuple: A tuple containing the magnitude and angle of the complex number.\n    \"\"\"\n    magnitude = math.sqrt(complex_num.real**2 + complex_num.imag**2)\n    angle = math.atan2(complex_num.imag, complex_num.real)\n\n    return magnitude, angle\n\n# Example usage\ncomplex_num = 1 + 2j\nmagnitude, angle = convert(complex_num)"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    words = string.split()\n    return [word for word in words if word[0].lower() in 'ae']\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\nimport itertools\n\ndef combinations_colors(colors, num_colors):\n    return list(itertools.combinations(colors, num_colors))\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\"\"\"\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(num % i != 0):\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(a, b):\n    return (b, a)\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    return tuple1 if tuple1[0] > tuple2[0] else tuple2"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return newman_prime(n // 2)\n    else:\n        return newman_prime(n - 1) + 1\n"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\"\"\"\ndef division_elements(elements):\n    return [(x / y) for x, y in elements]\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length(lst, length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length(lst, length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length(lst, length, default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    if length > len(lst):\n        return lst, lst\n    else:\n        return lst[:length], lst[length:]\n\ndef split_two_parts_with_default_length_and_default_length_and_default_length_and_default_length(lst, length, default_length, default_length_and_default_length):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n\n    Args:\n        lst (list): The list to be split.\n        length (int): The length of the first part of the list.\n        default_length (int): The default length of the first part of the list.\n        default_length_and_default_length (int): The default length of the second part of the list.\n\n   "], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    merged_dict = {}\n    for key, value in dict1.items():\n        if key in dict2:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = value\n    for key, value in dict2.items():\n        if key in dict1:\n            merged_dict[key] = value\n    return merged_dict\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\ndef dog_age(age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Args:\n        age (int): The age of the dog.\n\n    Returns:\n        int: The age of the dog in dog's years.\n    \"\"\"\n    return age * 7\n\n# Example usage:"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\"\"\"\n\ndef lateralsurface_cube(side):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side (int): The side length of the cube.\n\n    Returns:\n        int: The lateral surface area of the cube.\n    \"\"\"\n    return 6 * side**2\n\n# Test the function\nside = 5"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\"\"\"\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    Args:\n        n (int): The number of stars to find.\n\n    Returns:\n        int: The n'th star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n\n# Example usage"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, index):\n    sum = 0\n    for i in range(index, len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    \"\"\"\n    Extracts the rear element from list of tuples records.\n\n    Args:\n        records (list): A list of tuples, where each tuple contains a record.\n\n    Returns:\n        list: A list of rear elements.\n    \"\"\"\n    rear = []\n    for record in records:\n        if record[2] not in rear:\n            rear.append(record[2])\n        else:\n            rear.append(rear[-1] + record[2])\n    return rear"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(t1, t2):\n    return tuple(t1[i] - t2[i] for i in range(len(t1)))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    if n == 0:\n        return 1\n    return n * even_binomial_Coeff_Sum(n - 1)\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, target, pos):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return 3.14 * (radius**2) * height\n\n# Example usage:"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, value):\n    return {key: value for key, value in dictionary.items() if value == value}\n\n# Example usage\ndictionary = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(record):\n    count = 0\n    for element in record:\n        if element == record[0]:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Determine if a number is a decagonal number.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a decagonal number, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    if n == 93:\n        return True\n    if n == 94:\n        return True\n    if n == 95:\n        return True\n    if n == 96:\n        return True\n    if n == 97:\n        return True\n    if n == 98:\n        return True\n    if n == 99:\n        return True\n    if n == 100:\n        return True\n    if n == 101:\n        return True\n    if n == 102:\n        return True\n    if n == 103:\n        return True\n    if n == 104:\n        return True\n    if n == 105:\n        return True\n    if n == 106:\n        return True\n    if n == 107:\n        return True\n    if n == 108:\n        return True\n    if n == 109:\n        return True\n    if n == 110:\n        return True\n    if n == 111:\n        return True\n    if n == 112:\n        return True\n    if n == 113:\n        return True\n    if n == 114:\n        return True\n    if n == 115:\n        return True\n    if n == 116:\n        return True\n    if n == 117:\n        return True\n    if n == 118:\n        return True\n    if n == 119:\n        return True\n    if n == 120:\n        return True\n    if n == 121:\n        return True\n    if n == 122:\n        return True\n    if n == 123:\n        return True\n    if n == 124:\n        return True\n    if n == 125:\n        return True\n    if n == 126:\n        return True\n    if n == 127:\n        return True\n    if n == 128:\n        return True\n    if n == 129:\n        return True\n    if n == 130:\n        return True\n    if n == 131:\n        return True\n    if n == 132:\n        return True\n    if n == 133:\n        return True\n    if n == 134:\n        return True\n    if n == 135:\n        return True\n    if n == 136:\n        return True\n    if n == 137:\n        return True\n    if n == 138:\n        return True\n    if n == 139:\n        return True\n    if n == 140:\n        return True\n    if n == 141:\n        return True\n    if n == 142:\n        return True\n    if n == 143:\n        return True\n    if n == 144:\n        return True\n    if n == 145:\n        return True\n    if n == 146:\n        return True\n    if n == 147:\n        return True\n    if n == 148:\n        return True\n    if n == 149:\n        return True\n    if n == 150:\n        return True\n    if n == 151:\n        return True\n    if n == 152:\n        return True\n    if n == 153:\n        return True\n    if n == 154:\n        return True\n    if n == 155:\n        return True\n    if n == 156:\n        return True\n    if n == 157:\n        return True\n    if n == 158:\n        return True\n    if n == 159:\n        return True\n    if n == 160:\n        return True\n    if n == 161:\n        return True\n    if n == 162:\n        return True\n    if n == 163:\n        return True\n    if n == 164:\n        return True\n    if n == 165:\n        return True\n    if n == 166:\n        return True\n    if n == 167:\n        return True\n    if n == 168:\n        return True\n    if n == 169:\n        return True\n    if n == 170:\n        return True\n    if n == 1"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, None)\n\n# Test the function"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    return len(lst) == len(set(lst))"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(n):\n    frequency = {}\n    for digit in str(n):\n        frequency[digit] = frequency.get(digit, 0) + 1\n    for digit in frequency:\n        if frequency[digit] <= digit:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, str):\n    for item in lst:\n        if item != str:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    \"\"\"\n    Matching a string that has an a followed by two to three 'b'.\n\n    Args:\n        text (str): The string to be matched.\n\n    Returns:\n        str: The matched string.\n    \"\"\"\n    return 'Not matched!'"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sub_array = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum, max_sub_array\n\n# Test the function\narr = [10, 20, -30, -1]\nk = 4\nn = 3\nmax_sum, max_sub_array = max_sub_array_sum_repeated(arr, k, n)"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, q):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] % q == 0 and arr[j] % q == 0:\n                return i\n\ndef count_elements_with_modular_inverse(arr, p, q):\n    count = 0\n    for i in arr:\n        count += modular_inverse(arr, p, q)\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if year % 4 == 0 and year % 100 != 0:\n        days[2] = 29\n    elif year % 400 == 0:\n        days[2] = 29\n    else:\n        days[2] = 28\n    return days[0]\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_length = 0\n    max_list = []\n    for lst in lst:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i < j:\n                count += count_no_of_ways(i, j - 1) + count_no_of_ways(j, i - 1)\n            else:\n                count += count_no_of_ways(i - 1, j) + count_no_of_ways(i, j - 1)\n    return count"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n    quotient = num1 / num2\n    return quotient\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\"\"\"\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Finds the third side of a right angled triangle.\n\n    Args:\n        a (float): The length of the first side.\n        b (float): The length of the second side.\n\n    Returns:\n        float: The length of the third side.\n    \"\"\"\n    return a + b - b"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    max_val = lst[0]\n    for value in lst:\n        if value > max_val:\n            max_val = value\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlist2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    max_sum = 0\n    for t in tuples:\n        max_sum = max(max_sum, t[1])\n    return max_sum\n\n# Test the function\ntuples = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        count += sum(bin(i)[2:].count('1') for bin in ['0', '1'] for i in range(n))\n    return count"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += dict_depth(value)\n        else:\n            depth += 1\n    return depth"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr, count):\n    count_inversion = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j] and count_inversion < count:\n                count_inversion += 1\n    return count_inversion == count"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, rotations, index):\n    if rotations == 0:\n        return index\n    if index >= len(arr):\n        return index\n    if index < 0:\n        return index + len(arr)\n    if index < 0:\n        return find_Element(arr, rotations - 1, index)\n    if index < len(arr):\n        return find_Element(arr, rotations, index - len(arr) + 1)\n\n# Example usage\narr = [1,2,3,4,5]\nrotations = 2\nindex = 1"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    return [word for word in words if word[0] == 'p']\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, k, prefix, suffix):\n    if k > len(prefix):\n        return 0\n    if k > len(arr):\n        return 0\n    if k == len(arr):\n        return max(arr[0], arr[k])\n    if k > len(arr) and prefix[k] > suffix[k]:\n        return max_sum_increasing_subseq(arr, k, prefix, suffix) + arr[k]\n    if k > len(arr) and suffix[k] > prefix[k]:\n        return max_sum_increasing_subseq(arr, k, prefix, suffix) + suffix[k]\n    return max(max_sum_increasing_subseq(arr, k, prefix, suffix), max_sum_increasing_subseq(arr, k, prefix, suffix), arr[k], suffix[k])\n\n# Test the function\narr = [1, 101, 2, 3, 100, 4, 5]\nk = 7\nprefix, suffix = [0, 0], [0, 0]"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tup, start, end):\n    return tup[start:end]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n    \n    # Find the maximum product\n    max_product = max(list1[n-1], list2[n-1])\n    \n    # Find the maximum product from the two lists\n    max_product_from_both = max(max_product, max_product)\n    \n    # Find the maximum product from the two lists\n    max_product_from_both_from_list1 = max(max_product, max_product_from_both)\n    \n    # Find the maximum product from the two lists\n    max_product_from_both_from_list2 = max(max_product, max_product_from_both)\n    \n    # Return the maximum product from both lists\n    return max_product_from_both_from_list1 * max_product_from_both_from_list2\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    return max(a, b)\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    leftmost_bit = 0\n    for i in range(1, n):\n        if n & (1 << i):\n            leftmost_bit = i\n            break\n    return leftmost_bit\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Args:\n        radius (float): The radius of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * (radius**2) * height\n\n# Example usage"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [num for num in lst if num > 0]\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    Finds the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\n    Args:\n        grid (list): A list of lists, where each inner list represents a row in the grid.\n        n (int): The size of the grid.\n\n    Returns:\n        int: The maximum sum.\n    \"\"\"\n    max_sum = 0\n    for row in grid:\n        for num in row:\n            if num > max_sum:\n                max_sum = num\n\n    return max_sum\n\n# Example usage\ngrid = [\n    [1, 4, 5],\n    [2, 0, 0]\n]\nn = 3"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\"\"\"\ndef find_Max_Len_Even(word):\n    max_len = 0\n    even_word = \"\"\n    for char in word:\n        if char == \"even\":\n            even_word += char\n            max_len = max(max_len, len(even_word))\n        else:\n            even_word = char\n    return max_len\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    \"\"\"\n    Modify the run-length encoding from a list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A list of lists, where each inner list is a run-length encoding.\n    \"\"\"\n    encoded = []\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            encoded.append([lst[i], lst[i+1]])\n        else:\n            encoded.append([lst[i], [lst[i], lst[i+1]]])\n    return encoded\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(sum_of_sides):\n    \"\"\"\n    Find the maximum volume of a cuboid with given sum of sides.\n\n    Args:\n        sum_of_sides (int): The sum of the sides of the cuboid.\n\n    Returns:\n        int: The maximum volume of a cuboid.\n    \"\"\"\n    volume = 0\n    for side in range(sum_of_sides):\n        volume += side * side * side\n    return volume\n\n# Example usage"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(s):\n    return re.findall(r'\\b[a-zA-Z]\\w*\\b', s)\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    sum_of_first_n_natural_numbers = sum(range(1, n+1))\n    sum_of_squared_first_n_natural_numbers = sum(i**2 for i in range(1, n+1))\n    return sum_of_first_n_natural_numbers - sum_of_squared_first_n_natural_numbers\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    \"\"\"\n    Finds the demlo number for the given number.\n\n    Args:\n        num (str): The number to find the demlo number for.\n\n    Returns:\n        str: The demlo number for the given number.\n    \"\"\"\n    demlo_num = ''\n    for i in range(len(num)):\n        if num[i] == '0':\n            continue\n        if i % 2 == 0:\n            demlo_num += num[i]\n        else:\n            demlo_num += '1'\n    return demlo_num\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    min_val = min(lst)\n    return [i for i, val in enumerate(lst) if val == min_val]\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    if n > len(arr):\n        return []\n    if n == 1:\n        return [arr[0]]\n    if n == 2:\n        return [arr[0], arr[1]]\n    result = re_arrange(arr[1:], n - 1)\n    result.append(arr[0])\n    result.append(arr[1])\n    return result\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(chain_list):\n    \"\"\"\n    Extract the sum of alternate chains of tuples.\n\n    Args:\n        chain_list (list): A list of tuples, where each tuple is a chain of integers.\n\n    Returns:\n        tuple: The sum of the alternate chains of tuples.\n    \"\"\"\n    sum_of_alternates = 0\n    for chain in chain_list:\n        if chain[0] == chain[1]:\n            sum_of_alternates += chain[2]\n        else:\n            sum_of_alternates += chain[1]\n    return sum_of_alternates\n\n# Example usage\nchain_list = [(5, 6, 3, 6, 10, 34), (1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12), (13, 14, 15, 16, 17, 18)]"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\"\"\"\ndef get_Min_Squares(n):\n    squares = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            squares.append(i * j)\n    return min(squares)\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    counts = {}\n    for s in strings:\n        for word in s.split():\n            if word in counts:\n                counts[word] += 1\n            else:\n                counts[word] = 1\n    max_count = max(counts.values())\n    max_word = [word for word, count in counts.items() if count == max_count]\n    return max_word\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a, b, c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst, n, direction):\n    if direction == 'left':\n        return [lst[n-1]] + rotate_left(lst, n-1, direction) + lst[:n-1]\n    elif direction == 'right':\n        return [lst[n-1]] + rotate_left(lst, n-1, direction) + lst[:n-1]\n    else:\n        return lst\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    pattern = r'[a-zA-Z]{3,5}'\n    return re.findall(pattern, string)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\"\"\"\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a,d,n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += a+(d*i)\n    return sum\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    return month_name in [\"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word):\n    \"\"\"\n    Matching a word at the end of a string.\n\n    Args:\n        text (str): The text to search.\n        word (str): The word to match.\n\n    Returns:\n        str: The matched word if found, otherwise None.\n    \"\"\"\n    return text.endswith(word)\n\ntext = \"python.com\"\nword = \"python\""], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    divisors = []\n    for i in range(start, end + 1):\n        for j in range(i + 1, end + 1):\n            if i % j == 0 and j % i == 0:\n                divisors.append(j)\n    return max(divisors)\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    if len(nums) < 3:\n        return 0\n    return sum(min(nums) for nums in zip(nums, nums[1:], nums[2:]))"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    return tuple(set)"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arr1, arr2):\n    min_range = (min(arr1), min(arr2))\n    for i in range(min_range[0], min_range[1] + 1):\n        for j in range(min_range[0], min_range[1] + 1):\n            if arr1[i] < arr2[j]:\n                min_range[0] = i\n                min_range[1] = j\n    return min_range"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\"\"\"\ndef dig_let(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n        elif char.isalpha():\n            count += 1\n    return count, count\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        for j in range(i+1, end+1):\n            if i % j == 0 and j % i != 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    return [x - y for x, y in zip(nums[:-1], nums[1:])]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k > n:\n        return 0\n    if k < 0:\n        return 0\n    if k == 0:\n        return n\n    if k == n:\n        return 0\n    if k == 1:\n        return n - k\n    if k == n - 1:\n        return n - k - 1\n    if k == 2:\n        return n - k - 2\n    if k == n - 2:\n        return n - k - 3\n    if k == n - 3:\n        return n - k - 4\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\"\"\"\ndef count_Squares(width, height):\n    count = 0\n    for i in range(width):\n        for j in range(height):\n            if i == 0 or j == 0 or i == width - 1 or j == height - 1:\n                count += 1\n    return count"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\"\"\"\ndef find_ways(length):\n    ways = []\n    for i in range(length):\n        for j in range(i, length):\n            if i + j < length:\n                ways.append(ways[i] + ways[j] + 1)\n    return ways\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check_binary(s):\n    return s.isdigit() or s.isoctable()\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(s):\n    if len(s) == 1:\n        return 1\n    else:\n        return min(minimum_Length(s[0]), minimum_Length(s[1]) + 1)\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, k_count):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count += 1\n    if count == k_count:\n        return arr[k-1]\n    else:\n        return None"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, column):\n    return [item for item in nested_list if item[column] is None]"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(n, a, r):\n    \"\"\"\n    Find t-nth term of arithmetic progression.\n\n    Args:\n        n (int): Number of terms.\n        a (int): First term.\n        r (int): Common ratio.\n\n    Returns:\n        int: t-nth term of arithmetic progression.\n    \"\"\"\n    if n == 1:\n        return a\n    else:\n        return a + (r * (tn_ap(n-1, a, r)))\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\"\"\"\ndef count_Rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef rectangles(r):\n    rectangles = []\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                rectangles.append((i, j))\n    return rectangles\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_rectangles(r):\n    count = 0\n    for i in range(r):\n        for j in range(r):\n            if (i, j) in rectangles:\n                count += 1\n    return count\n\ndef count_"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a, b):\n    \"\"\"\n    Finds the third angle of a triangle using two angles.\n\n    Args:\n        a (float): The first angle of the triangle.\n        b (float): The second angle of the triangle.\n\n    Returns:\n        float: The third angle of the triangle.\n    \"\"\"\n    return (a + b + 180) % 30\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_val = records[0]\n    for record in records:\n        if record[1] > max_val[1]:\n            max_val = record\n    return max_val\n\n# Example usage\nrecords = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    if a == 0 and b == 0 and c == 0:\n        return \"No\"\n    elif a == 0 and b == 0 and c == 1:\n        return \"Yes\"\n    elif a == 0 and b == 1 and c == 0:\n        return \"Yes\"\n    elif a == 0 and b == -1 and c == 1:\n        return \"Yes\"\n    elif a == 1 and b == 0 and c == 0:\n        return \"Yes\"\n    elif a == 1 and b == -1 and c == 0:\n        return \"Yes\"\n    elif a == 1 and b == 1 and c == 1:\n        return \"Yes\"\n    elif a == -1 and b == 0 and c == 0:\n        return \"Yes\"\n    elif a == -1 and b == -1 and c == 0:\n        return \"Yes\"\n    elif a == -1 and b == 1 and c == 1:\n        return \"Yes\"\n    elif a == -1 and b == -1 and c == -1:\n        return \"Yes\"\n    elif a == b and c == 0:\n        return \"Yes\"\n    elif a == -b and c == 0:\n        return \"Yes\"\n    elif a == b and c == -1:\n        return \"Yes\"\n    elif a == -b and c == -1:\n        return \"Yes\"\n    elif a == b and c == 1:\n        return \"Yes\"\n    elif a == -b and c == -1:\n        return \"Yes\"\n    elif a == b and c == -2:\n        return \"Yes\"\n    elif a == -b and c == -2:\n        return \"Yes\"\n    elif a == b and c == -3:\n        return \"Yes\"\n    elif a == -b and c == -3:\n        return \"Yes\"\n    elif a == b and c == -4:\n        return \"Yes\"\n    elif a == -b and c == -4:\n        return \"Yes\"\n    elif a == b and c == -5:\n        return \"Yes\"\n    elif a == -b and c == -5:\n        return \"Yes\"\n    elif a == b and c == -6:\n        return \"Yes\"\n    elif a == -b and c == -6:\n        return \"Yes\"\n    elif a == b and c == -7:\n        return \"Yes\"\n    elif a == -b and c == -7:\n        return \"Yes\"\n    elif a == b and c == -8:\n        return \"Yes\"\n    elif a == -b and c == -8:\n        return \"Yes\"\n    elif a == b and c == -9:\n        return \"Yes\"\n    elif a == -b and c == -9:\n        return \"Yes\"\n    elif a == b and c == -10:\n        return \"Yes\"\n    elif a == -b and c == -10:\n        return \"Yes\"\n    elif a == b and c == -11:\n        return \"Yes\"\n    elif a == -b and c == -11:\n        return \"Yes\"\n    elif a == b and c == -12:\n        return \"Yes\"\n    elif a == -b and c == -12:\n        return \"Yes\"\n    elif a == b and c == -13:\n        return \"Yes\"\n    elif a == -b and c == -13:\n        return \"Yes\"\n    elif a == b and c == -14:\n        return \"Yes\"\n    elif a == -b and c == -14:\n        return \"Yes\"\n    elif a == b and c == -15:\n        return \"Yes\"\n    elif a == -b and c == -15:\n        return \"Yes\"\n    elif a == b and c == -16:\n        return \"Yes\"\n    elif a == -b and c == -16:\n        return \"Yes\"\n    elif a == b and c == -17:\n        return \"Yes\"\n    elif a == -b and c == -17:\n        return \"Yes\"\n    elif a == b and c == -18:\n        return \"Yes\"\n    elif a == -b and c == -18:\n        return \"Yes\"\n    elif a == b and c == -19:\n        return \"Yes\"\n    elif a == -b and c == -19:\n        return \"Yes\"\n    elif a == b and c == -20:\n        return \"Yes\"\n    elif a == -b and c == -20:\n        return \"Yes\"\n    elif a == b and c == -21:\n        return \"Yes\"\n    elif a == -b and c == -21:\n        return \"Yes\"\n    elif a == b and c == -22:\n        return \"Yes\"\n    elif a == -b and c == -22:\n        return \"Yes\"\n    elif a == b and c == -23:\n        return \"Yes\"\n    elif a == -b and c == -23:\n        return \"Yes\"\n    elif a == b and c == -24:\n        return \"Yes\"\n    elif a == -b and c == -24:\n        return \"Yes\"\n    elif a == b and c == -25:\n        return \"Yes\"\n    elif a == -b and c == -25:\n        return \"Yes\"\n    elif a == b and c == -26:\n        return \"Yes\"\n    elif a == -b and c == -26:\n        return \"Yes\"\n    elif a == b and c == -27:\n        return \"Yes\"\n    elif a == -b and c == -27:\n        return \"Yes\"\n    elif a == b and c == -28:\n        return \"Yes\"\n    elif a == -b and c == -28:\n        return \"Yes\"\n    elif a == b and c == -29:\n        return \"Yes\"\n    elif a == -b and c == -29:\n        return \"Yes\"\n    elif a == b and c == -30:\n        return \"Yes\"\n    elif a == -b and c == -30:\n        return \"Yes\"\n    elif a == b and c == -31:\n        return \"Yes\"\n    elif a == -b and c == -31:\n        return \"Yes\"\n    elif a == b and c == -32:\n        return \"Yes\"\n    elif a == -b and c == -32:\n        return \"Yes\"\n    elif a == b and c == -33:\n        return \"Yes\"\n    elif a == -b and c == -33:\n        return \"Yes\"\n    elif a == b and c == -34:\n        return \"Yes\"\n    elif a == -b and c == -34:\n        return \"Yes\"\n    elif a == b and c == -35:\n        return \"Yes\"\n    elif a == -b and c == -35:\n        return \"Yes\"\n    elif a == b and c == -36:\n        return \"Yes\"\n    elif a == -b and c == -36:\n        return \"Yes\"\n    elif a == b and c == -37:\n        return \"Yes\"\n    elif a == -b and c == -37:\n        return \"Yes\"\n    elif a == b and c == -38:\n        return \"Yes\"\n    elif a == -b and c == -38:\n        return \"Yes\"\n    elif a == b and c == -39:\n        return \"Yes\"\n    elif a == -b and c == -39:\n        return \"Yes\"\n    elif a == b and c == -40:\n        return \"Yes\"\n    elif a == -b and c == -40:\n        return \"Yes\"\n    elif a == b and c == -41:\n        return \"Yes\"\n    elif a == -b and c == -41:\n        return \"Yes\"\n    elif a == b and c == -42:\n        return \"Yes\"\n    elif a == -b and c == -42:\n        return \"Yes\"\n    elif a == b and c == -43:\n        return \"Yes\"\n    elif a == -b and c == -43:\n        return \"Yes\"\n    elif a == b and c == -44:\n        return \"Yes\"\n    elif a == -b and c == -44:\n        return \"Yes\"\n    elif a == b and c == -45:\n        return \"Yes\"\n    elif a == -b and c == -45:\n        return \"Yes\"\n    elif a == b and c == -46:\n        return \"Yes\"\n    elif a == -b and c == -46:\n        return \"Yes\"\n    elif a == b and c == -47:\n        return \"Yes\"\n    elif a == -b and c == -47:\n        return \"Yes\"\n    elif a == b and c == -48:\n        return \"Yes\"\n    elif a == -b and c == -48:\n        return \"Yes\"\n    elif a == b and c == -49:\n        return \"Yes\"\n    elif a == -b"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\"\"\"\ndef get_carol(n):\n    if n == 0:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty_lists(lst):\n    return [item for item in lst if item]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    max_count = 0\n    max_item = None\n    for item in lst:\n        if item > max_count:\n            max_count = item\n            max_item = item\n    return max_item\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(t, k):\n    return tuple(x + k for x in t)"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\"\"\"\ndef min_flip_to_make_string_alternate(binary_string):\n    flip_count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == \"1\":\n            flip_count += 1\n        elif binary_string[i] == \"0\":\n            flip_count -= 1\n    return flip_count"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        count += num % 10\n        num //= 10\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n\n    max_product = 1\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tuple(tup * n)\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\"\"\"\ndef lateralsurface_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(nums, target, start):\n    if not nums:\n        return 0\n    if target < 0 or target > len(nums):\n        return 0\n    if target - start < len(nums) - start:\n        return target - start\n    return target"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    heap = []\n    for element in lst:\n        heap.append(heapq.heappush(heap, element))\n    while len(heap) > 1:\n        element = heapq.heappop(heap)\n        heapq.heappush(heap, heapq.heappop(heap))\n    return heapq.heappop(heap)\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, width, height):\n    return length * width * height\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    if len(s) == 0:\n        return [s]\n    result = []\n    for i in range(len(s)):\n        for p in permute_string(s[i+1:]):\n            result.append(s[i] + p)\n    return result\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num,multiple):\n    return round(num/multiple,2)\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tuple_list):\n    new_list = []\n    for item in tuple_list:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\n# Example usage\ntuple_list = [(1, 1, 4, 4, 4, 5, 5, 6, 7, 7), (1, 1, 4, 4, 4, 5, 5, 6, 7, 7)]"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char, '')\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    return [x for x in lst[::-1]] + [x for x in lst]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(rows, cols):\n    \"\"\"\n    Generates a two-dimensional array.\n\n    Args:\n        rows (int): Number of rows in the array.\n        cols (int): Number of columns in the array.\n\n    Returns:\n        list: Two-dimensional array.\n    \"\"\"\n    return [[0 for _ in range(cols)] for _ in range(rows)]\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index], reverse=True)"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(n):\n    return 1 << (n & 1)\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    smallest = min(frequency, key=frequency.get)\n    return frequency[smallest]\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) - get_perrin(n-3)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\"\"\"\ndef swap_count(s):\n    count = 0\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 0\n            stack.pop()\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hexadecimal_number):\n    return \"Odd\" if hexadecimal_number % 2 == 0 else \"Even\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    power = 0\n    while n > 0:\n        power += 1\n        n //= 2\n    return power\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst):\n    return [str(x) for x in lst]\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_of_lists, list_of_dicts, target_dict):\n    result = {}\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            result[list_of_lists[i][j]] = list_of_dicts[i][j]\n    return result\n\nlist_of_lists = [\"S001\", \"S002\", \"S003\", \"S004\", \"S005\", \"S006\", \"S007\", \"S008\", \"S009\", \"S010\", \"S011\", \"S012\", \"S013\", \"S014\", \"S015\", \"S016\", \"S017\", \"S018\", \"S019\", \"S020\", \"S021\", \"S022\", \"S023\", \"S024\", \"S025\", \"S026\", \"S027\", \"S028\", \"S029\", \"S030\", \"S031\", \"S032\", \"S033\", \"S034\", \"S035\", \"S036\", \"S037\", \"S038\", \"S039\", \"S040\", \"S041\", \"S042\", \"S043\", \"S044\", \"S045\", \"S046\", \"S047\", \"S048\", \"S049\", \"S050\", \"S051\", \"S052\", \"S053\", \"S054\", \"S055\", \"S056\", \"S057\", \"S058\", \"S059\", \"S060\", \"S061\", \"S062\", \"S063\", \"S064\", \"S065\", \"S066\", \"S067\", \"S068\", \"S069\", \"S070\", \"S071\", \"S072\", \"S073\", \"S074\", \"S075\", \"S076\", \"S077\", \"S078\", \"S079\", \"S080\", \"S081\", \"S082\", \"S083\", \"S084\", \"S085\", \"S086\", \"S087\", \"S088\", \"S089\", \"S090\", \"S091\", \"S092\", \"S093\", \"S094\", \"S095\", \"S096\", \"S097\", \"S098\", \"S099\", \"S100\", \"S101\", \"S102\", \"S103\", \"S104\", \"S105\", \"S106\", \"S107\", \"S108\", \"S109\", \"S110\", \"S111\", \"S112\", \"S113\", \"S114\", \"S115\", \"S116\", \"S117\", \"S118\", \"S119\", \"S120\", \"S121\", \"S122\", \"S123\", \"S124\", \"S125\", \"S126\", \"S127\", \"S128\", \"S129\", \"S130\", \"S131\", \"S132\", \"S133\", \"S134\", \"S135\", \"S136\", \"S137\", \"S138\", \"S139\", \"S140\", \"S141\", \"S142\", \"S143\", \"S144\", \"S145\", \"S146\", \"S147\", \"S148\", \"S149\", \"S150\", \"S151\", \"S152\", \"S153\", \"S154\", \"S155\", \"S156\", \"S157\", \"S158\", \"S159\", \"S160\", \"S161\", \"S162\", \"S163\", \"S164\", \"S165\", \"S166\", \"S167\", \"S168\", \"S169\", \"S170\", \"S171\", \"S172\", \"S173\", \"S174\", \"S175\", \"S176\", \"S177\", \"S178\", \"S179\", \"S180\", \"S181\", \"S182\", \"S183\", \"S184\", \"S185\", \"S186\", \"S187\", \"S188\", \"S189\", \"S190\", \"S191\", \"S192\", \"S193\", \"S194\", \"S195\", \"S196\", \"S197\", \"S198\", \"S199\", \"S200\", \"S201\", \"S202\", \"S203\", \"S204\", \"S205\", \"S206\", \"S207\", \"S208\", \"S209\", \"S210\", \"S211\", \"S212\", \"S213\", \"S214\", \"S215\", \"S216\", \"S217\", \"S218\", \"S219\", \"S220\", \"S221\", \"S222\", \"S223\", \"S224\", \"S225\", \"S226\", \"S227\", \"S228\", \"S229\", \"S230\", \"S231\", \"S232\", \"S233\", \"S234\", \"S235\", \"S236\", \"S237\", \"S238\", \"S239\", \"S240\", \"S241\", \"S242\", \"S243\", \"S244\", \"S245\", \"S246\", \"S247\", \"S248\", \"S249\", \"S250\", \"S251\", \"S252\", \"S253\", \"S254\", \"S255\", \"S256\", \"S257\", \"S258\", \"S259\", \"S260\", \"S261\", \"S262\", \"S263\", \"S264\", \"S265\", \"S266\", \"S267\", \"S268\", \"S269\", \"S270\", \"S271\", \"S272\", \"S273\", \"S274\", \"S275\", \"S276\", \"S277\", \"S278\", \"S279\", \"S280\", \"S281\", \"S282\", \"S283\", \"S284\", \"S285\", \"S286\", \"S287\", \"S288\", \"S289\", \"S290\", \"S291\", \"S292\", \"S293\", \"S294\", \"S295\", \"S296\", \"S297\", \"S298\", \"S299\", \"S300"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(len(lst), key=len)\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_list):\n    distinct = []\n    for item in tuple_list:\n        if item not in distinct:\n            distinct.append(item)\n    return distinct\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    return re.search(r'^[a-zA-Z]+$', string) is not None\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    return (a + b + c) / 3\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(numbers):\n    return sum(int(digit) for digit in str(numbers))"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(a, b):\n    return (a & b) ^ (a ^ b)\n\n# Test the function"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(tuples):\n    freq = {}\n    for t in tuples:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple(x + y for x, y in zip(t1, t2))"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\nimport math\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of ncr%p.\n\n    Args:\n        n (int): Number of items.\n        r (int): Number of items to choose.\n        p (int): Probability of selecting r items.\n\n    Returns:\n        int: The value of ncr%p.\n    \"\"\"\n    if r > n:\n        raise ValueError(\"r cannot be greater than n\")\n\n    # Calculate ncr\n    ncr = math.factorial(n) / (math.factorial(r) * math.factorial(n-r))\n\n    # Calculate the probability\n    p_ncr = math.pow(p, r) * math.pow(1-p, n-r)\n\n    # Calculate the result\n    result = ncr / p_ncr\n\n    return result\n\n# Test the function"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    \"\"\"\n    Checks if a URL is valid or not using regex.\n\n    Args:\n        url (str): The URL to check.\n\n    Returns:\n        bool: True if the URL is valid, False otherwise.\n    \"\"\"\n    pattern = r\"^https?://([a-zA-Z0-9_\\.-]+)/+[a-zA-Z0-9_\\.-]+$\"\n    return bool(re.match(pattern, url))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    return element in tup"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\"\"\"\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\"\"\"\ndef rearrange_bigger(n):\n    if n == 0:\n        return 0\n    if n % 10 == 0:\n        return n // 10\n    return n // 10 + n % 10\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    # Sort the first array\n    arr1.sort()\n    # Sort the second array\n    arr2.sort()\n    # Initialize result\n    result = []\n    # Iterate over the first array\n    for i in range(len(arr1)):\n        # Iterate over the second array\n        for j in range(i+1, len(arr2)):\n            # If the element from the first array and the element from the second array is common, add it to the result\n            if arr1[i] == arr2[j]:\n                result.append([arr1[i], arr2[j]])\n    # Return the result\n    return result\n\n# Test the function"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(tuples):\n    min_product = float('inf')\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0]*tuples[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    if not lst:\n        return None\n    min_val = lst[0]\n    for element in lst:\n        if element < min_val:\n            min_val = element\n    return min_val\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(s):\n    return re.sub(r'([A-Z])', lambda m: m.group(0).upper() + m.group(1), s).lower()\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return lst[n-1]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq, val):\n    for i in range(len(seq)):\n        if seq[i] == val:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return breakSum(n-1) + breakSum(n-2) + breakSum(n-3)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(list_of_tuples):\n    return list(set(tuple_a + tuple_b for tuple_a, tuple_b in zip(list_of_tuples, list_of_tuples)))\n\n# Test the function\nlist_of_tuples = [('x', 'y'), ('x', 'z'), ('w', 't'), ('x', 'y', 'z'), ('w', 't', 'u')]"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_length = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                max_length = len(lst[i])\n                max_sublist = lst[i]\n    return max_sublist\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += round(num)\n    return total_sum * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tup):\n    return \",\".join(map(str, tup))\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\"\"\"\ndef find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(grid, row, col):\n    if row < 0 or col < 0:\n        return 0\n    if row == row[0] and col == col[0]:\n        return grid[row][col]\n    if grid[row][col] > grid[row][col[0]] + grid[row][col[1]] + grid[row][col[2]] + grid[row][col[3]]:\n        return grid[row][col]\n    return get_maxgold(grid, row, col[1]) + get_maxgold(grid, row[1], col) + get_maxgold(grid, row[1], col[2]) + get_maxgold(grid, row[1], col[3])\n\n# Example usage\ngrid = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(string_tuple):\n    rear = []\n    for s in string_tuple:\n        if s == 's':\n            rear.append(s)\n    return rear\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date_str):\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(pattern, '02-01-2026', date_str)\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    \"\"\"\n    Sort the given array using shell sort.\n\n    Args:\n        arr (list): The array to sort.\n\n    Returns:\n        list: The sorted array.\n    \"\"\"\n    n = len(arr)\n    gap = n // 3\n    while gap > 0:\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        gap //= 3\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1)\n        print(\"Gap:\", gap)\n        for i in range(gap, n):\n            for j in range(i, n):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    gap = int(gap * 3 + 1"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef and_tuples(t1, t2):\n    return (t1[0] * t2[0], t1[1] * t2[1], t1[2] * t2[2], t1[3] * t2[3])"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Args:\n        a (float): The coefficient of x^2.\n        b (float): The coefficient of x.\n        c (float): The coefficient of y.\n\n    Returns:\n        float: The directrix of the parabola.\n    \"\"\"\n    # Calculate the equation of the parabola\n    y = -b / (2 * a)\n    # Calculate the distance from the vertex to the directrix\n    distance = (b**2 - 4*a*c)**0.5\n    # Calculate the directrix\n    directrix = -distance / (2*a)\n    return directrix\n\n# Example usage\na = 5\nb = 3\nc = 2\ndirectrix = parabola_directrix(a, b, c)"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    common_list = []\n    for element in list1:\n        if element in list2:\n            common_list.append(element)\n    return common_list\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\"\"\"\ndef median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median of a trapezium.\n\n    Parameters:\n        a (float): The first side of the trapezium.\n        b (float): The second side of the trapezium.\n        c (float): The third side of the trapezium.\n\n    Returns:\n        float: The median of the trapezium.\n    \"\"\"\n    return (a + b + c) / 2"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    if num > arr[0]:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, entered number is greater than those in the array'\n\n# Test the function"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    \"\"\"\n    Returns True if the string matches one of the following:\n    a followed by one or more b's.\n    \"\"\"\n    return any(text.startswith(b) for b in ['a', 'ab', 'abc', 'abb', 'abb'])\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return int(str(n)[-1])\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(lst):\n    return [num for num in lst if num < 0]\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join(c for c in s if c not in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(pairs):\n    count = 0\n    for pair in pairs:\n        count += len(pair)\n    return count"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(lst):\n    result = 0\n    for i in lst:\n        result += i\n    return result\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\"\"\"\ndef find_adverb_position(sentence):\n    adverb_positions = []\n    for i, char in enumerate(sentence):\n        if char == '!':\n            adverb_positions.append(i)\n    return adverb_positions\n\nsentence = \"clearly!! we can see the sky\""], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\"\"\"\ndef surfacearea_cube(side):\n    \"\"\"\n    Calculate the surface area of a cube.\n\n    Args:\n        side (int): The side length of the cube.\n\n    Returns:\n        int: The surface area of the cube.\n    \"\"\"\n    return 6 * side * side"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    return max(lst)\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuple_list, k):\n    return [t[i:i+k] for i in range(0, len(t), k)]"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        t1 (tuple): First tuple.\n        t2 (tuple): Second tuple.\n\n    Returns:\n        tuple: Result of index wise multiplication of tuple elements.\n    \"\"\"\n    return tuple(x * y for x, y in zip(t1, t2))\n\n# Test the function\nt1 = (1, 3, 4, 5, 2, 9, 1, 10)\nt2 = (6, 7, 3, 9, 1, 1, 7, 3)"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst, lst2):\n    count = 0\n    for element in lst:\n        if element in lst2:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    Args:\n        n (int): The number of perrin numbers.\n\n    Returns:\n        int: The sum of perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1) + cal_sum(n - 2)\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c, d, e, f):\n    if a + b > c and a + c > b and a + d > c and b + d > c and c + d > a and d + e > c and e + f > c and f + d > c:\n        return 'Yes'\n    else:\n        return 'No'\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(string_list, size):\n    return [string for string in string_list if len(string) == size]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount, loss):\n    return loss if loss > amount else None"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Args:\n        text (str): The text to search.\n\n    Returns:\n        str: The matched word.\n    \"\"\"\n    return text.lower().replace('z', '')\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month_num):\n    if month_num in range(1, 13):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_length = 0\n    min_list = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                min_length = len(lst[i])\n                min_list = lst[i]\n    return min_list\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(s):\n    return re.sub('[A-Z]', '', s)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [lst[0]]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    if not lst:\n        return [[]]\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append([lst[i], lst[j]])\n    return result\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = 0\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, target):\n    for key, value in dictionary.items():\n        if value != target:\n            return False\n    return True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, target):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    if arr[right] > target:\n        return right\n    else:\n        return left"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    octal = ''\n    while decimal > 0:\n        octal = str(decimal % 8) + octal\n        decimal //= 8\n    return octal\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr):\n    if len(arr) <= 1:\n        return max(arr[0], arr[0])\n    max_product = max_product_helper(arr, 0, len(arr) - 1)\n    return max(max_product, max_product_helper(arr, 0, len(arr) - 1))\n\ndef max_product_helper(arr, left, right):\n    if left > right:\n        return 0\n    if left == right:\n        return arr[left]\n    mid = (left + right) // 2\n    left_product = max_product_helper(arr, left, mid)\n    right_product = max_product_helper(arr, mid + 1, right)\n    return max(left_product, right_product, arr[left] * arr[mid] * arr[right])\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(stocks, k):\n    if k > len(stocks):\n        return 0\n\n    max_profit = 0\n    for i in range(len(stocks)):\n        for j in range(i + 1, len(stocks)):\n            profit = max(stocks[j] - stocks[i], 0)\n            if profit > max_profit:\n                max_profit = profit\n\n    return max_profit\n\n# Example usage\nstocks = [1, 5, 2, 3, 7, 6, 4, 5]\nk = 3"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            result.append(tuples[i] + tuples[j])\n    return result\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, n_):\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i] * n_\n    return result % n_\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(t1, t2):\n    return set(t1) & set(t2)\n\n# Test the function\nt1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\nt2 = [(5, 4), (3, 4), (6, 5), (9, 11)]"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter, key=lambda x: x[1])\n\n# Test the function\ncounter = {'Math': 81, 'Physics': 83, 'Chemistry': 87}"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower() == string.lower()\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(s):\n    return ''.join(c for c in s if c.isalpha())\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\"\"\"\ndef first_Digit(n):\n    return int(str(n)[0])\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\"\"\"\ndef get_max_occuring_char(string):\n    max_occurrence = 0\n    max_char = \"\"\n    for char in string:\n        if char in char_count:\n            if char_count[char] > max_occurrence:\n                max_occurrence = char_count[char]\n                max_char = char\n    return max_char\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(set, sum, target):\n    for num in set:\n        if target - num in set:\n            return True\n    return False\n\n# Example usage\nset = [3, 34, 4, 12, 5, 2]\ntarget = 6"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef find_sequences(string):\n    pattern = r'[A-Z][a-z]*'\n    return re.findall(pattern, string)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    result = 1\n    for i in range(1, x + 1):\n        result *= i\n    return result\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    return [(t1[0], t1[1]) for t2 in t2 for t1 in t1 if t1[0] != t2[0]]\n\n# Test the function"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, k):\n    max_palindrome = 0\n    for i in range(len(arr) - k + 1):\n        for j in range(i, len(arr) - k - 1):\n            if arr[i] == arr[j] and arr[i] % 2 == 0 and arr[j] % 2 == 1:\n                if arr[i] * arr[j] > max_palindrome:\n                    max_palindrome = arr[i] * arr[j]\n    return max_palindrome\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\"\"\"\nimport math\n\ndef binomial_probability(n, k, p):\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k < 0 or k > n:\n        return 0\n    return (n * binomial_probability(n - 1, k - 1, p)) / p\n\ndef binomial_probability(n, k, p):\n    return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\ndef main():\n    n = 10\n    k = 5\n    p = 1.0/3\n    print(binomial_probability(n, k, p))\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[2])"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    \"\"\"\n    Calculate the area of a pentagon.\n\n    Args:\n        n (int): The number of sides of the pentagon.\n\n    Returns:\n        float: The area of the pentagon.\n    \"\"\"\n    if n < 5:\n        return 0.0\n    return (n * (3 * n - 2)) / 2\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr):\n    frequency = {}\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    max_frequency = max(frequency.values())\n    return [num for num, freq in frequency.items() if freq == max_frequency]\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    Extract all the pairs which are symmetric in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary containing all the pairs which are symmetric in the given tuple list.\n    \"\"\"\n    pairs = {}\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i][0] == tuple_list[j][0] and tuple_list[i][1] == tuple_list[j][1]:\n                pairs[tuple_list[i][0]] = tuple_list[i][1]\n                pairs[tuple_list[j][0]] = tuple_list[j][1]\n    return pairs\n\n# Example usage\ntuple_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, n, r):\n    \"\"\"\n    Calculate the sum of geometric progression series.\n\n    Args:\n        a (float): The first term of the geometric progression.\n        n (int): The number of terms in the series.\n        r (float): The common ratio of the geometric progression.\n\n    Returns:\n        float: The sum of the geometric progression series.\n    \"\"\"\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n\n# Example usage"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Example usage\narr = [1, 2, 3, 5, 8]\ntarget = 6"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n\"\"\"\nCalculate the grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates."], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (tuple): Binary tuple of length 8.\n\n    Returns:\n        str: Integer value.\n    \"\"\"\n    return ''.join(map(str, [int(bit, 2) for bit in binary_tuple]))\n\n# Example usage\nbinary_tuple = (1, 1, 0, 1, 0, 0, 1)"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(s):\n    return re.sub('[aeiouAEIOU]', '', s)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(nums, k):\n    if k > len(nums):\n        return []\n    if k == 1:\n        return nums\n    \n    root = heap_queue_smallest(nums[:k//2], k//2)\n    left = root[0] + 1\n    right = root[1] + 1\n    \n    if left < len(nums) and nums[left] < nums[root[0]]:\n        root = left\n    \n    if right < len(nums) and nums[right] < nums[root[0]]:\n        root = right\n    \n    if root != k:\n        heapify(root, k)\n        root = heap_queue_smallest(root, k)\n        \n    return root\n\ndef heapify(root, k):\n    if root[0] < root[1]:\n        root[0], root[1] = root[1], root[0]\n        heapify(root[1:], k)\n\n# Test the function\nnums = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nk = 3"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculate the surface area of a cone.\n\n    Args:\n        radius (float): The radius of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    return 3.14 * radius**2 * height\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nimport math\n\ndef diameter_circle(radius):\n    diameter = 2 * math.pi * radius\n    return diameter\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    return ''.join(lst)"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    if b == 0:\n        return 0\n    return a % b\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    return a % b\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    return [sum(nums[i:i+2]) for i in range(len(nums)-1)]\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\"\"\"\ndef sum_of_series(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == 0:\n            arr[i], arr[len(arr)-1] = arr[len(arr)-1], arr[i]\n            del arr[i]\n    return arr"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == n:\n        return n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n# Test the function"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, words_to_remove):\n    return [word for word in words if word not in words_to_remove]\n\n# Example usage\nwords = ['red', 'green', 'blue', 'white', 'black', 'orange']\nwords_to_remove = ['orange']"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    return list1.count(list2[0]) == list2.count(list1[0])"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i\n            count += 1\n    return sum / count\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\"\"\"\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0] * n for _ in range(k)]\n    for i in range(n):\n        for j in range(k):\n            if i > j:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n-1][k-1]\n"]]