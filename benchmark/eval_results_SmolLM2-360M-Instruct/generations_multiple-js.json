[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n    let count = 0;\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            if(Math.abs(numbers[i] - numbers[j]) < threshold){\n                count++;\n            }\n        }\n    }\n    return count > 0;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    let result = [];\n    let stack = [];\n    let current = \"\";\n\n    for(let i = 0; i < paren_string.length; i++){\n        paren_string[i] = paren_string[i].trim();\n\n        if(paren_string[i] === \"(\"){\n            stack.push(current);\n            current = paren_string[i];\n        }else if(paren_string[i] === \")\"){\n            if(stack.length > 0){\n                let last_open = stack.pop();\n                if(last_open === \"(\"){\n                    current = last_open;\n                }else{\n                    result.push(current);\n                    current = \"\";\n                }\n            }else{\n                result.push(current);\n            }\n        }\n    }\n\n    if(current !== \"\"){\n        result.push(current);\n    }\n\n    return result;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n    let decimal = Math.abs(number);\n    let integer = Math.floor(decimal);\n    let decimals = Math.abs(decimal - integer);\n    let result = integer + decimals;\n    return result;\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n    let balance = 0;\n    for(let i = 0; i < operations.length; i++){\n        if(operations[i] > 0){\n            balance += operations[i];\n        } else if(operations[i] < 0){\n            balance -= operations[i];\n        }\n    }\n    return balance < 0;\n}"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n    let mean = sum(numbers) / numbers.length;\n    let sum_deviation = 0;\n    for(let i = 0; i < numbers.length; i++){\n        sum_deviation += Math.abs(numbers[i] - mean);\n    }\n    return sum_deviation / numbers.length;\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        for(let j = i + 1; j < numbers.length; j++){\n            result.push(numbers[i] + numbers[j] + delimeter);\n        }\n    }\n    return result;\n}"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let result = [];\n  let stack = [];\n  let current_group = \"\";\n  let current_level = 0;\n\n  for(let i = 0; i < paren_string.length; i++){\n    paren_string[i] = paren_string[i].trim();\n\n    if(paren_string[i] == \"(\"){\n      current_group += paren_string[i];\n      current_level++;\n      stack.push(current_group);\n    }\n    else if(paren_string[i] == \")\"){\n      let current_group = stack.pop();\n      if(current_group == \"\" && current_level > 0){\n        current_level--;\n      }\n      else if(current_level > 0){\n        result.push(current_level);\n      }\n    }\n  }\n\n  return result;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    return strings.filter(function(string){\n        return string.includes(substring);\n    });\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    let max = numbers[0];\n    let max_index = 0;\n\n    for(let i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n            max_index = i;\n        }\n    }\n\n    return [max, max_index];\n}\n\nlet numbers = [1, 2, 3, 2, 3, 4, 2];\nlet result = rolling_max(numbers);"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    let longest_palindrome = \"\";\n    let longest_prefix = \"\";\n    let longest_suffix = \"\";\n    let longest_palindrome_length = 0;\n\n    for(let i = 0; i < string.length; i++){\n        let char = string[i];\n        let palindrome_length = 0;\n\n        for(let j = i; j < string.length; j++){\n            let char_next = string[j];\n            if(char_next === char){\n                palindrome_length++;\n            } else {\n                if(palindrome_length > longest_palindrome_length){\n                    longest_palindrome = char + char_next;\n                    longest_palindrome_length = palindrome_length;\n                    longest_prefix = char_next;\n                    longest_suffix = char;\n                }\n            }\n        }\n\n        if(longest_palindrome_length > longest_palindrome_length){\n            longest_palindrome = longest_prefix + char + longest_suffix;\n            longest_palindrome_length = palindrome_length;\n        }\n\n        if(longest_palindrome_length > longest_suffix.length){\n            longest_suffix = char + char_next;\n            longest_suffix_length = longest_suffix.length;\n        }\n    }\n\n    return longest_palindrome;\n}"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    let result = \"\";\n    for(let i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n    let longest = strings[0];\n    for(let i = 1; i < strings.length; i++){\n        if(strings[i].length > longest.length){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n    while(b > 0){\n        let temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n    let arr = [];\n    let longest = string.length;\n    let shortest = 0;\n\n    for(let i = 0; i < longest; i++){\n        for(let j = 0; j < shortest; j++){\n            if(string[i] === string[j]){\n                arr.push(string[i]);\n                arr.push(string[j]);\n                break;\n            }\n        }\n    }\n\n    return arr;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    let result = '';\n    for(let i = 0; i < n; i++){\n        result += String(i) + ' ';\n    }\n    return result.trim();\n}"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    let count = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === string[i].toUpperCase()){\n            count++;\n        }else{\n            count--;\n        }\n    }\n    return count;\n}"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    let beats = [];\n    let note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n\n    for(let i = 0; i < music_string.length; i++){\n        let note = music_string[i];\n        let count = 0;\n        for(let j = 0; j < note.length; j++){\n            if(note[j] === 'o'){\n                count++;\n            }\n        }\n        beats.push(count);\n    }\n    return beats;\n}\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n    let count = 0;\n    let start = 0;\n    let end = 0;\n    while(start < string.length && end < string.length){\n        if(string[start] === substring[end]){\n            count++;\n            start++;\n            end++;\n        }\n        else if(end > string.length){\n            end = string.length - 1;\n        }\n        else{\n            start = end + 1;\n            end = string[end].length;\n        }\n    }\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n    let sorted_numbers = [];\n    for(let i = 0; i < numbers.length; i++){\n        let num = parseInt(numbers[i]);\n        if(num < 0){\n            num = 0;\n        }\n        if(num > 9){\n            num = 9;\n        }\n        sorted_numbers.push(num);\n    }\n    return sorted_numbers.sort((a,b) => a - b);\n}"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n    let min_diff = Infinity;\n    let min_element = null;\n    let max_diff = -Infinity;\n    let max_element = null;\n\n    for(let i = 0; i < numbers.length; i++){\n        let diff = Math.abs(numbers[i] - numbers[i-1]);\n        if(diff < min_diff){\n            min_diff = diff;\n            min_element = numbers[i];\n        }\n        if(diff > max_diff){\n            max_diff = diff;\n            max_element = numbers[i];\n        }\n    }\n\n    return [min_element, max_element];\n}\n"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let unit = max - min;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        result[i] = (numbers[i] - min) / unit;\n    }\n    return result;\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    return values.filter(function(value){\n        return typeof value === 'number';\n    });\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n    let length = 0;\n    for(let i = 0; i < string.length; i++){\n        length += string[i].length;\n    }\n    return length;\n}"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    let max_divisor = 1;\n    for(let i = 2; i <= n; i++){\n        if(n % i === 0){\n            max_divisor = i;\n            break;\n        }\n    }\n    return max_divisor;\n}"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    let factors = [];\n    let i = 2;\n    while(i * i <= n){\n        if(n % i === 0){\n            factors.push(i);\n            while(n % i === 0){\n                n = n / i;\n            }\n        }\n        i++;\n    }\n    if(n > 1){\n        factors.push(n);\n    }\n    return factors;\n}"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n        let current = numbers[i];\n        for(let j = i + 1; j < numbers.length; j++){\n            if(current === numbers[j]){\n                result.push(numbers[j]);\n            }\n        }\n        result.push(current);\n    }\n    return result;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    let result = '';\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] >= 'a' && string[i] <= 'z') {\n            result += String.fromCharCode(String.fromCharCode(String.fromCharCode(string[i])).toLowerCase());\n        } else {\n            result += String.fromCharCode(String.fromCharCode(string[i])).toUpperCase();\n        }\n    }\n    return result;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\" \");\n}"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n        return string.startsWith(prefix);\n    });\n}\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    let positive = [];\n    for(let i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            positive.push(l[i]);\n        }\n    }\n    return positive;\n}"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n <= 1){\n        return false;\n    }\n    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return false;\n        }\n    }\n    return true;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    let l_copy = l.slice();\n    let l_copy_copy = l_copy.slice();\n    let l_copy_copy_copy = l_copy_copy.slice();\n\n    let l_copy_copy_copy_copy = l_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy.slice();\n\n    let l_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = l_copy_copy_copy_copy_copy"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    let unique = [];\n    for(let i = 0; i < l.length; i++){\n        let element = l[i];\n        if(!unique.includes(element)){\n            unique.push(element);\n        }\n    }\n    return unique;\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    let max = l[0];\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n    for(let i = 1; i <= n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 7 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1;\n        }\n        if(i % 7 === 0 && i % 11 === 0){\n            count += 1;\n        }\n        if(i % 3 === 0 && i % 13 === 0){\n            count += 1"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n    let l_copy = l.slice();\n    let l_copy_sorted = l_copy.sort((a, b) => a - b);\n    let l_copy_odd = l_copy.slice();\n    let l_copy_odd_sorted = l_copy_odd.sort((a, b) => a - b);\n\n    return [l_copy_odd_sorted, l_copy_odd, l_copy_odd_sorted];\n}\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    let prime_list = [2, 3, 5, 7, 13, 29, 41, 53, 83, 109, 127, 163, 191, 221, 247, 263, 277, 293, 307, 321, 331, 347, 373, 383, 409, 421, 433, 443, 463, 479, 493, 509, 523, 547, 557, 567, 577, 587, 593, 601, 613, 621, 643, 647, 653, 659, 661, 673, 677, 683, 693, 701, 709, 719, 727, 733, 739, 743, 757, 767, 773, 787, 793, 809, 819, 823, 827, 829, 833, 843, 857, 859, 867, 877, 883, 893, 907, 913, 937, 941, 947, 957, 967, 971, 973, 977, 983, 997, 1009, 1019, 1029, 1033, 1041, 1047, 1053, 1061, 1067, 1071, 1073, 1077, 1083, 1091, 1103, 1107, 1113, 1123, 1137, 1143, 1153, 1167, 1173, 1183, 1193, 1203, 1213, 1223, 1233, 1243, 1253, 1263, 1273, 1283, 1293, 1303, 1313, 1323, 1333, 1343, 1353, 1363, 1373, 1383, 1393, 1403, 1413, 1423, 1433, 1443, 1453, 1463, 1473, 1483, 1493, 1503, 1513, 1523, 1533, 1543, 1553, 1563, 1573, 1583, 1593, 1603, 1613, 1623, 1633, 1643, 1653, 1663, 1673, 1683, 1693, 1703, 1713, 1723, 1733, 1743, 1753, 1763, 1"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n    let sum = 0;\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            for(let k = j + 1; k < l.length; k++){\n                if(l[i] + l[j] + l[k] == 0){\n                    sum += l[i] + l[j] + l[k];\n                }\n            }\n        }\n    }\n    return sum > 0;\n}"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    let count = 0;\n    let cars = [...Array(n).keys()];\n    let left_cars = cars.slice(0, n);\n    let right_cars = cars.slice(n);\n    let left_cars_left = left_cars.map(car => {\n        let left_car = car.slice(0, car.length - 1);\n        let right_car = car.slice(car.length - 1, car.length);\n        return left_car.concat(right_car);\n    });\n    let right_cars_right = right_cars.map(car => {\n        let right_car = car.slice(0, car.length - 1);\n        let right_car_left = right_car.slice(0, right_car.length - 1);\n        return right_car_left.concat(right_car);\n    });\n\n    for(let i = 0; i < left_cars_left.length; i++){\n        for(let j = 0; j < right_cars_right.length; j++){\n            if(left_cars_left[i] == right_cars_right[j]){\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let result = [];\n    for(let i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return result;\n}"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    let pairs = [];\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            if(l[i] + l[j] == 0){\n                pairs.push([l[i], l[j]]);\n            }\n        }\n    }\n    return pairs.length > 0;\n}\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    let result = '';\n    let num = x;\n    let power = 0;\n    while(num > 0){\n        result += num % base;\n        num = num / base;\n        power++;\n    }\n    return result;\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n    return (a * h) / 2;\n}"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    let fib4 = [];\n    for(let i = 0; i < n; i++){\n        let fib4_n = 0;\n        let fib4_n_prev = 0;\n        let fib4_n_curr = 1;\n        let fib4_n_next = 1;\n        for(let j = 0; j < n - 1; j++){\n            fib4_n = fib4_n_prev + fib4_n_curr;\n            fib4_n_prev = fib4_n_curr;\n            fib4_n_curr = fib4_n;\n            fib4_n_next = fib4_n_curr + fib4_n_prev;\n        }\n        fib4.push(fib4_n);\n    }\n    return fib4[n];\n}"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    let sorted = l.sort((a, b) => a - b);\n    let length = sorted.length;\n    let mid = length / 2;\n    let median = sorted[mid];\n    if(length % 2 == 0){\n        return (median + median / 2) / 2;\n    }\n    else{\n        return median;\n    }\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    let reversed = \"\";\n    for(let i = text.length - 1; i >= 0; i--){\n        reversed += text[i];\n    }\n    return text === reversed;\n}"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    let result = 1;\n    let temp = n;\n    while(temp > 0){\n        if(temp % p == 0){\n            result = result * p % p;\n        }\n        temp = temp % p;\n    }\n    return result;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    let vowels = \"aeiouAEIOU\";\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(vowels.indexOf(text[i]) === -1){\n            result += text[i];\n        }\n    }\n    return result;\n}"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n    return l.every(num => num < t);\n}"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n    return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    let char_set = new Set();\n    for(let char of s0){\n        char_set.add(char);\n    }\n    for(let char of s1){\n        char_set.add(char);\n    }\n    return char_set.size === char_set.size;\n}"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n    let fibArray = [0, 1];\n    for(let i = 2; i < n; i++){\n        let current = fibArray[i - 1] + fibArray[i - 2];\n        fibArray.push(current);\n    }\n    return fibArray[n - 1];\n}"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    let result = [];\n\n    for(let bracket of brackets){\n        if(bracket === \"<\"){\n            stack.push(bracket);\n        }\n        else if(bracket === \">\"){\n            if(stack.length > 0){\n                let last_bracket = stack.pop();\n                result.push(last_bracket);\n            }\n        }\n        else{\n            if(stack.length > 0){\n                let last_bracket = stack.pop();\n                result.push(last_bracket + bracket);\n            }\n        }\n    }\n\n    return result;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    let arr = l.slice();\n    let max = arr[0];\n    let min = arr[0];\n    let count = 1;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n            count = 1;\n        }\n        else if(arr[i] < min){\n            count++;\n            min = arr[i];\n        }\n        else{\n            count++;\n        }\n    }\n    return count === 1;\n}"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    let result = [];\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let common = [];\n\n    for(let key in set1){\n        if(set2.has(key)){\n            common.push(key);\n        }\n    }\n\n    for(let key in set2){\n        if(set1.has(key)){\n            common.push(key);\n        }\n    }\n\n    return common;\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n    let max_factor = 1;\n    let current_factor = 2;\n    while(current_factor <= n){\n        if(n % current_factor === 0){\n            max_factor = current_factor;\n            break;\n        }\n        current_factor++;\n    }\n    return max_factor;\n}"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n    let stack = [];\n    let result = [];\n\n    for(let bracket of brackets){\n        if(bracket === \"(\"){\n            stack.push(bracket);\n        }\n        else if(bracket === \")\"){\n            if(stack.length === 0){\n                result.push(\"(\");\n            }\n            else{\n                let last_bracket = stack.pop();\n                result.push(last_bracket);\n                result.push(last_bracket + \"(\");\n            }\n        }\n    }\n\n    return result.join(\" \")\n}\n"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n    let result = [];\n    for(let i = 0; i < xs.length; i++){\n        let derivative = 1;\n        for(let j = 0; j < xs[i].length; j++){\n            derivative *= xs[i][j];\n        }\n        result.push(derivative);\n    }\n    return result;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n <= 1) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowels.includes(s[i])){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n    let result = '';\n    let temp = '';\n    let digit = '';\n    let digit_count = 0;\n\n    // Convert the integer to string and reverse the string\n    for(let i = 0; i < x.toString().length; i++){\n        digit = x.toString().charAt(i);\n        digit_count++;\n        if(digit_count === shift){\n            result += digit;\n            digit_count = 0;\n        }\n    }\n\n    // Reverse the string and convert it back to integer\n    for(let i = 0; i < result.length; i++){\n        temp += result.charAt(result.length - i - 1);\n    }\n\n    // Convert the string back to integer\n    for(let i = 0; i < temp.length; i++){\n        result += parseInt(temp.charAt(i));\n    }\n\n    return result;\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    let result = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] >= 97 && s[i] <= 122){\n            result += (s[i] - 97 + 1);\n        }\n    }\n    return result;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n    let fruit_count = 0;\n    let mango_count = 0;\n    let total_count = 0;\n    let fruits = s.split(' ');\n    for(let i = 0; i < fruits.length; i++){\n        let fruit = fruits[i];\n        if(fruit === 'apples'){\n            total_count += parseInt(fruits[i].split(' ')[1]);\n            fruit_count += parseInt(fruits[i].split(' ')[0]);\n        }\n        else if(fruit === 'oranges'){\n            total_count += parseInt(fruits[i].split(' ')[1]);\n            fruit_count += parseInt(fruits[i].split(' ')[0]);\n        }\n        else if(fruit === 'mango'){\n            mango_count += parseInt(fruits[i].split(' ')[1]);\n        }\n    }\n    if(total_count === 0){\n        mango_count = 0;\n    }\n    return fruit_count + mango_count;\n}"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n    let result = [];\n    let smallest_value = 0;\n    let smallest_index = 0;\n    let smallest_value_index = 0;\n    let smallest_value_index_index = 0;\n\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            smallest_value = arr[i];\n            smallest_value_index = i;\n            smallest_value_index_index = i;\n        }\n    }\n\n    for(let i = smallest_value_index; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            smallest_value = arr[i];\n            smallest_value_index = i;\n            smallest_value_index_index = i;\n        }\n    }\n\n    for(let i = smallest_value_index; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest_value){\n            smallest_value = arr[i];\n            smallest_value_index = i;\n            smallest_value_index_index = i;\n        }\n    }\n\n    for(let i = smallest_value_index; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] > smallest_value){\n            smallest_value = arr[i];\n            smallest_value_index = i;\n            smallest_value_index_index = i;\n        }\n    }\n\n    for(let i = smallest_value_index; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallest_value){\n            smallest_value = arr[i];\n            smallest_value_index = i;\n            smallest_value_index_index = i;\n        }\n    }\n\n    result.push(smallest_value);\n    result.push(smallest_value_index);\n    result.push(smallest_value_index_index);\n\n    return result;\n}\n\nlet arr = [4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0, 4, 2, 3, 0"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    let frequency = {};\n    let max = -Infinity;\n    let result = -1;\n\n    for(let i = 0; i < lst.length; i++){\n        frequency[lst[i]] = frequency[lst[i]] || 0;\n        frequency[lst[i]]++;\n\n        if(frequency[lst[i]] > max){\n            max = frequency[lst[i]];\n            result = lst[i];\n        }\n    }\n\n    return result;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    let odd_list = [];\n    let even_list = [];\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            even_list.push(lst[i]);\n        }else{\n            odd_list.push(lst[i]);\n        }\n    }\n\n    odd_list.sort((a, b) => a - b);\n    even_list.sort((a, b) => b - a);\n\n    return [odd_list, even_list];\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    if(a + b <= c || a + c <= b || b + c <= a){\n        return -1;\n    }\n    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return area.toFixed(2);\n}"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let balanced = true;\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n        if(sum > w){\n            balanced = false;\n            break;\n        }\n    }\n    if(balanced){\n        return true;\n    }\n    return false;\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n    let min_change = 0;\n    let min_change_count = 0;\n    let min_change_count_count = 0;\n\n    for(let i = 0; i < arr.length; i++){\n        for(let j = i + 1; j < arr.length; j++){\n            let diff = arr[i] - arr[j];\n            if(diff > 0){\n                min_change += diff;\n                min_change_count += 1;\n                min_change_count_count += 1;\n            }\n        }\n    }\n\n    if(min_change_count_count == 0){\n        return min_change;\n    }\n\n    let min_change_count_count_count = 0;\n    for(let i = 0; i < min_change_count; i++){\n        let diff = min_change - min_change[i];\n        if(diff > 0){\n            min_change_count_count += 1;\n            min_change_count_count_count += 1;\n        }\n    }\n\n    if(min_change_count_count == 0){\n        return min_change;\n    }\n\n    return min_change + min_change_count;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n    let total_chars = 0;\n    let total_count = 0;\n    for(let i = 0; i < lst1.length; i++){\n        total_chars += lst1[i].length;\n        total_count += 1;\n    }\n    for(let i = 0; i < lst2.length; i++){\n        total_chars += lst2[i].length;\n        total_count += 1;\n    }\n    if(total_count === total_chars){\n        return lst1;\n    }\n    else{\n        return lst2;\n    }\n}\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];\n    let result = true;\n    for (let i = 2; i < primes.length; i++) {\n        if (a % primes[i] == 0) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    return x**n == x;\n}"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    let cube = Math.pow(a, 3);\n    return cube === Math.pow(a, 3) * Math.pow(a, 3) * Math.pow(a, 3);\n}"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    let result = 0;\n    let hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F];\n    let hex_digits_str = String(num);\n    for(let i = 0; i < hex_digits_str.length; i++){\n        let digit = hex_digits_str[i];\n        let digit_value = parseInt(digit, 16);\n        if(digit_value > 0){\n            result += digit_value;\n        }\n    }\n    return result;\n}\n"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  let binary = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let n = 0;\n  let m = 0;\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';\n  let l_binary = '';\n  let n_binary = '';\n  let m_binary = '';\n  let k_binary = '';"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    let count = 0;\n    let arr = s.split('');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === arr[i+1] && arr[i]!== arr[i+2]){\n            count++;\n        }\n        else if(count > 3){\n            result.push(arr[i]);\n            count = 1;\n        }\n    }\n    if(count > 3){\n        return true;\n    }\n    else{\n        return false;\n    }\n}"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let letter_grades = [];\n    for(let i = 0; i < grades.length; i++){\n        let grade = grades[i];\n        if(grade >= 4.0){\n            letter_grades.push(\"A+\");\n        } else if(grade >= 3.7){\n            letter_grades.push(\"A\");\n        } else if(grade >= 3.3){\n            letter_grades.push(\"A-\");\n        } else if(grade >= 3.0){\n            letter_grades.push(\"B+\");\n        } else if(grade >= 2.7){\n            letter_grades.push(\"B\");\n        } else if(grade >= 2.3){\n            letter_grades.push(\"B-\");\n        } else if(grade >= 2.0){\n            letter_grades.push(\"C+\");\n        } else if(grade >= 1.7){\n            letter_grades.push(\"C\");\n        } else if(grade >= 1.3){\n            letter_grades.push(\"C-\");\n        } else if(grade >= 1.0){\n            letter_grades.push(\"D+\");\n        } else if(grade >= 0.7){\n            letter_grades.push(\"D\");\n        } else if(grade >= 0.0){\n            letter_grades.push(\"E\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n}"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    let length = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === ' '){\n            length++;\n        }else if(isPrime(string[i])){\n            length++;\n        }\n    }\n    return length;\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n    let sum = 0;\n    let binary = N.toString(2);\n    for(let i = 0; i < binary.length; i++){\n        sum += parseInt(binary[i], 2);\n    }\n    return binary.length == 1? \"1\" : binary.length == 2? \"10\" : \"110\";\n}"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    let even = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n            even.push(lst[i]);\n        }\n    }\n    return even;\n}"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    let words = s.split(' ');\n    let result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n\n    while(i < words.length){\n        let word = words[i];\n        let index = words.indexOf(word);\n\n        if(index === -1){\n            result.push(word);\n            words.splice(index, 1);\n            i++;\n        }else{\n            j = index;\n            k = index + 1;\n            while(k < words.length && words[k] === word){\n                k++;\n            }\n            result.push(word);\n            words.splice(k, 1);\n            j--;\n            k++;\n        }\n    }\n\n    return result.join(' ');\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n    let row = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i === x){\n            row.push(lst[i]);\n        }\n    }\n    return row;\n}\n"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    let sorted_array = [];\n    let sum = 0;\n    for(let i = 0; i < array.length; i++){\n        sum += array[i];\n        if(sum % 2 === 1){\n            sorted_array.push(array[i]);\n        }\n    }\n    return sorted_array;\n}"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    let result = \"\";\n    for(let i = 0; i < s.length; i++){\n        let char = s[i];\n        let index = char.charCodeAt(0);\n        let newIndex = (index + 2) % 26;\n        let newChar = String.fromCharCode(newIndex + 97);\n        result += newChar;\n    }\n    return result;\n}\n"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n    let min = lst[0];\n    let min_index = 0;\n    let max = lst[0];\n    let max_index = 0;\n\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n            min_index = i;\n        }\n        if(lst[i] > max){\n            max = lst[i];\n            max_index = i;\n        }\n    }\n\n    if(min_index === max_index){\n        return min;\n    }\n\n    return next_smallest(lst.slice(0, min_index)) + next_smallest(lst.slice(min_index + 1, max_index));\n}\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    let count = 0;\n    let sentence = S.split('.').map(word => word.startsWith('I')? word : word.startsWith('?')? word : word.startsWith('!')? word : word);\n    for(let i = 0; i < sentence.length; i++){\n        if(sentence[i] === 'I'){\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n        return (x + y == z) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n    } else {\n        return false;\n    }\n}"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    let result = \"\";\n    for(let i = 0; i < message.length; i++){\n        if(message[i] >= 'a' && message[i] <= 'z'){\n            let char = message[i];\n            let index = Math.floor(char.length / 2);\n            let nextChar = message[index + 1];\n            let nextIndex = Math.floor(nextChar.length / 2);\n            let nextCharIndex = Math.floor(nextChar.length / 2);\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let nextIndex = nextIndex + 1;\n            let nextCharIndex = nextIndex + 1;\n            let nextChar = nextChar[nextIndex];\n            let"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n    let maxPrime = 0;\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let n = 0;\n    let prime = 0;\n    let digit = 0;\n\n    while(i < lst.length){\n        if(isPrime(lst[i])){\n            digit = digit + 1;\n            if(digit > maxPrime){\n                maxPrime = digit;\n            }\n            prime = prime + 1;\n        }\n        i++;\n    }\n\n    while(j < digit){\n        if(isPrime(j)){\n            digit = digit + 1;\n            if(digit > maxPrime){\n                maxPrime = digit;\n            }\n            prime = prime + 1;\n        }\n        j++;\n    }\n\n    while(k < digit){\n        if(isPrime(k)){\n            digit = digit + 1;\n            if(digit > maxPrime){\n                maxPrime = digit;\n            }\n            prime = prime + 1;\n        }\n        k++;\n    }\n\n    while(l < digit){\n        if(isPrime(l)){\n            digit = digit + 1;\n            if(digit > maxPrime){\n                maxPrime = digit;\n            }\n            prime = prime + 1;\n        }\n        l++;\n    }\n\n    sum = prime * maxPrime;\n\n    return sum;\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    if(dict == null || dict.length == 0){\n        return false;\n    }\n    else{\n        for(let key in dict){\n            if(!isNaN(parseInt(key)) && \n                !isNaN(parseInt(dict[key])) && \n                (typeof(parseInt(dict[key])) == 'string' || typeof(parseInt(dict[key])) == 'number')){\n                if(!isNaN(parseInt(dict[key])) && \n                    (parseInt(dict[key]) < 0 || parseInt(dict[keymplement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    let prime_numbers = [];\n    for(let i = 2; i <= n; i++){\n        let is_prime = true;\n        for(let j = 2; j <= Math.sqrt(i); j++){\n            if(i % j === 0){\n                is_prime = false;\n                break;\n            }\n        }\n        if(is_prime){\n            prime_numbers.push(i);\n        }\n    }\n    return prime_numbers;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    let result = 0;\n    for(let i = 0; i < a.length; i++){\n        result += a[i] * b[i];\n    }\n    return result;\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'A' || s[i] === 'a' || s[i] === 'A' || s[i] === 'A' || s[i] === 'A' || s[i] === 'A'){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n    let num = parseFloat(value);\n    let closest = Math.abs(Math.floor(num));\n    let closest_two = Math.abs(Math.floor(num / 2));\n    let closest_three = Math.abs(Math.floor(num / 3));\n\n    if(Math.abs(num - closest) < Math.abs(num - closest_two)){\n        return closest;\n    }else if(Math.abs(num - closest_two) < Math.abs(num - closest_three)){\n        return closest_two;\n    }else{\n        return closest_three;\n    }\n}\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    let piles = [];\n    for(let i = 0; i < n; i++){\n        let pile = [];\n        for(let j = 0; j < n; j++){\n            if(j % 2 === 0){\n                pile.push(n - j);\n            }else{\n                pile.push(n - j - 1);\n            }\n        }\n        piles.push(pile);\n    }\n    return piles;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n    let words = s.split(\",\", \" \");\n    return words;\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n    let max_even = 0;\n    let min_even = 0;\n    for(let i = x; i <= y; i++){\n        if(i % 2 === 0){\n            max_even = Math.max(max_even, i);\n        }\n        else{\n            min_even = Math.min(min_even, i);\n        }\n    }\n    return max_even;\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    let average = (n + m) / 2;\n    let binary = \"\";\n    let decimal = Math.floor(average);\n    let remainder = average - decimal;\n    let remainder_binary = remainder.toString(2);\n    let binary_binary = remainder_binary.split(\"1\").join(\"0\");\n    if(n > m){\n        return -1;\n    }\n    return binary_binary;\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    let result = [];\n    let count = {};\n    for(let i = 0; i < x.length; i++){\n        let digit = x[i];\n        if(count[digit] > 0){\n            result.push(digit);\n            count[digit]--;\n        }else{\n            count[digit] = 1;\n        }\n    }\n    return result;\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            result.push(i);\n        }else{\n            result.push(n + i);\n        }\n    }\n    return result;\n}"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    let even_odd_palindromes = [];\n    for(let i = 1; i <= n; i++){\n        let even_odd_palindrome = [];\n        for(let j = 0; j < i; j++){\n            if(i % 2 === 0){\n                even_odd_palindrome.push(i);\n            }else{\n                even_odd_palindrome.push(i);\n            }\n        }\n        even_odd_palindromes.push(even_odd_palindrome);\n    }\n    return even_odd_palindromes;\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n        for(let j = 0; j < arr[i].length; j++){\n            sum += arr[i][j];\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n    let len = arr.length;\n    let result = false;\n    for(let i = 0; i < len - 1; i++){\n        if(arr[i] > arr[i + 1]){\n            let temp = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = temp;\n            result = true;\n        }\n    }\n    return result;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n    let even_numbers = [];\n    let odd_numbers = [];\n\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even_numbers.push(lst1[i]);\n        }else{\n            odd_numbers.push(lst1[i]);\n        }\n    }\n\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even_numbers.push(lst2[i]);\n        }else{\n            odd_numbers.push(lst2[i]);\n        }\n    }\n\n    for(let i = 0; i < even_numbers.length; i++){\n        if(odd_numbers.indexOf(even_numbers[i]) === -1){\n            return \"YES\";\n        }\n    }\n\n    return \"NO\";\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  let result = {};\n  for(let i = 0; i < test.length; i++){\n    let letter = test[i];\n    let count = result[letter];\n    if(count === undefined){\n      count = 1;\n    }\n    result[letter] = count;\n  }\n  return result;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    let result = [];\n    let char_count = {};\n\n    for(let i = 0; i < s.length; i++){\n        char_count[s[i]] = (char_count[s[i]] || 0) + 1;\n    }\n\n    for(let key in char_count){\n        if(char_count[key] > 1){\n            result.push(key);\n        }\n    }\n\n    for(let i = 0; i < c.length; i++){\n        let char = c[i];\n        if(char_count[char] > 0){\n            result.push(char);\n            char_count[char] -= 1;\n        }\n    }\n\n    return result;\n}\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = parseInt(lst[i]);\n        if(num % 2 === 1){\n            count++;\n        }\n    }\n    return [count, count + count + count + count + count + count + count + count + count];\n}"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n    let minSum = Infinity;\n    let maxSum = 0;\n    let currentSum = 0;\n    let currentIndex = 0;\n\n    for(let i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        if(currentSum < 0){\n            currentSum = 0;\n        }\n        if(currentSum > maxSum){\n            maxSum = currentSum;\n            currentIndex = i;\n        }\n    }\n\n    return currentIndex + 1;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n    let max_fill = 0;\n    let max_bucket = 0;\n    let max_well = 0;\n    let bucket = 0;\n\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n                bucket++;\n            }\n            if(bucket > max_bucket){\n                max_bucket = bucket;\n                max_well = i;\n                max_bucket = bucket;\n            }\n        }\n        bucket = 0;\n    }\n\n    if(bucket > max_bucket){\n        max_bucket = bucket;\n        max_well = max_well - max_bucket;\n    }\n\n    max_fill = max_well - max_bucket;\n\n    return max_fill;\n}\n\nlet grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\nlet capacity = 1;"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n    let result = [];\n    let result_arr = [];\n    let result_arr_arr = [];\n\n    for(let i = 0; i < arr.length; i++){\n        let count = 0;\n        let count_arr = 0;\n\n        for(let j = 0; j < arr.length; j++){\n            if(arr[i] % 2 === 0){\n                count++;\n                count_arr++;\n            }else{\n                count_arr++;\n                count++;\n            }\n        }\n\n        if(count_arr > count){\n            result_arr = arr;\n            result_arr_arr = count_arr;\n        }else if(count_arr < count){\n            result_arr = count_arr;\n            result_arr_arr = count_arr;\n        }else{\n            result_arr = arr;\n            result_arr_arr = count;\n        }\n    }\n\n    result.sort((a, b) => {\n        return a - b;\n    });\n\n    result_arr.sort((a, b) => {\n        return a - b;\n    });\n\n    result_arr_arr.sort((a, b) => {\n        return a - b;\n    });\n\n    return [result, result_arr, result_arr_arr];\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n    let words = [];\n    let word = \"\";\n    let count = 0;\n    let count_word = 0;\n\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === \" \"){\n            if(count_word == 0){\n                words.push(word);\n                word = \"\";\n                count = 1;\n            }else{\n                words.push(word);\n                word = \"\";\n                count = 0;\n            }\n        }else{\n            word += s[i];\n            count++;\n        }\n    }\n\n    if(word === \"\"){\n        words.push(word);\n    }\n\n    if(count_word == 0){\n        words.push(word);\n        word = \"\";\n        count = 1;\n    }\n\n    if(count == n){\n        words.push(word);\n    }\n\n    return words;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n\n    for(let i = 0; i < word.length; i++){\n        let vowel = vowels[word[i].toLowerCase()];\n        if(vowel === word[i]){\n            closest_vowel = vowel;\n            closest_vowel_index = i;\n        }\n    }\n\n    if(closest_vowel_index === -1){\n        closest_vowel = vowels[word[word.length - 1].toLowerCase()];\n        closest_vowel_index = word.length - 1;\n    }\n\n    if(closest_vowel_index === -1){\n        closest_vowel = vowels[word[0].toLowerCase()];\n        closest_vowel_index = 0;\n    }\n\n    return closest_vowel;\n}\n"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n    let result = [];\n    let stack = [];\n    let current = '';\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == '('){\n            current += '(';\n            stack.push(current);\n        }else if(lst[i] == ')'){\n            if(stack.length > 0){\n                current = stack.pop();\n                if(current == '('){\n                    current += ')';\n                }else{\n                    result.push('No');\n                    break;\n                }\n            }else{\n                result.push('No');\n                break;\n            }\n        }\n    }\n\n    return result.join('') == 'No';\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let maxK = k;\n    let maxArr = [];\n    let maxKArr = [];\n\n    for(let i = 0; i < k; i++){\n        maxK = Math.max(maxK, arr[i]);\n        maxKArr[i] = maxK;\n    }\n\n    for(let i = k; i < arr.length; i++){\n        maxK = Math.max(maxK, arr[i]);\n        maxKArr[i] = maxK;\n    }\n\n    for(let i = 0; i < k; i++){\n        maxKArr[i] = maxKArr[i] - maxKArr[i - k];\n    }\n\n    for(let i = 0; i < k; i++){\n        maxKArr[i] = Math.max(maxKArr[i], maxKArr[i - k]);\n    }\n\n    for(let i = 0; i < k; i++){\n        maxKArr[i] = maxKArr[i] / maxKArr[i - k];\n    }\n\n    for(let i = 0; i < k; i++){\n        maxKArr[i] = Math.max(maxKArr[i], maxKArr[i - k]);\n    }\n\n    for(let i = 0; i < k; i++){\n        maxKArr[i] = maxKArr[i] / maxKArr[i - k];\n    }\n\n    return maxKArr;\n}\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    let sum = 0;\n    let oddSum = 0;\n    let evenSum = 0;\n\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            oddSum += lst[i];\n        } else {\n            evenSum += lst[i];\n        }\n    }\n\n    return sum + oddSum + evenSum;\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    let odd_collatz = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 === 0){\n            odd_collatz.push(i);\n        }else{\n            odd_collatz.push(3 * i + 1);\n        }\n    }\n    odd_collatz.sort((a, b) => a - b);\n    return odd_collatz;\n}"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    if(date == \"\"){\n        return false;\n    }\n    var month = date.split(\"-\")[1];\n    var day = date.split(\"-\")[2];\n    var year = date.split(\"-\")[0];\n    var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var months_dict = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    };\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month == 1 && day < 1 || month == 12 && day > 31){\n        return false;\n    }\n    if(month == 2 && day < 1 || month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 && day < 1 || month == 4 && day > 30){\n        return false;\n    }\n    if(month == 6 && day < 1 || month == 6 && day > 30){\n        return false;\n    }\n    if(month == 7 && day < 1 || month == 7 && day > 31){\n        return false;\n    }\n    if(month == 9 && day < 1 || month == 9 && day > 30){\n        return false;\n    }\n    if(month == 10 && day < 1 || month == 10 && day > 31){\n        return false;\n    }\n    if(month == 11 && day < 1 || month == 11 && day > 30){\n        return false;\n    }\n    if(month == 2 && day < 1 || month == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 && day < 1 || month == 4 && day > 30){\n        return false;\n    }\n    if(month == 6 && day < 1 || month == 6 && day > 30){\n        return false;\n    }\n    if(month == 7 && day < 1 || month == 7 && day > 31){\n        return false;\n    }\n    if(month == 9 && day < 1 || month == 9 && day > 31){\n        return false;\n    }\n    if(month == 10 && day < 1 || month == 10 && day > 30){\n        return false;\n    }\n    if(month == 11 && day < 1 || month == 11 && day > 31){\n        return false;\n    }\n    if(month =="], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    let words = txt.split(/\\s+/);\n    let count = 0;\n    for(let i = 0; i < words.length; i++){\n        if(words[i].length > 1 && words[i][0] === ',' && words[i][1] === ',' && words[i][2] === ',' && words[i][3] === ',' && words[i][4] === ',' && words[i][5] === ',' && words[i][6] === ',' && words[i][7] === ',' && words[i][8] === ',' && words[i][9] === ',' && words[i][10] === ',' && words[i][11] === ',' && words[i][12] === ',' && words[i][13] === ',' && words[i][14] === ',' && words[i][15] === ',' && words[i][16] === ',' && words[i][17] === ',' && words[i][18] === ',' && words[i][19] === ',' && words[i][20] === ',' && words[i][21] === ',' && words[i][22] === ',' && words[i][23] === ',' && words[i][24] === ',' && words[i][25] === ',' && words[i][26] === ',' && words[i][27] === ',' && words[i][28] === ',' && words[i][29] === ',' && words[i][30] === ',' && words[i][31] === ',' && words[i][32] === ',' && words[i][33] === ',' && words[i][34] === ',' && words[i][35] === ',' && words[i][36] === ',' && words[i][37] === ',' && words[i][38] === ',' && words[i][39] === ',' && words[i][40] === ',' && words[i][41] === ',' && words[i][42] === ',' && words[i][43] === ',' && words[i][44] === ',' && words[i][45] === ',' && words[i][46] === ',' && words[i][47] === ',' && words[i][48] === ',' && words[i][49] === ',' && words[i][50] === ',' && words[i][51] === ',' && words[i][52] === ',' && words[i][53] === ',' && words[i][54] === ',' && words[i][55] === ',' && words[i][56] === ',' && words[i][57] === ',' && words[i][58] === ',' && words[i][59] === ',' && words[i][60] === ',' && words[i][61] === ',' && words[i][62] === ',' && words[i][63] === ',' && words[i"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i + 1]){\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    let start1 = Math.min(interval1[0], interval2[0]);\n    let end1 = Math.max(interval1[0], interval2[0]);\n    let start2 = Math.min(interval1[1], interval2[1]);\n    let end2 = Math.max(interval1[1], interval2[1]);\n    let length = Math.max(Math.abs(start1 - start2), Math.abs(end1 - end2));\n    let prime = true;\n    for(let i = 2; i <= length; i++){\n        if(interval1[i] > interval2[i]){\n            prime = false;\n            break;\n        }\n    }\n    if(prime){\n        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n    let sum = 0;\n    let prod = 1;\n    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n            sign = 1;\n        }\n        else if(arr[i] < 0){\n            sign = -1;\n        }\n        else{\n            sum += sign * arr[i];\n        }\n    }\n    return sign * prod * sum;\n}"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n    let result = [];\n    let lst_A = [];\n    let lst_B = [];\n    let lst_C = [];\n    let lst_D = [];\n    let lst_E = [];\n    let lst_F = [];\n    let lst_G = [];\n    let lst_H = [];\n    \n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 0){\n                lst_A.push(0);\n                lst_B.push(0);\n                lst_C.push(0);\n                lst_D.push(0);\n                lst_E.push(0);\n                lst_F.push(0);\n                lst_G.push(0);\n                lst_H.push(0);\n            }else if(grid[i][j] == 1){\n                lst_A.push(grid[i][j]);\n                lst_B.push(grid[i][j]);\n                lst_C.push(grid[i][j]);\n                lst_D.push(grid[i][j]);\n                lst_E.push(grid[i][j]);\n                lst_F.push(grid[i][j]);\n                lst_G.push(grid[i][j]);\n                lst_H.push(grid[i][j]);\n            }else if(grid[i][j] == 2){\n                lst_A.push(grid[i][j]);\n                lst_B.push(grid[i][j]);\n                lst_C.push(grid[i][j]);\n                lst_D.push(grid[i][j]);\n                lst_E.push(grid[i][j]);\n                lst_F.push(grid[i][j]);\n                lst_G.push(grid[i][j]);\n                lst_H.push(grid[i][j]);\n            }else if(grid[i][j] == 3){\n                lst_A.push(grid[i][j]);\n                lst_B.push(grid[i][j]);\n                lst_C.push(grid[i][j]);\n                lst_D.push(grid[i][j]);\n                lst_E.push(grid[i][j]);\n                lst_F.push(grid[i][j]);\n                lst_G.push(grid[i][j]);\n                lst_H.push(grid[i][j]);\n            }else if(grid[i][j] == 4){\n                lst_A.push(grid[i]["], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let result = [];\n    for(let i = 1; i <= n; i++){\n        let a = 1;\n        let b = 3;\n        let c = 2;\n        let d = 3;\n        let e = 2;\n        let f = 3;\n        let g = 2;\n        let h = 3;\n        let k = 3;\n        let l = 2;\n        let m = 3;\n        let n = 2;\n        let n1 = n;\n        let n2 = n;\n        let n3 = n;\n        let n4 = n;\n        let n5 = n;\n        let n6 = n;\n        let n7 = n;\n        let n8 = n;\n        let n9 = n;\n        let n10 = n;\n        let n11 = n;\n        let n12 = n;\n        let n13 = n;\n        let n14 = n;\n        let n15 = n;\n        let n16 = n;\n        let n17 = n;\n        let n18 = n;\n        let n19 = n;\n        let n20 = n;\n        let n30 = n;\n        let n31 = n;\n        let n32 = n;\n        let n33 = n;\n        let n34 = n;\n        let n35 = n;\n        let n36 = n;\n        let n37 = n;\n        let n38 = n;\n        let n39 = n;\n        let n40 = n;\n        let n41 = n;\n        let n42 = n;\n        let n43 = n;\n        let n44 = n;\n        let n45 = n;\n        let n46 = n;\n        let n47 = n;\n        let n48 = n;\n        let n49 = n;\n        let n50 = n;\n        let n51 = n;\n        let n52 = n;\n        let n53 = n;\n        let n54 = n;\n        let n55 = n;\n        let n56 = n;\n        let n57 = n;\n        let n58 = n;\n        let n59 = n;\n        let n60 = n;\n        let n61 = n;\n        let n62 = n;\n        let n63 = n;\n        let n64 = n;\n        let n65 = n;\n        let n66 = n;\n        let n67 = n;\n        let n68 = n;\n        let n69 = n;\n        let n70 = n;\n        let n71 = n;\n        let n72 = n;\n        let n73 = n;\n        let n74 = n;\n        let n75 = n;\n        let n76 = n;\n        let n77 = n;\n        let n78 = n;\n        let n79 = n;\n        let n80 = n;\n        let n81 = n;\n        let n82 = n;\n        let n83 = n;\n        let n84 = n;\n        let n85 = n;\n        let n86 = n;\n        let n87 = n;\n        let n88 = n;\n        let n89 = n;\n        let n90 = n;\n        let n91 = n;\n        let n92 = n;\n        let n93 = n;\n        let n94 ="], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n    let result = 0;\n    let digit = 0;\n    let remainder = 0;\n    let remainder2 = 0;\n    let remainder3 = 0;\n    let remainder4 = 0;\n\n    while(n > 0){\n        digit = n % 10;\n        remainder = n % 100;\n        remainder2 = remainder % 100;\n        remainder3 = remainder % 1000;\n        remainder4 = remainder % 10000;\n\n        result += digit * remainder;\n        n = n / 100;\n        remainder = remainder / 1000;\n        remainder2 = remainder / 10000;\n        remainder3 = remainder / 100000;\n        remainder4 = remainder / 1000000;\n    }\n\n    return result;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n    let stack = [];\n    let result = false;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] === \"[\"){\n            stack.push(string[i]);\n        }\n        else if(string[i] === \"]\"){\n            if(stack.length > 0 && stack.pop() === \"[\"){\n                result = true;\n            }\n        }\n    }\n    return result;\n}"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        let num = Number(lst[i]);\n        let squared = num * num;\n        sum += squared;\n    }\n    return Math.ceil(sum);\n}\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    let last_char = txt.lastIndexOf(' ');\n    let last_char_is_a_letter = false;\n    if(last_char > -1){\n        let last_char_is_a_letter = txt.charAt(last_char).toLowerCase() === 'a' && txt.charAt(last_char).toLowerCase() === 'e' && txt.charAt(last_char).toLowerCase() === 'i';\n    }\n    return last_char_is_a_letter;\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    let max_index = 0;\n    let max_value = arr[0];\n\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] > max_value){\n            max_value = arr[i];\n            max_index = i;\n        }\n    }\n\n    return max_index;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n    if(lst.length === 0){\n        return [undefined, undefined];\n    }\n    let max = -Infinity;\n    let min = Infinity;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return [min, max];\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n    if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(a, b);\n    }\n    else if(typeof a === 'string' && typeof b === 'string'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'string'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'string'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'string'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'string'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'number'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'string'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'number'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'string'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'number'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'string'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'string'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a === 'number' && typeof b === 'number'){\n        return Math.max(Math.abs(a - b), Math.abs(b - a));\n    }\n    else if(typeof a === 'string' && typeof b === 'number'){\n        return a.localeCompare(b);\n    }\n    else if(typeof a ==="], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    let sum = 0;\n    for(let i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum % 4 === 0;\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n    if(n <= 0){\n        return 1;\n    }\n    else{\n        return n * special_factorial(n-1);\n    }\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    let result = \"\";\n    for(let i = 0; i < text.length; i++){\n        if(text[i] === \" \"){\n            result += \"_\";\n        }else{\n            result += text[i];\n        }\n    }\n    return result;\n}"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    let valid_files = [\"txt\", \"exe\", \"dll\"];\n    let valid_files_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\"];\n    let valid_files_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\"];\n    let valid_files_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\"];\n    let valid_files_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot = [\"txt\", \"exe\", \"dll\", \"bin\", \"exe\", \"dll\", \"bin\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\", \"dll\"];\n\n    let valid_files_without_dot_without_dot_without_dot_without"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 3 === 0){\n            sum += (i * i * i);\n        }\n        if(i % 4 === 0 && i % 3 !== 0){\n            sum += (i * i * i * i);\n        }\n    }\n    return sum;\n}"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    let words = sentence.split(' ');\n    let prime_numbers = [];\n    for(let word of words){\n        let char_set = new Set();\n        for(let char of word){\n            char_set.add(char);\n        }\n        if(char_set.size === 2){\n            prime_numbers.push(char_set.size);\n        }\n    }\n    let result = [];\n    for(let prime of prime_numbers){\n        let word = \"\";\n        for(let i = 0; i < prime; i++){\n            word += \" \";\n        }\n        result.push(word);\n    }\n    return result.join(' ');\n}\n"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n    let numerator = parseInt(x.split('/')[0]);\n    let denominator = parseInt(x.split('/')[1]);\n    let result = '';\n\n    if(denominator == 0){\n        return false;\n    }\n\n    for(let i = 0; i < numerator / denominator; i++){\n        result += '1';\n    }\n\n    return result.length == 1? true : false;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n    let sorted_nums = [];\n    let sum = 0;\n    let index = 0;\n\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i].toString().split('').reduce((a, b) => a + b.length - 1, 0);\n        index++;\n    }\n\n    for(let i = 0; i < nums.length; i++){\n        if(sum[index] > 0){\n            sorted_nums.push(nums[i]);\n            sum[index] -= 1;\n        }else{\n            sorted_nums.push(0);\n            index++;\n        }\n    }\n\n    return sorted_nums;\n}\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  let oddDigits = [];\n  let firstDigits = [];\n  let lastDigits = [];\n  \n  for(let num of nums){\n    if(num % 2 === 0){\n      oddDigits.push(num);\n    }else{\n      firstDigits.push(num);\n    }\n  }\n  \n  for(let num of oddDigits){\n    if(num % 2 === 1 && num % 10 % 10 === 1){\n      lastDigits.push(num);\n    }\n  }\n  \n  return lastDigits.length + firstDigits.length;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [1, 3, 7, 13, 21];\n    let count = 0;\n    for(let i = 1; i < n; i++){\n        for(let j = i + 1; j < n; j++){\n            for(let k = j + 1; k < n; k++){\n                let result = a[i] + a[j] + a[k];\n                if(result % 3 == 0){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    let planets = [\"Saturn\", \"Uranus\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets3 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets4 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets5 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets6 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets7 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets8 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets9 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets10 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets11 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets12 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets13 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets14 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets15 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets16 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets17 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets18 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets19 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets20 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets21 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets22 = [\"Mercury\","], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    let sorted_list = [];\n    let length = lst.length;\n    let odd_length = 0;\n    let even_length = 0;\n    let odd_sum = 0;\n    let even_sum = 0;\n    let odd_count = 0;\n    let even_count = 0;\n\n    for(let i = 0; i < length; i++){\n        if(lst[i].length % 2 === 1){\n            odd_length++;\n            odd_sum += lst[i];\n        } else {\n            even_length++;\n            even_sum += lst[i];\n        }\n    }\n\n    for(let i = 0; i < length; i++){\n        if(lst[i].length % 2 === 0){\n            even_count++;\n            even_sum += lst[i];\n        } else {\n            odd_count++;\n            odd_sum += lst[i];\n        }\n    }\n\n    sorted_list = [...new Set(odd_sum + even_sum)];\n\n    for(let i = 0; i < length; i++){\n        sorted_list.push(odd_count + even_count - odd_count - even_count);\n    }\n\n    return sorted_list;\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if(n % x == 0 || n % y == 0){\n        return y;\n    }\n    else{\n        return x;\n    }\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    let correct = 0;\n    let wrong = 0;\n    let diff = 0;\n\n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            correct++;\n        } else if(guess[i] === game[i]){\n            wrong++;\n        } else{\n            diff += Math.abs(guess[i] - game[i]);\n        }\n    }\n\n    return [correct, wrong, diff];\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    let strength = 0;\n    let strongest_extension = \"\";\n    let strongest_strength = 0;\n    let strongest_extension_name = \"\";\n    \n    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n        let cap = extension.length;\n        let lowercase = extension.toLowerCase().length;\n        let strength = cap - lowercase;\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest_extension = extension;\n            strongest_extension_name = extension;\n            strongest_strength = strength;\n        }\n        if(strength > strongest_strength){\n            strongest_strength = strength;\n            strongest_extension = extension;\n            strongest_extension_name = extension;\n        }\n    }\n    \n    if(strengths[0] > strengths[1]){\n        strongest_extension = strongest_extension_name;\n        strongest_strength = strongest_strength;\n    }\n    if(strengths[1] > strongest_strength){\n        strongest_extension = strongest_extension_name;\n        strongest_strength = strongest_strength;\n    }\n    \n    return strongest_extension + \".\" + strongest_strength;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    let result = true;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while(i < a.length && j < b.length){\n        if(a[i] === b[j]){\n            result = true;\n            i++;\n            j++;\n        }else if(a[i] < b[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return result;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    let count = 0;\n    let even = 0;\n    let odd = 0;\n\n    for(let i = 0; i < num.toString().length; i++){\n        if(num % 10 === 0){\n            even++;\n            odd = 0;\n        }else if(num % 10 % 2 === 0){\n            even++;\n            odd = 1;\n        }else{\n            odd++;\n        }\n    }\n\n    return [even, odd];\n}\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n    let roman_numerals = {\n        1: \"I\",\n        4: \"IV\",\n        5: \"V\",\n        9: \"IX\",\n        10: \"X\",\n        40: \"XL\",\n        50: \"L\",\n        90: \"XC\",\n        100: \"C\",\n        400: \"CD\",\n        500: \"D\",\n        900: \"CM\",\n        1000: \"M\"\n    };\n    let result = \"\";\n    for(let i = 0; i < number.toString().length; i++){\n        let current = number.toString()[i];\n        let next = roman_numerals[current];\n        if(next){\n            result += next;\n        }else{\n            result += current;\n        }\n    }\n    return result.toLowerCase();\n}"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    if(a + b > c && a + c > b && b + c > a){\n        return true;\n    }else{\n        return false;\n    }\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n    let max_char = 0;\n    let max_word = \"\";\n    let max_count = 0;\n\n    words.forEach(word => {\n        let char_count = word.length;\n        let word_count = word.split(\"\").length - 1;\n\n        if(char_count > max_count){\n            max_char = char_count;\n            max_word = word;\n            max_count = word_count;\n        }\n    });\n\n    return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  let total = number + need;\n  let remainingCarrots = remaining;\n  let eatenCarrots = total - number;\n  let remainingCarrotsLeft = remaining - eatenCarrots;\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remainingCarrots, remainingCarrotsLeft];\n  let eatenCarrotsArray = [total, eatenCarrots];\n  let remainingCarrotsLeftArray = [remaining"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    let result = 0;\n    let operand_length = operand.length;\n    let operator_length = operator.length;\n    let operand_index = 0;\n    let operator_index = 0;\n    let result_index = 0;\n\n    while(operand_index < operand_length && operator_index < operator_length){\n        let operand_value = operand[operand_index];\n        let operator_value = operator[operator_index];\n\n        if(operand_value == 0){\n            result = operand_value;\n            break;\n        }\n\n        if(operand_value % operator_value == 0){\n            result = operand_value / operator_value;\n            break;\n        }\n\n        if(operand_value > operator_value){\n            result = operand_value;\n            break;\n        }\n\n        if(operand_value < operator_value){\n            result = operator_value;\n            break;\n        }\n\n        operand_index++;\n        operator_index++;\n    }\n\n    if(result == 0){\n        result = 0;\n    }\n\n    return result;\n}\n\nlet operator = ['+', '*', '-'];\nlet operand = [2, 3, 4, 5];\nlet result = do_algebra(operator, operand);"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    let result = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(s[i].match(/[a-z]/)){\n            result += s[i].toUpperCase();\n        }else{\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n        let char = text[i];\n        let ascii_char = String.fromCharCode(char);\n        let ascii_digit = parseInt(ascii_char, 16);\n        hash += ascii_digit;\n    }\n    let hash_bytes = Math.abs(hash % 2**32);\n    let digest = new Buffer(hash_bytes, 'hex');\n    return digest.toString('hex');\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n    let even_digits = [];\n    for(let i = a; i <= b; i++){\n        if(i % 2 === 0){\n            even_digits.push(i);\n        }\n    }\n    return even_digits;\n}\n"]]