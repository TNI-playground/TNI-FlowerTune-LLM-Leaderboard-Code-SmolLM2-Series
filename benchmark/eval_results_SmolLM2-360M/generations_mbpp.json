[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(str, ch):\n    return str[:len(str)-1] + str[1:]\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] > matrix[i][j-1]:\n                matrix[i][j], matrix[i][j-1] = matrix[i][j-1], matrix[i][j]\n    return matrix\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\nimport collections\n\ndef count_common(words):\n    common_words = set()\n    for word in words:\n        if word in common_words:\n            continue\n        else:\n            common_words.add(word)\n    return list(common_words)\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(a, b, c):\n    return (a + b + c) * (b + c + a) * (c + a + b)\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(s):\n    return [s[i:i+2] for i in range(len(s)-1)]\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef text_lowercase_underscore(text):\n    return ''.join(text.lower().split('_'))\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4 * side\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    if num % 2 == 0:\n        return False\n    return num % 3 == 0 and num % 5 == 0\n"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i for i in range(n, n+m) if i % n == 0]\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(lst):\n    if len(lst) == 0:\n        return 0\n    max_sum = lst[0][0]\n    for i in range(1, len(lst)):\n        if lst[i][0] > max_sum:\n            max_sum = lst[i][0]\n    return max_sum\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_number):\n    if len(binary_number) == 1:\n        return int(binary_number)\n    else:\n        return int(binary_number[0]) + binary_to_decimal(binary_number[1:])\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, n):\n    # create a list of all the elements in the array\n    list_of_elements = [x for x in arr]\n    # create a list of all the unique elements in the list of elements\n    unique_elements = list(set(list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list = list(set(list_of_elements) - set(unique_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements = list(set(list_of_elements_not_in_unique_list) - set(list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements) - set(list_of_elements_not_in_unique_list_not_in_list_of_elements))\n    # create a list of all the elements that are not in the unique list of elements\n    list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list = list(set(list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_list_not_in_list_of_elements_not_in_unique_"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(list_of_tuples, k):\n    for i in range(len(list_of_tuples)):\n        if len(list_of_tuples[i]) < k:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(lst):\n    return [x for x in lst if not x.isdigit()]\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr, n):\n    odd_occurences = {}\n    for i in range(n):\n        if arr[i] not in odd_occurences:\n            odd_occurences[arr[i]] = 1\n        else:\n            odd_occurences[arr[i]] += 1\n    return odd_occurences\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\ndef func(lists, k):\n    heap = []\n    for i in lists:\n        heapq.heappush(heap, i)\n    result = []\n    while k > 0:\n        result.append(heapq.heappop(heap))\n        k -= 1\n    return result\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    if n < 2:\n        return 1\n    max_factor = 2\n    while n % 2 == 0:\n        max_factor = 2\n        n = n // 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            max_factor = i\n            n = n // i\n    return max_factor\n"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    return binary[::-1]\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, n):\n    for i in range(n):\n        if arr[i] != i+1:\n            return i+1\n    return n\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 7\n    if n == 4:\n        return 15\n    if n == 5:\n        return 31\n    if n == 6:\n        return 63\n    if n == 7:\n        return 127\n    if n == 8:\n        return 255\n    if n == 9:\n        return 511\n    if n == 10:\n        return 1023\n    if n == 11:\n        return 2047\n    if n == 12:\n        return 4095\n    if n == 13:\n        return 8191\n    if n == 14:\n        return 16383\n    if n == 15:\n        return 32767\n    if n == 16:\n        return 65535\n    if n == 17:\n        return 131071\n    if n == 18:\n        return 262143\n    if n == 19:\n        return 524287\n    if n == 20:\n        return 1048575\n    if n == 21:\n        return 2097151\n    if n == 22:\n        return 4194303\n    if n == 23:\n        return 8388607\n    if n == 24:\n        return 16777215\n    if n == 25:\n        return 33554431\n    if n == 26:\n        return 67108863\n    if n == 27:\n        return 134217727\n    if n == 28:\n        return 268435455\n    if n == 29:\n        return 536870911\n    if n == 30:\n        return 1073741823\n    if n == 31:\n        return 2147483647\n    if n == 32:\n        return 4294967295\n    if n == 33:\n        return 8589934595\n    if n == 34:\n        return 17179869183\n    if n == 35:\n        return 34359738367\n    if n == 36:\n        return 68719476735\n    if n == 37:\n        return 137438953477\n    if n == 38:\n        return 274877906955\n    if n == 39:\n        return 549755813913\n    if n == 40:\n        return 1099511627777\n    if n == 41:\n        return 2199023255551\n    if n == 42:\n        return 4398046511111\n    if n == 43:\n        return 8796093022208\n    if n == 44:\n        return 17592186044417\n    if n == 45:\n        return 35184372088833\n    if n == 46:\n        return 70368744177663\n    if n == 47:\n        return 140737488355327\n    if n == 48:\n        return 301475376710653\n    if n == 49:\n        return 602950753421313\n    if n == 50:\n        return 1205901510730627\n    if n == 51:\n        return 2411803061451251\n    if n == 52:\n        return 4823606022892501\n    if n == 53:\n        return 9647213045784901\n    if n == 54:\n        return 19294836071573801\n    if n == 55:\n        return 38589672143357601\n    if n == 56:\n        return 77879348286715201\n    if n == 57:\n        return 155758696573470401\n    if n == 58:\n        return 311517393146940801\n    if n == 59:\n        return 622375090782881601\n    if n == 60:\n        return 1245150181565763201\n    if n == 61:\n        return 2490300363131526401\n    if n == 62:\n        return 5180600726263052801\n    if n == 63:\n        return 10361201452526105601\n    if n == 64:\n        return 20722402905052211201\n    if n == 65:\n        return 41444805810292422401\n    if n == 66:\n        return 82889609620584444011\n    if n == 67:\n        return 165739219241168888011\n    if n == 68:\n        return 331478438482337776011\n    if n == 69:\n        return 662956877964675552011\n    if n == 70:\n        return 1325913755939451144011\n    if n == 71:\n        return 2651867531979006680111\n    if n == 72:\n        return 5303735107958013360111\n    if n == 73:\n        return 10607470215916026720221\n    if n == 74:\n        return 21215940431832053440441\n    if n == 75:\n        return 42431880863664097880881\n    if n == 76:\n        return 84863761327396195761691\n    if n == 77:\n        return 1797275226547923915433311\n    if n == 78:\n        return 3594550449095847820866621\n    if n == 79:\n        return 7190100898141776641733311\n    if n == 80:\n        return 14380101396283555221466621\n    if n == 81:\n        return 30760202792566910442933311\n    if n == 82:\n        return 61520405585133828885366621\n    if n == 83:\n        return 12304081116927765777066621\n    if n =="], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(a, b, n):\n    if n == 0:\n        return int(a / b)\n    if n % 2 == 0:\n        return find_Nth_Digit(a / b, b, n // 2)\n    else:\n        return find_Nth_Digit(a / b, b, n // 2 + 1)\n"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(list_of_mixed_list):\n    sorted_list = []\n    for i in list_of_mixed_list:\n        if type(i) == type(19):\n            sorted_list.append(i)\n        elif type(i) == type('red'):\n            sorted_list.append(i)\n        elif type(i) == type(12):\n            sorted_list.append(i)\n        elif type(i) == type(10):\n            sorted_list.append(i)\n        elif type(i) == type('green'):\n            sorted_list.append(i)\n        elif type(i) == type('blue'):\n            sorted_list.append(i)\n        elif type(i) == type('white'):\n            sorted_list.append(i)\n    return sorted_list\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    if len(lst) % 2 == 0:\n        return lst[0] // lst[1]\n    else:\n        return lst[1] // lst[0]\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearange_string(string):\n    if len(string) <= 1:\n        return string\n    else:\n        return rearange_string(string[1:]) + string[0] + rearange_string(string[1:])\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\nimport collections\n\ndef freq_element(lst):\n    freq_element = collections.Counter()\n    for el in lst:\n        freq_element[el] += 1\n    return freq_element\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(numbers):\n    return [x for x in numbers if x % 2 == 0]\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if target == arr[0]:\n        return 1\n    if target > arr[0]:\n        return find_Sum(arr[1:], target - arr[0]) + find_Sum(arr[1:], target)\n    else:\n        return find_Sum(arr[1:], target)\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\nimport re\n\ndef text_match(text):\n    return re.findall(r'\\w+', text)\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    return text.startswith('Not matched!')\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr[0], arr[1])\n    if len(arr) == 3:\n        return get_gcd(arr[1:])\n    if len(arr) == 4:\n        return get_gcd(arr[2:])\n    if len(arr) == 5:\n        return get_gcd(arr[3:])\n    if len(arr) == 6:\n        return get_gcd(arr[4:])\n    if len(arr) == 7:\n        return get_gcd(arr[5:])\n    if len(arr) == 8:\n        return get_gcd(arr[6:])\n    if len(arr) == 9:\n        return get_gcd(arr[7:])\n    if len(arr) == 10:\n        return get_gcd(arr[8:])\n    if len(arr) == 11:\n        return get_gcd(arr[9:])\n    if len(arr) == 12:\n        return get_gcd(arr[10:])\n    if len(arr) == 13:\n        return get_gcd(arr[11:])\n    if len(arr) == 14:\n        return get_gcd(arr[12:])\n    if len(arr) == 15:\n        return get_gcd(arr[13:])\n    if len(arr) == 16:\n        return get_gcd(arr[14:])\n    if len(arr) == 17:\n        return get_gcd(arr[15:])\n    if len(arr) == 18:\n        return get_gcd(arr[16:])\n    if len(arr) == 19:\n        return get_gcd(arr[17:])\n    if len(arr) == 20:\n        return get_gcd(arr[18:])\n    if len(arr) == 21:\n        return get_gcd(arr[19:])\n    if len(arr) == 22:\n        return get_gcd(arr[20:])\n    if len(arr) == 23:\n        return get_gcd(arr[21:])\n    if len(arr) == 24:\n        return get_gcd(arr[22:])\n    if len(arr) == 25:\n        return get_gcd(arr[23:])\n    if len(arr) == 26:\n        return get_gcd(arr[24:])\n    if len(arr) == 27:\n        return get_gcd(arr[25:])\n    if len(arr) == 28:\n        return get_gcd(arr[26:])\n    if len(arr) == 29:\n        return get_gcd(arr[27:])\n    if len(arr) == 30:\n        return get_gcd(arr[28:])\n    if len(arr) == 31:\n        return get_gcd(arr[29:])\n    if len(arr) == 32:\n        return get_gcd(arr[30:])\n    if len(arr) == 33:\n        return get_gcd(arr[31:])\n    if len(arr) == 34:\n        return get_gcd(arr[32:])\n    if len(arr) == 35:\n        return get_gcd(arr[33:])\n    if len(arr) == 36:\n        return get_gcd(arr[34:])\n    if len(arr) == 37:\n        return get_gcd(arr[35:])\n    if len(arr) == 38:\n        return get_gcd(arr[36:])\n    if len(arr) == 39:\n        return get_gcd(arr[37:])\n    if len(arr) == 40:\n        return get_gcd(arr[38:])\n    if len(arr) == 41:\n        return get_gcd(arr[39:])\n    if len(arr) == 42:\n        return get_gcd(arr[40:])\n    if len(arr) == 43:\n        return get_gcd(arr[41:])\n    if len(arr) == 44:\n        return get_gcd(arr[42:])\n    if len(arr) == 45:\n        return get_gcd(arr[43:])\n    if len(arr) == 46:\n        return get_gcd(arr[44:])\n    if len(arr) == 47:\n        return get_gcd(arr[45:])\n    if len(arr) == 48:\n        return get_gcd(arr[46:])\n    if len(arr) == 49:\n        return get_gcd(arr[47:])\n    if len(arr) == 50:\n        return get_gcd(arr[48:])\n    if len(arr) == 51:\n        return get_gcd(arr[49:])\n    if len(arr) == 52:\n        return get_gcd(arr[50:])\n    if len(arr) == 53:\n        return get_gcd(arr[51:])\n    if len(arr) == 54:\n        return get_gcd(arr[52:])\n    if len(arr) == 55:\n        return get_gcd(arr[53:])\n    if len(arr) == 56:\n        return get_gcd(arr[54:])\n    if len(arr) == 57:\n        return get_gcd(arr[55:])\n    if len(arr) == 58:\n        return get_gcd(arr[56:])\n    if len(arr) == 59:\n        return get_gcd(arr[57:])\n    if len(arr) == 60:\n        return get_gcd(arr[58:])\n    if len(arr) == 61:\n        return get_gcd(arr[59:])\n    if len(arr) == 62:\n        return get_gcd(arr[60:])\n    if len(arr) == 63:\n        return get_gcd(arr[61:])\n    if len(arr) == 64:\n        return get_gcd(arr[62:])\n    if len(arr) == 65:\n        return get_gcd(arr[63:])\n    if len(arr) == 66:\n        return get_gcd(arr[64:])\n    if len(arr) == 67:\n        return get_gcd(arr[65:])\n    if len(arr) == 68:\n        return get_gcd(arr[66:])\n    if len(arr) == 69:\n        return get_gcd(arr[67:])\n    if len(arr) == 70:\n        return get_gcd(arr[68:])\n    if len(arr) == 71:\n        return get_gcd(arr[69:])\n    if len(arr) == 72:\n        return get_gcd(arr[70:])\n    if len(arr) == 73:\n        return get_gcd(arr[71:])\n    if len(arr) == 74:\n        return get_gcd(arr[72:])\n    if len(arr) == 75:\n        return get_gcd(arr[73:])\n    if len(arr) == 76:\n        return get_gcd(arr[74:])\n    if len(arr) == 77:\n        return get_gcd(arr[75:])\n    if len(arr) == 78:\n        return get_gcd(arr[76:])\n    if len(arr) == 79:\n        return get_gcd(arr[77:])\n    if len(arr) == 80:\n        return get_gcd(arr[78:])\n    if len(arr) == 81:\n        return get_gcd(arr[79:])\n    if len(arr) == 82:\n        return get_gcd(arr[80:])\n    if len(arr) == 83:\n        return get_gcd(arr[81:])\n    if len(arr) == 84:\n        return get_gcd(arr[82:])\n    if len(arr) == 85:\n        return get_gcd(arr[83:])\n    if len(arr) == 86:\n        return get_gcd(arr[84:])\n    if len(arr) == 87:\n        return get_gcd(arr[85:])\n    if len("], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return all(nums[i] != nums[i+1] for i in range(len(nums)-1))\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    if a > b:\n        return compute_Last_Digit(b, a)\n    else:\n        return compute_Last_Digit(a, b//a)\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(number):\n    odd_bits = 0\n    for i in range(len(number)):\n        if number[i] % 2 != 0:\n            odd_bits += 1\n    return odd_bits\n"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_first_element(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_2(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_3(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_4(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_5(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_6(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_7(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_8(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_9(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_10(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_11(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_12(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_13(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_14(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_15(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_16(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_17(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_18(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_19(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_20(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_21(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_22(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_23(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_24(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_25(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_26(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_27(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_28(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_29(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_30(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_31(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_32(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_33(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_34(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_35(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_36(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_37(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_38(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_39(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_40(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_41(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_42(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_43(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_44(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_45(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_46(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_47(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_48(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_49(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_50(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_51(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_52(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_53(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_54(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_55(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_56(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_57(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_58(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_59(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_60(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_61(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_62(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_63(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_64(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_65(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_66(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_67(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_68(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_69(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_70(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_71(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_72(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_73(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_74(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_75(lst, index):\n    return lst[index]\n\ndef extract_first_element_by_index_76("], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(len(lst), key=len)\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a, b):\n    return a * b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if len(string) == 1:\n        return True\n    if string[0] == string[-1]:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    \"\"\"\n    :param arr: list of int\n    :return: list of int\n    \"\"\"\n    count = [0] * 10\n    for i in arr:\n        count[i] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in arr:\n        val = i - count[i]\n        count[i] = val\n        arr[count[i] - 1] = i\n    return arr\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, n, r):\n    \"\"\"\n    :param a:\n    :param n:\n    :param r:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    return a * tn_gp(a, n-1, r)\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return check(n // 2)\n    return check(n - 1)\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(digits, size):\n    if size == 0:\n        return 0\n    if digits[0] > digits[1]:\n        return find_Max_Num(digits[1:], size - 1)\n    else:\n        return find_Max_Num(digits[0:], size - 1)\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    return (n * (3 * n - 1) // 2) % 1 == 0\n\ndef nth_octagonal_number(n):\n    return n * (3 * n - 1) // 2\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, n):\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                max_len = max(max_len, len(sub_arr(arr, i, j)))\n    return max_len\n\ndef sub_arr(arr, i, j):\n    sub_arr = []\n    while i < j:\n        if arr[i] > arr[j]:\n            sub_arr.append(arr[i])\n            i += 1\n        else:\n            sub_arr.append(arr[j])\n            j -= 1\n    return sub_arr\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] + s[j] == len(s):\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(nums):\n    return min(nums)\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(t):\n    max_diff = 0\n    for i in range(len(t)-1):\n        for j in range(i+1, len(t)):\n            if t[i] > t[j]:\n                max_diff = max(max_diff, t[i] - t[j])\n    return max_diff\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef sort_by_lambda(tuples):\n    return sorted(tuples, key=lambda x: (x[1], x[0]))\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(list):\n    if len(list) == 0:\n        return 0\n    else:\n        return list[0] + recursive_list_sum(list[1:])\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    return bell_number(n-1)+bell_number(n-2)\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    return is_Monotonic(arr[1:]) and is_Monotonic(arr[:1])\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list, sublist):\n    for i in range(len(list)):\n        if list[i] == sublist[0]:\n            if list[i+1] == sublist[1]:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuples, length):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    if n == 93:\n        return True\n    if n == 94:\n        return True\n    if n == 95:\n        return True\n    if n == 96:\n        return True\n    if n == 97:\n        return True\n    if n == 98:\n        return True\n    if n == 99:\n        return True\n    if n == 100:\n        return True\n    if n == 101:\n        return True\n    if n == 102:\n        return True\n    if n == 103:\n        return True\n    if n == 104:\n        return True\n    if n == 105:\n        return True\n    if n == 106:\n        return True\n    if n == 107:\n        return True\n    if n == 108:\n        return True\n    if n == 109:\n        return True\n    if n == 110:\n        return True\n    if n == 111:\n        return True\n    if n == 112:\n        return True\n    if n == 113:\n        return True\n    if n == 114:\n        return True\n    if n == 115:\n        return True\n    if n == 116:\n        return True\n    if n == 117:\n        return True\n    if n == 118:\n        return True\n    if n == 119:\n        return True\n    if n == 120:\n        return True\n    if n == 121:\n        return True\n    if n == 122:\n        return True\n    if n == 123:\n        return True\n    if n == 124:\n        return True\n    if n == 125:\n        return True\n    if n == 126:\n        return True\n    if n == 127:\n        return True\n    if n == 128:\n        return True\n    if n == 129:\n        return True\n    if n == 130:\n        return True\n    if n == 131:\n        return True\n    if n == 132:\n        return True\n    if n == 133:\n        return True\n    if n == 134:\n        return True\n    if n == 135:\n        return True\n    if n == 136:\n        return True\n    if n == 137:\n        return True\n    if n == 138:\n        return True\n    if n == 139:\n        return True\n    if n == 140:\n        return True\n    if n == 141:\n        return True\n    if n == 142:\n        return True\n    if n == 143:\n        return True\n    if n == 144:\n        return True\n    if n == 145:\n        return True\n    if n == 146:\n        return True\n    if n == 147:\n        return True\n    if n == 148:\n        return True\n    if n == 149:\n        return True\n    if n == 150:\n        return True\n    if n == 151:\n        return True\n    if n == 152:\n        return True\n    if n == 153:\n        return True\n    if n == 154:\n        return True\n    if n == 155:\n        return True\n    if n == 156:\n        return True\n    if n == 157:\n        return True\n    if n == 158:\n        return True\n    if n == 159:\n        return True\n    if n == 160:\n        return True\n    if n == 161:\n        return True\n    if n == 162:\n        return True\n    if n == 163:\n        return True\n    if n == 164:\n        return True\n    if n == 165:\n        return True\n    if n == 166:\n        return True\n    if n == 167:\n        return True\n    if n == 168:\n        return True\n    if n == 169:\n        return True\n    if n == 170:\n        return True\n    if n == 171:\n        return True\n    if n == 172:\n        return True\n    if n == 173:\n        return True\n    if n == 174:\n        return True\n   "], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\ndef multiple_split(s, delimiters):\n    \"\"\"\n    Split the given string with multiple delimiters by using regex.\n    :param s: The string to split.\n    :param delimiters: The delimiters to use.\n    :return: The splitted string.\n    \"\"\"\n    return re.findall(delimiters, s)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns):\n    for pattern in patterns:\n        for i in range(len(pattern)-1):\n            if pattern[i] != pattern[i+1]:\n                return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    :type tuples: list of tuple\n    :type k: int\n    :rtype: list of tuple\n    \"\"\"\n    if not tuples:\n        return []\n    if len(tuples) == 1:\n        return [tuples[0]]\n    if k == 1:\n        return [tuple(t) for t in tuples]\n    else:\n        return [tuple(t) for t in find_tuples(tuples[1:], k - 1)]\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    count = 0\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if (i, j) in get_Squares(a, b):\n                count += 1\n    return count\n\ndef get_Squares(a, b):\n    squares = set()\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if (i, j) not in squares:\n                squares.add((i, j))\n    return squares\n\ndef test_count_Squares():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_2():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_3():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_4():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_5():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_6():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_7():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_8():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_9():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_10():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_11():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_12():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_13():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_14():\n    assert count_Squares(4,3) == 20\n    assert count_Squares(4,4) == 16\n    assert count_Squares(4,5) == 20\n    assert count_Squares(5,4) == 16\n    assert count_Squares(5,5) == 20\n    assert count_Squares(5,6) == 20\n    assert count_Squares(6,5) == 16\n    assert count_Squares(6,6) == 20\n\ndef test_count_Squares_15():\n    assert count_Squares(4,3) == 20\n    assert count_Squares("], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef is_odd_length(word):\n    return len(word) % 2 != 0\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    return (n*(3*n-1)/2)\n\ndef main():\n    print(tetrahedral_number(5))\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(t1, t2):\n    return zip(t1, t2)\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4/3 * math.pi * radius**3\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    return ''.join(char for char in string if char.isalpha())\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2178309\n    if n == 32:\n        return 3524578\n    if n == 33:\n        return 5702887\n    if n == 34:\n        return 9227465\n    if n == 35:\n        return 14930352\n    if n == 36:\n        return 24157817\n    if n == 37:\n        return 40320713\n    if n == 38:\n        return 65121426\n    if n == 39:\n        return 105857663\n    if n == 40:\n        return 171518963\n    if n == 41:\n        return 277376699\n    if n == 42:\n        return 469035063\n    if n == 43:\n        return 745071767\n    if n == 44:\n        return 1204148591\n    if n == 45:\n        return 1949124463\n    if n == 46:\n        return 3194273057\n    if n == 47:\n        return 5142290551\n    if n == 48:\n        return 8330413619\n    if n == 49:\n        return 13462690171\n    if n == 50:\n        return 21783090343\n    if n == 51:\n        return 35245780713\n    if n == 52:\n        return 57028870147\n    if n == 53:\n        return 92274650201\n    if n == 54:\n        return 149303520433\n    if n == 55:\n        return 241578170767\n    if n == 56:\n        return 403207130933\n    if n == 57:\n        return 651214260303\n    if n == 58:\n        return 1058576630637\n    if n == 59:\n        return 1715189630911\n    if n == 60:\n        return 2773766990283\n    if n == 61:\n        return 5142290551447\n    if n == 62:\n        return 8330413619023\n    if n == 63:\n        return 13462690171067\n    if n == 64:\n        return 21783090343093\n    if n == 65:\n        return 35245780714463\n    if n == 66:\n        return 57028870147067\n    if n == 67:\n        return 92274650201033\n    if n == 68:\n        return 149303520433067\n    if n == 69:\n        return 241578170767033\n    if n == 70:\n        return 403207130933067\n    if n == 71:\n        return 651214260303067\n    if n == 72:\n        return 1058576630637067\n    if n == 73:\n        return 1715189630911067\n    if n == 74:\n        return 2773766990283067\n    if n == 75:\n        return 5142290551447067\n    if n == 76:\n        return 8330413619023067\n    if n == 77:\n        return 13462690171067067\n    if n == 78:\n        return 21783090343093067\n    if n == 79:\n        return 35245780714463067\n    if n == 80:\n        return 57028870147067067\n    if n == 81:\n        return 92274650201033067\n    if n == 82:\n        return 149303520433067067\n    if n == 83:\n        return 241578170767033067\n    if n == 84:\n        return 403207130933067067\n    if n == 85:\n        return 651214260303067067\n    if n == 86:\n        return 1058576630637067067\n    if n == 87:\n        return 1715189630911067067\n    if n == 88:\n        return 2773766990283067067\n    if n == 89:\n        return 5142290551447067067\n    if n == 90:\n        return 8330413619023067067\n    if n == 91:\n        return 13462690171067067067\n    if n == 92:\n        return 21783090343093067067\n    if n == 93:\n        return 35245780714463067067\n    if n == 94:\n        return 57028870147067067067\n    if n == 95:\n        return 9"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\ndef surfacearea_sphere(radius):\n    return 4 * pi * radius**2\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    return (n*(n+1)*(2*n+1))//6\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(d1, d2, d3):\n    return {**d1, **d2, **d3}\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    min_num = n\n    min_index = 0\n    for i in range(len(n)):\n        if n[i] < min_num:\n            min_num = n[i]\n            min_index = i\n    return min_num, min_index\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef longest_word(words):\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n\nwords = [\"python\", \"PHP\", \"bigdata\", \"java\", \"c\", \"c++\"]"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string, substring):\n    if len(substring) > len(string):\n        return False\n    if substring in string:\n        return True\n    else:\n        return False\n\ndef find_substring_iter(string, substring):\n    for i in range(len(string)):\n        if substring in string[i:]:\n            return True\n    return False\n\ndef find_substring_recursive(string, substring):\n    if len(substring) > len(string):\n        return False\n    if substring in string:\n        return True\n    else:\n        return False\n\ndef find_substring_recursive_iter(string, substring):\n    for i in range(len(string)):\n        if substring in string[i:]:\n            return True\n    return False\n\ndef find_substring_recursive_recursive(string, substring):\n    if len(substring) > len(string):\n        return False\n    if substring in string:\n        return True\n    else:\n        return False\n\ndef find_substring_recursive_recursive_iter(string, substring):\n    for i in range(len(string)):\n        if substring in string[i:]:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    if len(str(num)) == 1:\n        return True\n    else:\n        for i in range(len(str(num))-1):\n            if int(str(num)[i]) - int(str(num)[i+1]) != 0:\n                return False\n        return True\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_index = 0\n    min_value = None\n    for i, tuple in enumerate(tuples):\n        if tuple[1] < min_value:\n            min_index = i\n            min_value = tuple[1]\n    return min_index, min_value\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(arr):\n    min_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] < arr[j] and len(set(arr[i])) < len(set(arr[j])):\n                min_length = len(set(arr[i]))\n                min_length_index = i\n    return min_length_index\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    divisors = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 2\n    return divisors\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lists):\n    freq_dict = {}\n    for list in lists:\n        for item in list:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(nums):\n    return reduce(lambda x, y: x * y, nums) / len(nums)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    binary.reverse()\n    return binary\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    if num < 0:\n        return 0\n    if num == 0:\n        return num\n    if num % 2 == 0:\n        return next_smallest_palindrome(num // 2)\n    else:\n        return next_smallest_palindrome(num - 1) + 1\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k):\n    if len(arr) < k:\n        return None\n    if k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = k - mid\n        right = k - mid - 1\n        return kth_element(arr[left:right + 1], k) if left < right else kth_element(arr[right + 1:], k - left - 1)\n"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(s):\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in s.split('_')])\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 1 or m == 1:\n        return 1\n    if n == 2 or m == 2:\n        return 2\n    if n == 3 or m == 3:\n        return 3\n    if n == 4 or m == 4:\n        return 5\n    if n == 5 or m == 5:\n        return 7\n    if n == 6 or m == 6:\n        return 11\n    if n == 7 or m == 7:\n        return 13\n    if n == 8 or m == 8:\n        return 17\n    if n == 9 or m == 9:\n        return 23\n    if n == 10 or m == 10:\n        return 29\n    if n == 11 or m == 11:\n        return 37\n    if n == 12 or m == 12:\n        return 49\n    if n == 13 or m == 13:\n        return 61\n    if n == 14 or m == 14:\n        return 73\n    if n == 15 or m == 15:\n        return 89\n    if n == 16 or m == 16:\n        return 101\n    if n == 17 or m == 17:\n        return 113\n    if n == 18 or m == 18:\n        return 127\n    if n == 19 or m == 19:\n        return 149\n    if n == 20 or m == 20:\n        return 169\n    if n == 21 or m == 21:\n        return 197\n    if n == 22 or m == 22:\n        return 229\n    if n == 23 or m == 23:\n        return 257\n    if n == 24 or m == 24:\n        return 289\n    if n == 25 or m == 25:\n        return 321\n    if n == 26 or m == 26:\n        return 357\n    if n == 27 or m == 27:\n        return 393\n    if n == 28 or m == 28:\n        return 449\n    if n == 29 or m == 29:\n        return 499\n    if n == 30 or m == 30:\n        return 569\n    if n == 31 or m == 31:\n        return 649\n    if n == 32 or m == 32:\n        return 739\n    if n == 33 or m == 33:\n        return 829\n    if n == 34 or m == 34:\n        return 929\n    if n == 35 or m == 35:\n        return 1029\n    if n == 36 or m == 36:\n        return 1139\n    if n == 37 or m == 37:\n        return 1259\n    if n == 38 or m == 38:\n        return 1379\n    if n == 39 or m == 39:\n        return 1499\n    if n == 40 or m == 40:\n        return 1619\n    if n == 41 or m == 41:\n        return 1739\n    if n == 42 or m == 42:\n        return 1869\n    if n == 43 or m == 43:\n        return 1999\n    if n == 44 or m == 44:\n        return 2139\n    if n == 45 or m == 45:\n        return 2279\n    if n == 46 or m == 46:\n        return 2419\n    if n == 47 or m == 47:\n        return 2569\n    if n == 48 or m == 48:\n        return 2739\n    if n == 49 or m == 49:\n        return 2919\n    if n == 50 or m == 50:\n        return 3199\n    if n == 51 or m == 51:\n        return 3469\n    if n == 52 or m == 52:\n        return 3739\n    if n == 53 or m == 53:\n        return 4019\n    if n == 54 or m == 54:\n        return 4399\n    if n == 55 or m == 55:\n        return 4779\n    if n == 56 or m == 56:\n        return 5159\n    if n == 57 or m == 57:\n        return 5539\n    if n == 58 or m == 58:\n        return 5919\n    if n == 59 or m == 59:\n        return 6299\n    if n == 60 or m == 60:\n        return 6679\n    if n == 61 or m == 61:\n        return 7159\n    if n == 62 or m == 62:\n        return 7639\n    if n == 63 or m == 63:\n        return 8119\n    if n == 64 or m == 64:\n        return 8699\n    if n == 65 or m == 65:\n        return 9279\n    if n == 66 or m == 66:\n        return 9859\n    if n == 67 or m == 67:\n        return 10439\n    if n == 68 or m == 68:\n        return 11019\n    if n == 69 or m == 69:\n        return 11699\n    if n == 70 or m == 70:\n        return 12379\n    if n == 71 or m == 71:\n        return 13059\n    if n == 72 or m == 72:\n        return 13739\n    if n == 73 or m == 73:\n        return 14419\n    if n == 74 or m == 74:\n        return 15099\n    if n == 75 or m == 75:\n        return 15779\n    if n == 76 or m == 76:\n        return 16459\n    if n == 77 or m == 77:\n        return 17139\n    if n == 78 or m == 78:\n        return 17819\n    if n == 79 or m == 79:\n        return 18499\n    if n == 80 or m == 80:\n        return 19179\n    if n == 81 or m == 81:\n        return 20059\n    if n == 82 or m == 82:\n        return 20839\n    if n == 83 or m == 83:\n        return 21619\n    if n == 84 or m == 84:\n        return 22499\n    if n == 85 or m == 85:\n        return 23279\n    if n == 86 or m == 86:\n        return 24059\n    if n == 87 or m == 87:\n        return 24839\n    if n == 88 or m == 88:\n        return 25619\n    if n == 89 or m == 89:\n        return 26499\n    if n == 90 or m == 90:\n        return 27379\n    if n == 91 or m == 91:\n        return 28259\n    if n == 92 or m == 92:\n        return 29139\n    if n == 93 or m == 93:\n        return 30019\n    if n == 94 or m == 94:\n        return 30899\n    if n == 95 or m == 95:\n        return 31779\n    if n == 96 or m == 96:\n        return 32659\n    if n == 97 or m == 97:\n        return 33539\n    if n =="], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: [x[0], x[1]][0])\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count_true(lst):\n    return sum(bool(x) for x in lst)\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    return list(map(lambda x, y: x + y, list1, list2))\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(low, high):\n    count = 0\n    for i in range(low, high+1):\n        if i in range(16):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2):\n    if len(list1) > len(list2):\n        return list2 + list1\n    else:\n        return list1 + list2\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s[i] != s[n-1-i]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    if start < 0 or end < 0:\n        return []\n    if start > end:\n        return []\n    if start == end:\n        return [(start, end)]\n    if start > end:\n        return [(start, end)] + extract_missing(lst, start, end - 1)\n    if end < start:\n        return [(start, end)] + extract_missing(lst, start, end - 1) + extract_missing(lst, start, end)\n    return extract_missing(lst, start, end - 1) + extract_missing(lst, start, end)\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(lists):\n    common_elements = []\n    for i in range(len(lists[0])):\n        for j in range(len(lists)):\n            if lists[j][i] in common_elements:\n                common_elements.remove(lists[j][i])\n    return common_elements\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2 * (radius + height)\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(tuples):\n    freq = {}\n    for tuple in tuples:\n        key, value = tuple\n        if key not in freq:\n            freq[key] = value\n        else:\n            freq[key] += value\n    return freq\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(dict_list):\n    for key in dict_list:\n        if key not in dict_list:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple):\n    return sum(int(i) for i in tuple)\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_to_convert):\n    \"\"\"\n    Convert all possible convertible elements in the list to float.\n    :param list_to_convert: list of tuples\n    :return: list of floats\n    \"\"\"\n    return [float(x[0]) for x in list_to_convert if isinstance(x[0], str)]\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return [char for char in string]\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: tuple of maximum product\n    \"\"\"\n    max_product = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            product = list_of_tuples[i][0] * list_of_tuples[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, sum, left, right):\n    if left == right:\n        return True\n    if left + right > len(arr):\n        return False\n    if arr[left] + arr[right] == sum:\n        return True\n    if arr[left] + arr[right] < sum:\n        return check_triplet(arr, sum, left + 1, right)\n    return check_triplet(arr, sum, left, right - 1)\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    if n == 1:\n        return 30\n    if n == 2:\n        return 31\n    if n == 3:\n        return 32\n    if n == 4:\n        return 33\n    if n == 5:\n        return 34\n    if n == 6:\n        return 35\n    if n == 7:\n        return 36\n    if n == 8:\n        return 37\n    if n == 9:\n        return 38\n    if n == 10:\n        return 39\n    if n == 11:\n        return 40\n    if n == 12:\n        return 41\n    if n == 13:\n        return 42\n    if n == 14:\n        return 43\n    if n == 15:\n        return 44\n    if n == 16:\n        return 45\n    if n == 17:\n        return 46\n    if n == 18:\n        return 47\n    if n == 19:\n        return 48\n    if n == 20:\n        return 49\n    if n == 21:\n        return 50\n    if n == 22:\n        return 51\n    if n == 23:\n        return 52\n    if n == 24:\n        return 53\n    if n == 25:\n        return 54\n    if n == 26:\n        return 55\n    if n == 27:\n        return 56\n    if n == 28:\n        return 57\n    if n == 29:\n        return 58\n    if n == 30:\n        return 59\n    if n == 31:\n        return 60\n    if n == 32:\n        return 61\n    if n == 33:\n        return 62\n    if n == 34:\n        return 63\n    if n == 35:\n        return 64\n    if n == 36:\n        return 65\n    if n == 37:\n        return 66\n    if n == 38:\n        return 67\n    if n == 39:\n        return 68\n    if n == 40:\n        return 69\n    if n == 41:\n        return 70\n    if n == 42:\n        return 71\n    if n == 43:\n        return 72\n    if n == 44:\n        return 73\n    if n == 45:\n        return 74\n    if n == 46:\n        return 75\n    if n == 47:\n        return 76\n    if n == 48:\n        return 77\n    if n == 49:\n        return 78\n    if n == 50:\n        return 79\n    if n == 51:\n        return 80\n    if n == 52:\n        return 81\n    if n == 53:\n        return 82\n    if n == 54:\n        return 83\n    if n == 55:\n        return 84\n    if n == 56:\n        return 85\n    if n == 57:\n        return 86\n    if n == 58:\n        return 87\n    if n == 59:\n        return 88\n    if n == 60:\n        return 89\n    if n == 61:\n        return 90\n    if n == 62:\n        return 91\n    if n == 63:\n        return 92\n    if n == 64:\n        return 93\n    if n == 65:\n        return 94\n    if n == 66:\n        return 95\n    if n == 67:\n        return 96\n    if n == 68:\n        return 97\n    if n == 69:\n        return 98\n    if n == 70:\n        return 99\n    if n == 71:\n        return 100\n    if n == 72:\n        return 101\n    if n == 73:\n        return 102\n    if n == 74:\n        return 103\n    if n == 75:\n        return 104\n    if n == 76:\n        return 105\n    if n == 77:\n        return 106\n    if n == 78:\n        return 107\n    if n == 79:\n        return 108\n    if n == 80:\n        return 109\n    if n == 81:\n        return 110\n    if n == 82:\n        return 111\n    if n == 83:\n        return 112\n    if n == 84:\n        return 113\n    if n == 85:\n        return 114\n    if n == 86:\n        return 115\n    if n == 87:\n        return 116\n    if n == 88:\n        return 117\n    if n == 89:\n        return 118\n    if n == 90:\n        return 119\n    if n == 91:\n        return 120\n    if n == 92:\n        return 121\n    if n == 93:\n        return 122\n    if n == 94:\n        return 123\n    if n == 95:\n        return 124\n    if n == 96:\n        return 125\n    if n == 97:\n        return 126\n    if n == 98:\n        return 127\n    if n == 99:\n        return 128\n    if n == 100:\n        return 129\n    if n == 101:\n        return 130\n    if n == 102:\n        return 131\n    if n == 103:\n        return 132\n    if n == 104:\n        return 133\n    if n == 105:\n        return 134\n    if n == 106:\n        return 135\n    if n == 107:\n        return 136\n    if n == 108:\n        return 137\n    if n == 109:\n        return 138\n    if n == 110:\n        return 139\n    if n == 111:\n        return 140\n    if n == 112:\n        return 141\n    if n == 113:\n        return 142\n    if n == 114:\n        return 143\n    if n == 115:\n        return 144\n    if n == 116:\n        return 145\n    if n == 117:\n        return 146\n    if n == 118:\n        return 147\n    if n == 119:\n        return 148\n    if n == 120:\n        return 149\n    if n == 121:\n        return 150\n    if n == 122:\n        return 151\n    if n == 123:\n        return 152\n    if n == 124:\n        return 153\n    if n == 125:\n        return 154\n    if n == 126:\n        return 155\n    if n == 127:\n        return 156\n    if n == 128:\n        return 157\n    if n == 129:\n        return 158\n    if n == 130:\n        return 159\n    if n == 131:\n        return 160\n    if n == 132:\n        return 161\n    if n == 133:\n        return 162\n    if n == 134:\n        return 163\n    if n == 135:\n        return 164\n    if n == 136:\n        return 165\n    if n == 137:\n        return 166\n    if n == 138:\n        return 167\n    if n == 139:\n        return 168\n    if n == 140:\n        return 169\n    if n == 141:\n        return 170\n    if n == 142:\n        return 171\n    if n == 143:\n        return 172\n    if n == 144:\n        return 173\n    if n == 145:\n        return 174\n    if n == 146:\n        return 175\n    if"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # a, b, c = 1, 2, 3\n    # while a < n:\n    #     if n % a == 0:\n    #         if n % b == 0 and b != a:\n    #             if n % c == 0 and c != a and b != c:\n    #                 return n\n    #             else:\n    #                 return n\n    #     a += 1\n    # return 0\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\ndef angle_complex(x,y):\n    return math.atan2(y,x)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(string, n):\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n    return length\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(a, b):\n    return reduce(lambda x, y: x + y, set(a) & set(b))\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a, b):\n    return a * b\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n, words):\n    words = sorted(words, key=len)\n    return [word for word in words if len(word) >= n]\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\nimport numpy as np\n\ndef magic_square_test(arr):\n    if len(arr) != 9:\n        return False\n    if np.array_equal(arr, np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]])) :\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    max_freq = 0\n    max_freq_index = 0\n    for i in range(len(lst)):\n        if lst[i] > max_freq:\n            max_freq = lst[i]\n            max_freq_index = i\n    return max_freq_index, max_freq\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for i in s:\n        if i in vowels:\n            vowels_list.append(i)\n    return \"\".join(vowels_list)\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return ', '.join(map(str, tup))\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(lst):\n    return reduce(lambda x, y: x + y, filter(lambda x: x < 0, lst), 0)\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, n):\n    if p == 0:\n        return \"ODD\"\n    if p == 1:\n        return \"EVEN\"\n    if p == n:\n        return \"EVEN\"\n    return check_last(arr[p-1::-1], p-1, n-p)\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n*(3*n-1)/2\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(price):\n    return price * 1.05\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(num // 2)\n    return False\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14 * radius\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tup):\n    return [x for x in tup if x != tup[0]]\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    if len(lst) < 2:\n        return lst\n    else:\n        last_element = lst[-1]\n        first_element = lst[0]\n        last_element_index = lst.index(last_element)\n        first_element_index = lst.index(first_element)\n        if last_element_index > first_element_index:\n            lst[last_element_index], lst[first_element_index] = lst[first_element_index], lst[last_element_index]\n            return pancake_sort(lst)\n        else:\n            return pancake_sort(lst[:last_element_index]) + [last_element] + pancake_sort(lst[last_element_index + 1:])\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(lst1, lst2, lst3):\n    count = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] == lst2[j] and lst1[i] == lst3[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return len(set([list(tup) for _ in range(len(tup))]))\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, n):\n    sum_Pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) > 0:\n                sum_Pairs += abs(arr[i] - arr[j])\n    return sum_Pairs\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    sum_digits = 0\n    while num > 0:\n        digit = num % 10\n        sum_digits += digit\n        num //= 10\n    return sum_digits\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, target):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if arr[0] == target:\n        return 1 + longest_subseq_with_diff_one(arr[1:], target)\n    if arr[0] > target:\n        return 1 + longest_subseq_with_diff_one(arr[1:], target - arr[0])\n    if arr[0] < target:\n        return 1 + longest_subseq_with_diff_one(arr[1:], target - arr[0]) + longest_subseq_with_diff_one(arr[1:], target)\n    return max(longest_subseq_with_diff_one(arr[1:], target - arr[0]), longest_subseq_with_diff_one(arr[1:], target - arr[0]))\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    if a == 0 or b == 0:\n        return False\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    # Find the discriminant\n    d = b**2 - 4*a*c\n    # Find the two roots\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b/2*a)\n    else:\n        return (-b + (d**0.5))/2*a, (-b - (d**0.5))/2*a\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_elements(lst, specified_element):\n    return [element for element in lst if element == specified_element]\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(number):\n    even_bits = [0] * 32\n    for i in range(32):\n        if number & 1:\n            even_bits[i] = 1\n        else:\n            even_bits[i] = 0\n        number = even_bits[i]\n    return number\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(t):\n    return tuple(map(int, t))\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(list_):\n    result = []\n    for item in list_:\n        if isinstance(item, list):\n            result.extend(encode_list(item))\n        else:\n            result.append([item, 1])\n    return result\n\ndef decode_list(list_):\n    result = []\n    for item in list_:\n        if isinstance(item, list):\n            result.extend(decode_list(item))\n        else:\n            result.append(item)\n    return result\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    if k > n:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 4\n    if k == 5:\n        return 5\n    if k == 6:\n        return 6\n    if k == 7:\n        return 7\n    if k == 8:\n        return 8\n    if k == 9:\n        return 9\n    if k == 10:\n        return 10\n    if k == 11:\n        return 11\n    if k == 12:\n        return 12\n    if k == 13:\n        return 13\n    if k == 14:\n        return 14\n    if k == 15:\n        return 15\n    if k == 16:\n        return 16\n    if k == 17:\n        return 17\n    if k == 18:\n        return 18\n    if k == 19:\n        return 19\n    if k == 20:\n        return 20\n    if k == 21:\n        return 21\n    if k == 22:\n        return 22\n    if k == 23:\n        return 23\n    if k == 24:\n        return 24\n    if k == 25:\n        return 25\n    if k == 26:\n        return 26\n    if k == 27:\n        return 27\n    if k == 28:\n        return 28\n    if k == 29:\n        return 29\n    if k == 30:\n        return 30\n    if k == 31:\n        return 31\n    if k == 32:\n        return 32\n    if k == 33:\n        return 33\n    if k == 34:\n        return 34\n    if k == 35:\n        return 35\n    if k == 36:\n        return 36\n    if k == 37:\n        return 37\n    if k == 38:\n        return 38\n    if k == 39:\n        return 39\n    if k == 40:\n        return 40\n    if k == 41:\n        return 41\n    if k == 42:\n        return 42\n    if k == 43:\n        return 43\n    if k == 44:\n        return 44\n    if k == 45:\n        return 45\n    if k == 46:\n        return 46\n    if k == 47:\n        return 47\n    if k == 48:\n        return 48\n    if k == 49:\n        return 49\n    if k == 50:\n        return 50\n    if k == 51:\n        return 51\n    if k == 52:\n        return 52\n    if k == 53:\n        return 53\n    if k == 54:\n        return 54\n    if k == 55:\n        return 55\n    if k == 56:\n        return 56\n    if k == 57:\n        return 57\n    if k == 58:\n        return 58\n    if k == 59:\n        return 59\n    if k == 60:\n        return 60\n    if k == 61:\n        return 61\n    if k == 62:\n        return 62\n    if k == 63:\n        return 63\n    if k == 64:\n        return 64\n    if k == 65:\n        return 65\n    if k == 66:\n        return 66\n    if k == 67:\n        return 67\n    if k == 68:\n        return 68\n    if k == 69:\n        return 69\n    if k == 70:\n        return 70\n    if k == 71:\n        return 71\n    if k == 72:\n        return 72\n    if k == 73:\n        return 73\n    if k == 74:\n        return 74\n    if k == 75:\n        return 75\n    if k == 76:\n        return 76\n    if k == 77:\n        return 77\n    if k == 78:\n        return 78\n    if k == 79:\n        return 79\n    if k == 80:\n        return 80\n    if k == 81:\n        return 81\n    if k == 82:\n        return 82\n    if k == 83:\n        return 83\n    if k == 84:\n        return 84\n    if k == 85:\n        return 85\n    if k == 86:\n        return 86\n    if k == 87:\n        return 87\n    if k == 88:\n        return 88\n    if k == 89:\n        return 89\n    if k == 90:\n        return 90\n    if k == 91:\n        return 91\n    if k == 92:\n        return 92\n    if k == 93:\n        return 93\n    if k == 94:\n        return 94\n    if k == 95:\n        return 95\n    if k == 96:\n        return 96\n    if k == 97:\n        return 97\n    if k == 98:\n        return 98\n    if k == 99:\n        return 99\n    if k == 100:\n        return 100\n    if k == 101:\n        return 101\n    if k == 102:\n        return 102\n    if k == 103:\n        return 103\n    if k == 104:\n        return 104\n    if k == 105:\n        return 105\n    if k == 106:\n        return 106\n    if k == 107:\n        return 107\n    if k == 108:\n        return 108\n    if k == 109:\n        return 109\n    if k == 110:\n        return 110\n    if k == 111:\n        return 111\n    if k == 112:\n        return 112\n    if k == 113:\n        return 113\n    if k == 114:\n        return 114\n    if k == 115:\n        return 115\n    if k == 116:\n        return 116\n    if k == 117:\n        return 117\n    if k == 118:\n        return 118\n    if k == 119:\n        return 119\n    if k == 120:\n        return 120\n    if k == 121:\n        return 121\n    if k == 122:\n        return 122\n    if k == 123:\n        return 123\n    if k == 124:\n        return 124\n    if k == 125:\n        return 125\n    if k == 126:\n        return 126\n    if k == 127:\n        return 127\n    if k == 128:\n        return 128\n    if k == 129:\n        return 129\n    if k == 130:\n        return 130\n    if k == 131:\n        return 131\n    if k == 132:\n        return 132\n    if k == 133:\n        return 133\n    if k == 134:\n        return 134\n    if k == 135:\n        return 135\n    if k == 136:\n        return 136\n    if k == 137:\n        return 137\n    if k == 138:\n        return 138\n    if k == 139:\n        return 139\n    if k == 140:\n        return 140\n    if k == 141:\n        return 141\n    if k == 142:\n        return 142\n    if k == 143:\n        return 143\n    if k == 144:\n        return 144\n    if k == 145:\n        return 145\n    if k == 146:\n        return 146\n    if k == 147:"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    if month == 'January':\n        if day >= 31:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month == 'February':\n        if day >= 28:\n            return 'spring'\n        else:\n            return 'autumn'\n    elif month == 'March':\n        if day >= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'April':\n        if day >= 30:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'May':\n        if day >= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'June':\n        if day >= 30:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'July':\n        if day >= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'August':\n        if day >= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'September':\n        if day >= 30:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'October':\n        if day >= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month == 'November':\n        if day >= 30:\n            return 'spring'\n        else:\n            return 'summer'\n    else:\n        return 'winter'\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] * b[j] == n:\n                x = i\n                y = j\n                break\n    return (x, y)\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    if n < 0:\n        return 0\n    return n + sum_series(n-1)\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\ndef area_polygon(n, x, y):\n    \"\"\"\n    Calculate the area of a regular polygon with n sides and the coordinates of its vertices.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (1.0/2.0) * (x[0] * y[1] + x[1] * y[0])\n\ndef main():\n    n = int(input())\n    x = list(map(float, input().split()))\n    y = list(map(float, input().split()))\n    print(area_polygon(n, x, y))\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(n, m):\n    if n == m:\n        return True\n    if n > m:\n        n, m = m, n\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, x):\n    odd_count = 0\n    even_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] == x:\n                if arr[i] % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n    return even_count, odd_count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    while True:\n        if n & 1:\n            return n\n        n >>= 1\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 832040\n    if n == 30:\n        return 1346269\n    if n == 31:\n        return 2178309\n    if n == 32:\n        return 3524578\n    if n == 33:\n        return 5702887\n    if n == 34:\n        return 9227465\n    if n == 35:\n        return 14923076\n    if n == 36:\n        return 24157817\n    if n == 37:\n        return 40311913\n    if n == 38:\n        return 65123830\n    if n == 39:\n        return 105857665\n    if n == 40:\n        return 171578947\n    if n == 41:\n        return 317811035\n    if n == 42:\n        return 599690693\n    if n == 43:\n        return 1099511627\n    if n == 44:\n        return 2199023363\n    if n == 45:\n        return 3398176093\n    if n == 46:\n        return 5596996467\n    if n == 47:\n        return 9394993933\n    if n == 48:\n        return 15991960401\n    if n == 49:\n        return 25987930833\n    if n == 50:\n        return 41975901233\n    if n == 51:\n        return 67960937543\n    if n == 52:\n        return 113940811173\n    if n == 53:\n        return 181921748917\n    if n == 54:\n        return 305862576051\n    if n == 55:\n        return 587784324963\n    if n == 56:\n        return 1175617111903\n    if n == 57:\n        return 2751234231837\n    if n == 58:\n        return 5507875349503\n    if n == 59:\n        return 11059650698533\n    if n == 60:\n        return 26118301047867\n    if n == 61:\n        return 52137651746433\n    if n == 62:\n        return 108275353294897\n    if n == 63:\n        return 216551006599375\n    if n == 64:\n        return 433106513894153\n    if n == 65:\n        return 966213020492939\n    if n == 66:\n        return 1939429534375617\n    if n == 67:\n        return 3878659059148953\n    if n == 68:\n        return 7817394598324733\n    if n == 69:\n        return 15635094196672593\n    if n == 70:\n        return 31270188793349233\n    if n == 71:\n        return 62545283590631593\n    if n == 72:\n        return 125862690250317983\n    if n == 73:\n        return 281725580540635963\n    if n == 74:\n        return 563451161085351933\n    if n == 75:\n        return 1126906722530967933\n    if n == 76:\n        return 2753313384961935933\n    if n == 77:\n        return 5586626769492875933\n    if n == 78:\n        return 11273954154457655933\n    if n == 79:\n        return 2753313384961935933\n    if n == 80:\n        return 5586626769492875933\n    if n == 81:\n        return 11273954154457655933\n    if n == 82:\n        return 2753313384961935933\n    if n == 83:\n        return 5586626769492875933\n    if n == 84:\n        return 11273954154457655933\n    if n == 85:\n        return 2753313384961935933\n    if n == 86:\n        return 5586626769492875933\n    if n == 87:\n        return 11273954154457655933\n    if n == 88:\n        return 2753313384961935933\n    if n == 89:\n        return 5586626769492875933\n    if n == 90:\n        return 11273954154457655933\n    if n == 91:\n        return 2753313384961935933\n    if n == 92:\n        return 5586626769492875933\n    if n == 93:\n       "], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\ndef sum_range_list(lst, start, end):\n    if start > end:\n        return 0\n    return sum(lst[start:end+1])\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    if n == 5:\n        return 25\n    else:\n        return perimeter_pentagon(n-1) + 5\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(s):\n    return ''.join([c for c in s if not c.isalnum()])\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(seq):\n    return [[key, list(map(int, value))] for key, value in seq]\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return s == '(' or s == '[' or s == '{'\n    if s[0] == '(' or s[0] == '[' or s[0] == '{':\n        return is_valid_parenthese(s[1:])\n    return False\n"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a, b, c):\n    return a + b + c\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(a, b):\n    lcm = a * b // gcd(a, b)\n    return (a, b) if lcm <= b else (b, lcm - b)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(literals, string):\n    for literal in literals:\n        if literal in string:\n            return literal\n    return None\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on a sphere given their latitude and longitude.\n    \"\"\"\n    # convert latitude and longitude to radians\n    lat1, lon1 = map(math.radians, [lat1, lon1])\n    lat2, lon2 = map(math.radians, [lat2, lon2])\n\n    # haversine formula\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) * math.sin(dlon / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return c * 6371.01\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(s, n):\n    if n == 0:\n        return \"\"\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == s[n - 1]:\n        return common_prefix(s[1:n], n - 1)\n    else:\n        return common_prefix(s[1:n], n - 1) + s[0]\n"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n\nimport re\n\ndef find_character(text):\n    pattern = re.compile(r\"[\\w\\d\\-_]+\")\n    return pattern.findall(text)\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(list, num):\n    return [x for x in list if x > num]\n"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    x = (b**2 - 4*a*c) ** 0.5\n    return x\n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\nimport re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text):\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(s1, s2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    if s1[m-1] == s2[n-1]:\n        return 1 + longest_common_subsequence(s1, s2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(s1, s2, m-1, n), longest_common_subsequence(s1, s2, m, n-1))\n\ndef longest_common_subsequence_dp(s1, s2, m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\ndef longest_common_subsequence_recursive(s1, s2, m, n):\n    if m == 0 or n == 0:\n        return 0\n    if s1[m-1] == s2[n-1]:\n        return 1 + longest_common_subsequence_recursive(s1, s2, m-1, n-1)\n    else:\n        return max(longest_common_subsequence_recursive(s1, s2, m-1, n), longest_common_subsequence_recursive(s1, s2, m, n-1))\n\ndef longest_common_subsequence_iterative(s1, s2, m, n):\n    lcs = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                lcs[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                lcs[i][j] = 1 + lcs[i-1][j-1]\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    return lcs[m][n]\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(arr, n):\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_2(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_3(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_4(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_5(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_6(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_7(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_8(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_9(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_10(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_11(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_12(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_13(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_14(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_15(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_16(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_17(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_18(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )\n\ndef count_Intgral_Points_19(x1, y1, x2, y2):\n    \"\"\"\n    Count the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    return sum(\n        [\n            (x1, y1)\n            for x in range(x1, x2 + 1)\n            for y in range(y1, y2 + 1)\n            if (x, y) not in self.points\n        ]\n    )"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if len(month) == 2:\n        if month[0] == \"M\" and month[1] == \"A\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"B\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"C\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"D\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"E\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"F\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"G\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"H\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"I\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"J\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"K\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"L\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"M\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"N\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"O\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"P\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Q\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"R\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"S\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"T\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"U\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"V\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"W\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"X\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Y\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Z\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"A\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"B\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"C\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"D\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"E\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"F\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"G\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"H\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"I\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"J\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"K\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"L\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"M\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"N\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"O\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"P\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Q\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"R\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"S\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"T\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"U\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"V\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"W\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"X\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Y\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Z\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"A\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"B\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"C\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"D\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"E\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"F\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"G\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"H\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"I\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"J\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"K\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"L\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"M\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"N\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"O\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"P\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Q\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"R\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"S\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"T\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"U\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"V\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"W\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"X\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Y\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"Z\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"A\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"B\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"C\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"D\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"E\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"F\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"G\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"H\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"I\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"J\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"K\":\n            return True\n        elif month[0] == \"M\" and month[1] == \"L\":\n            return True\n        elif month[0] == \"M\" and month[1] =="], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if len(string) > 0 and string[0].isalpha() and string[1].isalpha():\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_duplicates(t):\n    seen = set()\n    for x in t:\n        if x not in seen:\n            seen.add(x)\n            yield x\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_number):\n    decimal_number = 0\n    for i in range(0, len(octal_number)):\n        decimal_number += int(octal_number[i]) * (2 ** (len(octal_number)-1-i))\n    return decimal_number\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, val):\n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [tuple for tuple in tuples if len(tuple) <= k]\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(a, b, c, d):\n    \"\"\"\n    Find the exponentiation of the given two tuples.\n    :param a: Tuple of integers\n    :param b: Tuple of integers\n    :param c: Tuple of integers\n    :param d: Tuple of integers\n    :return: Tuple of integers\n    \"\"\"\n    return (a[0] * b[0] * c[0] * d[0], a[1] * b[1] * c[1] * d[1] * c[2] * d[2] * d[3])\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\ndef largest_triangle(a, b, c):\n    \"\"\"\n    a, b, c are the sides of the triangle\n    \"\"\"\n    # find the area of the triangle\n    area = (a * b + b * c + c * a) / 2\n    # find the perimeter of the triangle\n    perimeter = a + b + c\n    # find the largest triangle\n    if area > perimeter:\n        return max(largest_triangle(a, b, c), largest_triangle(b, c, a), largest_triangle(c, a, b))\n    else:\n        return perimeter\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & 1:\n        return 2\n    return highest_Power_of_2(n >> 1) + 1\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lst):\n    if len(lst) == 0:\n        return []\n    max_val = max(lst)\n    max_index = 0\n    for i in range(len(lst)):\n        if max_val == lst[i]:\n            max_index = i\n    return [max_index] + position_max(lst[max_index+1:])\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef check_same(lst):\n    for i in range(len(lst)):\n        if lst[i] != lst[i+1]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(s):\n    return ''.join([i for i in s if not i%2])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(a, b):\n    return bin(a ^ b).count('1')\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(s, ch):\n    count = 0\n    for i in s:\n        if i == ch:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(t):\n    inversion_elements_list = []\n    for i in range(len(t)-1):\n        for j in range(i+1, len(t)):\n            if t[i] > t[j]:\n                inversion_elements_list.append((t[i], t[j]))\n    return inversion_elements_list\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(elements):\n    return \"\".join(elements)\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1 if s[0] == s[1] else 0\n    if len(s) == 3:\n        return 1 if s[0] == s[1] and s[0] == s[2] else 0\n    if len(s) == 4:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] else 0\n    if len(s) == 5:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] else 0\n    if len(s) == 6:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] else 0\n    if len(s) == 7:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] else 0\n    if len(s) == 8:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] else 0\n    if len(s) == 9:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] else 0\n    if len(s) == 10:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] else 0\n    if len(s) == 11:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] else 0\n    if len(s) == 12:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] else 0\n    if len(s) == 13:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] else 0\n    if len(s) == 14:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] and s[0] == s[13] else 0\n    if len(s) == 15:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] and s[0] == s[13] and s[0] == s[14] else 0\n    if len(s) == 16:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] and s[0] == s[13] and s[0] == s[14] and s[0] == s[15] else 0\n    if len(s) == 17:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] and s[0] == s[13] and s[0] == s[14] and s[0] == s[15] and s[0] == s[16] else 0\n    if len(s) == 18:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6] and s[0] == s[7] and s[0] == s[8] and s[0] == s[9] and s[0] == s[10] and s[0] == s[11] and s[0] == s[12] and s[0] == s[13] and s[0] == s[14] and s[0] == s[15] and s[0] == s[16] and s[0] == s[17] else 0\n    if len(s) == 19:\n        return 1 if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4] and s[0] == s[5] and s[0] == s[6]"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\ndef is_decimal(x):\n    try:\n        float(x)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    if len(heap) == 0:\n        return [item]\n    if len(heap) == 1:\n        return [item] + heap\n    if item < heap[0]:\n        heap[0], heap[1] = heap[1], heap[0]\n        heap_replace(heap, item)\n    return heap\n\ndef heap_sort(heap):\n    for i in range(len(heap)-1, -1, -1):\n        heap_replace(heap, heap[i])\n    return heap\n\ndef heap_sort_iterative(heap):\n    for i in range(len(heap)-1, -1, -1):\n        heap_replace(heap, heap[i])\n    return heap\n\ndef heap_sort_recursive(heap):\n    if len(heap) == 0:\n        return\n    if len(heap) == 1:\n        return\n    heap_sort_recursive(heap[0:len(heap)-1])\n    heap_sort_recursive(heap[0:len(heap)-1])\n    return\n\ndef heap_sort_recursive_iterative(heap):\n    if len(heap) == 0:\n        return\n    if len(heap) == 1:\n        return\n    heap_sort_recursive_iterative(heap[0:len(heap)-1])\n    heap_sort_recursive_iterative(heap[0:len(heap)-1])\n    return\n\ndef heap_sort_recursive_recursive(heap):\n    if len(heap) == 0:\n        return\n    if len(heap) == 1:\n        return\n    heap_sort_recursive_recursive(heap[0:len(heap)-1])\n    heap_sort_recursive_recursive(heap[0:len(heap)-1])\n    return\n"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\nimport re\n\ndef is_allowed_specific_char(string):\n    return re.match(r\"[a-zA-Z0-9]+\", string)\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if (n & i) == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return sum(pow(i, 4) for i in range(1, n + 1))\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(strings1, strings2):\n    return tuple(map(lambda x, y: x + y, strings1, strings2))\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(degree):\n    return degree * (180/pi)\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(list):\n    if not list:\n        return []\n    if len(list) == 1:\n        return list[0]\n    else:\n        return decode_list(list[1:]) + [list[0]] + decode_list(list[2:])\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(s):\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for c in s:\n        if c not in freq:\n            freq[c] = 1\n        else:\n            freq[c] += 1\n    # find the character with the highest frequency\n    for c in freq:\n        if freq[c] > 1:\n            return c\n    return None\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(a, b):\n    if a > b:\n        return min_Operations(b, a)\n    else:\n        return min_Operations(a, b) + 1\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tup, k):\n    if len(tup) < k:\n        return None\n    else:\n        return sorted(tup, key=lambda x: x[k])\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(text, n):\n    \"\"\"\n    Replace the maximum n occurrences of spaces, commas, or dots with a colon.\n    :param text:\n    :param n:\n    :return:\n    \"\"\"\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ': ')\n    return text\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            return lst[i]\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(t):\n    return all(isinstance(x, type) for x in t)\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_2(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_3(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_4(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_5(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_6(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_7(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_8(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_9(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_10(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_11(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_12(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_13(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_14(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_15(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_16(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_17(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_18(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_19(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_20(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_21(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_22(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_23(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_24(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_25(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_26(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_27(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_28(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_29(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_30(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_31(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_32(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_33(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_34(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_35(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_36(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_37(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_38(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_39(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_40(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_41(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_42(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_43(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_44(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_45(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_46(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_47(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_48(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_49(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_majority_50(arr, n, val):\n    for i in range(n):\n        if arr[i] == val:\n            return True\n    return False\n\ndef is_"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if arr[mid] < arr[mid + 1]:\n        return find_Min(arr, mid + 1, end)\n    elif arr[mid] > arr[mid - 1]:\n        return find_Min(arr, start, mid - 1)\n    else:\n        return find_Min(arr, start, mid - 1)\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef remove_odd_values(string):\n    odd_values = []\n    for char in string:\n        if char.isalpha():\n            if char.isalpha() and char.islower():\n                odd_values.append(char)\n    return ''.join(odd_values)\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start, end, bits):\n    return all(bin(i).count('1') == bits for i in range(start, end+1))\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(s, ch):\n    return ''.join([c for c in s if c != ch])\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return triangle[0][0]\n    if n == 2:\n        return max(triangle[0][0], triangle[1][0])\n    return max(max_sum(triangle, n-1), max_sum(triangle, n-2) + triangle[0][0])\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef get_n_largest_items(data, n):\n    return sorted(data, key=lambda x: data.index(x), reverse=True)[:n]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsuface_cylinder(r,h):\n    return 2*pi*r*h\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    even_bits = 0\n    for i in range(0, len(bin(number)[2:])):\n        if bin(number)[i] == '1':\n            even_bits += 1\n    return even_bits\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 or m == 1:\n        return 1\n    if n == 2 or m == 2:\n        return 2\n    if n == 3 or m == 3:\n        return 3\n    if n == 4 or m == 4:\n        return 4\n    if n == 5 or m == 5:\n        return 5\n    if n == 6 or m == 6:\n        return 6\n    if n == 7 or m == 7:\n        return 7\n    return No_of_Triangle(n-1, m-1) + No_of_Triangle(n-1, m) + No_of_Triangle(n-1, m-1)\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    seen = {}\n    for tuple in tuples:\n        if tuple in seen:\n            return seen\n        else:\n            seen[tuple] = 1\n    return seen\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] in s:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 19\n    if n == 7:\n        return 28\n    if n == 8:\n        return 47\n    if n == 9:\n        return 76\n    if n == 10:\n        return 118\n    if n == 11:\n        return 238\n    if n == 12:\n        return 385\n    if n == 13:\n        return 624\n    if n == 14:\n        return 985\n    if n == 15:\n        return 1494\n    if n == 16:\n        return 2403\n    if n == 17:\n        return 3877\n    if n == 18:\n        return 6317\n    if n == 19:\n        return 10035\n    if n == 20:\n        return 16553\n    if n == 21:\n        return 26697\n    if n == 22:\n        return 43893\n    if n == 23:\n        return 69197\n    if n == 24:\n        return 103393\n    if n == 25:\n        return 166797\n    if n == 26:\n        return 268993\n    if n == 27:\n        return 465297\n    if n == 28:\n        return 731593\n    if n == 29:\n        return 1175893\n    if n == 30:\n        return 1911193\n    if n == 31:\n        return 2927393\n    if n == 32:\n        return 4854793\n    if n == 33:\n        return 7789193\n    if n == 34:\n        return 11635193\n    if n == 35:\n        return 19902393\n    if n == 36:\n        return 29775593\n    if n == 37:\n        return 4954793\n    if n == 38:\n        return 7939593\n    if n == 39:\n        return 11934993\n    if n == 40:\n        return 20869993\n    if n == 41:\n        return 32799993\n    if n == 42:\n        return 44839993\n    if n == 43:\n        return 57779993\n    if n == 44:\n        return 71719993\n    if n == 45:\n        return 85759993\n    if n == 46:\n        return 99999993\n    if n == 47:\n        return 111111113\n    if n == 48:\n        return 122222223\n    if n == 49:\n        return 1333333333\n    if n == 50:\n        return 1444444444\n    if n == 51:\n        return 1555555555\n    if n == 52:\n        return 1666666666\n    if n == 53:\n        return 1777777777\n    if n == 54:\n        return 1899999999\n    if n == 55:\n        return 2000000000\n    if n == 56:\n        return 2111111111\n    if n == 57:\n        return 2222222222\n    if n == 58:\n        return 2333333333\n    if n == 59:\n        return 2444444444\n    if n == 60:\n        return 2555555555\n    if n == 61:\n        return 2666666666\n    if n == 62:\n        return 2777777777\n    if n == 63:\n        return 2899999999\n    if n == 64:\n        return 3011111111\n    if n == 65:\n        return 3133333333\n    if n == 66:\n        return 3255555555\n    if n == 67:\n        return 3377777777\n    if n == 68:\n        return 3499999999\n    if n == 69:\n        return 3622222222\n    if n == 70:\n        return 3744444444\n    if n == 71:\n        return 3866666666\n    if n == 72:\n        return 3989999999\n    if n == 73:\n        return 4111111111\n    if n == 74:\n        return 4233333333\n    if n == 75:\n        return 4355555555\n    if n == 76:\n        return 4477777777\n    if n == 77:\n        return 4599999999\n    if n == 78:\n        return 4722222222\n    if n == 79:\n        return 4844444444\n    if n == 80:\n        return 4966666666\n    if n == 81:\n        return 5088888888\n    if n == 82:\n        return 5211111111\n    if n == 83:\n        return 5333333333\n    if n == 84:\n        return 5455555555\n    if n == 85:\n        return 5577777777\n    if n == 86:\n        return 5699999999\n    if n == 87:\n        return 5822222222\n    if n == 88:\n        return 5944444444\n    if n == 89:\n        return 6066666666\n    if n == 90:\n        return 6188888888\n    if n == 91:\n        return 6311111111\n    if n == 92:\n        return 6433333333\n    if n == 93:\n        return 6555555555\n    if n == 94:\n        return 6677777777\n    if n == 95:\n        return 6800000000\n    if n == 96:\n        return 6922222222\n    if n == 97:\n        return 7044444444\n    if n == 98:\n        return 7166666666\n    if n == 99:\n        return 7288888888\n    if n == 100:\n        return 7411111111\n    if n == 101:\n        return 7533333333\n    if n == 102:\n        return 7655555555\n    if n == 103:\n        return 7777777777\n    if n == 104:\n        return 7899999999\n   "], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, new_list):\n    for i in range(len(lst)):\n        if lst[i] == new_list[i]:\n            lst[i] = new_list[i]\n    return lst\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\nimport numpy as np\n\ndef array_3d(rows, cols, h):\n    arr = np.zeros((rows, cols, h))\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(h):\n                arr[i][j][k] = '*'\n    return arr\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(str):\n    return len(str.split(' '))\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(list_of_tuples):\n    sorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n    return sorted_list\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return i\n    return num\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(arr[0], arr[1])\n    if n == 2:\n        return max(max_sum(arr[1:], n - 1), max_sum(arr[2:], n - 1))\n    return max(max_sum(arr[1:], n - 1), max_sum(arr[2:], n - 1), max_sum(arr[3:], n - 1))\n"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute the square root of x using the Babylonian method.\n    \"\"\"\n    # The Babylonian method is based on the observation that\n    # x^2 - x - 2 = 0 has a root between x and -x.\n    # We can use this root to find the square root of x.\n    # The root is between x and -x if and only if\n    # x^2 - x - 2 = 0 is a perfect square.\n    # We can use the fact that x^2 - x - 2 = 0 is a perfect square if and only if\n    # x^2 - x - 2 = (x - 2)(x + 2) = 0.\n    # We can use the fact that x^2 - x - 2 = 0 is a perfect square if and only if\n    # x^2 - x - 2 = (x - 2)(x + 2) = 0 if and only if x = 2 or x = -2.\n    # We can use the fact that x^2 - x - 2 = 0 is a perfect square if and only if\n    # x^2 - x - 2 = (x - 2)(x + 2) = 0 if and only if x = 2 or x = -2.\n    if x == 2:\n        return 2\n    elif x == -2:\n        return -2\n    else:\n        x_root = (x - 2) / (2 * x)\n        y_root = (x + 2) / (2 * x)\n        return y_root if x_root**2 - x_root - 2 == 0 else x_root\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    lps = [0] * len(s)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                lps[i] = j + 1\n                if j == len(s) - 1:\n                    break\n            else:\n                lps[i] = 0\n    return lps\n\ndef longestPalindrome(s):\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[0] if s[0] == s[1] else s[1]\n    lps = lps(s)\n    longest = 1\n    for i in range(len(s) - 1):\n        for j in range(i + 1, len(s) - 1):\n            if lps[i] == lps[j] and s[i] == s[j]:\n                longest = max(longest, lps[j] + 1)\n    return s[0:longest]\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    return sum(1.0 / (1 + i) for i in range(1, n + 1))\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr1 and x in arr2, arr1 + arr2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i, element)\n            return\n    list.insert(len(list), element)\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\ndef convert(x):\n    if type(x) == complex:\n        return (x.real, x.imag)\n    else:\n        return x\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    words = []\n    for word in string.split():\n        if word[0] == 'a' or word[0] == 'e':\n            words.append(word)\n    return words\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [colors]\n    if n == 2:\n        return [colors[0], colors[1], colors[2]]\n    return [c + [c[1], c[2]] for c in combinations_colors(colors[1:], n-1) + combinations_colors(colors[2:], n-1) + combinations_colors(colors[0:], n-1)]\n"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return 0\n    return 1\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(a) > len(b):\n        return b\n    else:\n        return a\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 5:\n        return 3\n    if n == 7:\n        return 4\n    if n == 11:\n        return 5\n    if n == 13:\n        return 6\n    if n == 17:\n        return 7\n    if n == 19:\n        return 8\n    if n == 23:\n        return 9\n    if n == 29:\n        return 10\n    if n == 31:\n        return 11\n    if n == 37:\n        return 12\n    if n == 41:\n        return 13\n    if n == 43:\n        return 14\n    if n == 47:\n        return 15\n    if n == 53:\n        return 16\n    if n == 59:\n        return 17\n    if n == 61:\n        return 18\n    if n == 67:\n        return 19\n    if n == 71:\n        return 20\n    if n == 73:\n        return 21\n    if n == 79:\n        return 22\n    if n == 83:\n        return 23\n    if n == 89:\n        return 24\n    if n == 97:\n        return 25\n    if n == 101:\n        return 26\n    if n == 103:\n        return 27\n    if n == 107:\n        return 28\n    if n == 109:\n        return 29\n    if n == 113:\n        return 30\n    if n == 127:\n        return 31\n    if n == 131:\n        return 32\n    if n == 137:\n        return 33\n    if n == 139:\n        return 34\n    if n == 149:\n        return 35\n    if n == 151:\n        return 36\n    if n == 157:\n        return 37\n    if n == 163:\n        return 38\n    if n == 167:\n        return 39\n    if n == 173:\n        return 40\n    if n == 179:\n        return 41\n    if n == 181:\n        return 42\n    if n == 183:\n        return 43\n    if n == 191:\n        return 44\n    if n == 193:\n        return 45\n    if n == 197:\n        return 46\n    if n == 199:\n        return 47\n    if n == 211:\n        return 48\n    if n == 223:\n        return 49\n    if n == 227:\n        return 50\n    if n == 229:\n        return 51\n    if n == 233:\n        return 52\n    if n == 239:\n        return 53\n    if n == 241:\n        return 54\n    if n == 251:\n        return 55\n    if n == 257:\n        return 56\n    if n == 263:\n        return 57\n    if n == 269:\n        return 58\n    if n == 271:\n        return 59\n    if n == 277:\n        return 60\n    if n == 281:\n        return 61\n    if n == 283:\n        return 62\n    if n == 293:\n        return 63\n    if n == 297:\n        return 64\n    if n == 301:\n        return 65\n    if n == 303:\n        return 66\n    if n == 307:\n        return 67\n    if n == 311:\n        return 68\n    if n == 313:\n        return 69\n    if n == 317:\n        return 70\n    if n == 319:\n        return 71\n    if n == 323:\n        return 72\n    if n == 327:\n        return 73\n    if n == 331:\n        return 74\n    if n == 337:\n        return 75\n    if n == 347:\n        return 76\n    if n == 349:\n        return 77\n    if n == 353:\n        return 78\n    if n == 359:\n        return 79\n    if n == 367:\n        return 80\n    if n == 373:\n        return 81\n    if n == 379:\n        return 82\n    if n == 383:\n        return 83\n    if n == 389:\n        return 84\n    if n == 397:\n        return 85\n    if n == 401:\n        return 86\n    if n == 403:\n        return 87\n    if n == 405:\n        return 88\n    if n == 409:\n        return 89\n    if n == 419:\n        return 90\n    if n == 421:\n        return 91\n    if n == 431:\n        return 92\n    if n == 433:\n        return 93\n    if n == 439:\n        return 94\n    if n == 443:\n        return 95\n    if n == 449:\n        return 96\n    if n == 457:\n        return 97\n    if n == 461:\n        return 98\n    if n == 463:\n        return 99\n    if n == 467:\n        return 100\n    if n == 471:\n        return 101\n    if n == 473:\n        return 102\n    if n == 479:\n        return 103\n    if n == 487:\n        return 104\n    if n == 491:\n        return 105\n    if n == 499:\n        return 106\n    if n == 503:\n        return 107\n    if n == 509:\n        return 108\n    if n == 521:\n        return 109\n    if n == 523:\n        return 110\n    if n == 527:\n        return 111\n    if n == 529:\n        return 112\n    if n == 533:\n        return 113\n    if n == 539:\n        return 114\n    if n == 543:\n        return 115\n    if n == 549:\n        return 116\n    if n == 551:\n        return 117\n    if n == 557:\n        return 118\n    if n == 563:\n        return 119\n    if n == 569:\n        return 120\n    if n == 571:\n        return 121\n    if n == 577:\n        return 122\n    if n == 581:\n        return 123\n    if n == 583:\n        return 124\n    if n == 589:\n        return 125\n    if n == 597:\n        return 126\n    if n == 601:\n        return 127\n    if n == 603:\n        return 128\n    if n == 607:\n        return 129\n    if n == 613:\n        return 130\n    if n == 617:\n        return 131\n    if n == 619:\n        return 132\n    if n == 621:\n        return 133\n    if n == 627:\n        return 134\n    if n == 631:\n        return 135\n    if n == 637:\n        return 136\n    if n == 641:\n        return 137\n    if n == 643:\n        return 138\n    if n == 647:\n        return 139\n    if n == 653:\n        return 140\n    if n == 659:\n        return 141\n    if n == 661:\n        return "], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(elements):\n    return tuple(map(lambda x,y: x/y, elements, elements))\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(list, length):\n    if len(list) < length:\n        return []\n    if len(list) == length:\n        return [list]\n    else:\n        return split_two_parts(list[1:length], length) + split_two_parts(list[0:length-1], length-1)\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    return dict(sorted(dict1.items() + dict2.items()))\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    return age // 7\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(len(lst)-n+1)]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateralsurface_cube(side):\n    return 6 * side * side\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    return (n * (n + 1) * (2 * n + 1)) / 6\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 10\n    if n == 5:\n        return 17\n    if n == 6:\n        return 32\n    if n == 7:\n        return 63\n    if n == 8:\n        return 125\n    if n == 9:\n        return 217\n    if n == 10:\n        return 435\n    if n == 11:\n        return 877\n    if n == 12:\n        return 1753\n    if n == 13:\n        return 3585\n    if n == 14:\n        return 7177\n    if n == 15:\n        return 14653\n    if n == 16:\n        return 30905\n    if n == 17:\n        return 68717\n    if n == 18:\n        return 176413\n    if n == 19:\n        return 413227\n    if n == 20:\n        return 1026953\n    if n == 21:\n        return 2653903\n    if n == 22:\n        return 5307803\n    if n == 23:\n        return 10615603\n    if n == 24:\n        return 21231203\n    if n == 25:\n        return 42462403\n    if n == 26:\n        return 84924803\n    if n == 27:\n        return 179859603\n    if n == 28:\n        return 359719203\n    if n == 29:\n        return 719438403\n    if n == 30:\n        return 1439276803\n    if n == 31:\n        return 2878553603\n    if n == 32:\n        return 5757111203\n    if n == 33:\n        return 11514229603\n    if n == 34:\n        return 23028459203\n    if n == 35:\n        return 46056918403\n    if n == 36:\n        return 92113836803\n    if n == 37:\n        return 184227675603\n    if n == 38:\n        return 368455351203\n    if n == 39:\n        return 736910706403\n    if n == 40:\n        return 1473821409603\n    if n == 41:\n        return 304764281283\n    if n == 42:\n        return 659528562563\n    if n == 43:\n        return 1319191125123\n    if n == 44:\n        return 2978382249263\n    if n == 45:\n        return 5956764498523\n    if n == 46:\n        return 1391352899606\n    if n == 47:\n        return 3282719399273\n    if n == 48:\n        return 6675477898543\n    if n == 49:\n        return 12951055797113\n    if n == 50:\n        return 25902111594253\n    if n == 51:\n        return 51804223191963\n    if n == 52:\n        return 103608446190993\n    if n == 53:\n        return 207216889181987\n    if n == 54:\n        return 414433778363963\n    if n == 55:\n        return 828867656747843\n    if n == 56:\n        return 1657785335515723\n    if n == 57:\n        return 3315570671031473\n    if n == 58:\n        return 6671141016647793\n    if n == 59:\n        return 13342286033295573\n    if n == 60:\n        return 26684572066591343\n    if n == 61:\n        return 53369148099987683\n    if n == 62:\n        return 110738296199965563\n    if n == 63:\n        return 26684572066591343\n    if n == 64:\n        return 53369148099987683\n    if n == 65:\n        return 110738296199965563\n    if n == 66:\n        return 26684572066591343\n    if n == 67:\n        return 53369148099987683\n    if n == 68:\n        return 110738296199965563\n    if n == 69:\n        return 26684572066591343\n    if n == 70:\n        return 53369148099987683\n    if n == 71:\n        return 110738296199965563\n    if n == 72:\n        return 26684572066591343\n    if n == 73:\n        return 53369148099987683\n    if n == 74:\n        return 110738296199965563\n    if n == 75:\n        return 26684572066591343\n    if n == 76:\n        return 53369148099987683\n    if n == 77:\n        return 110738296199965563\n    if n == 78:\n        return 26684572066591343\n    if n == 79:\n        return 53369148099987683\n    if n == 80:\n        return 110738296199965563\n    if n == 81:\n        return 26684572066591343\n    if n == 82:\n        return 53369148099987683\n    if n == 83:\n        return 110738296199965563\n    if n == 84:\n        return 26684572066591343\n    if n == 85:\n        return 53369148099987683\n    if n == 86:\n        return 110738296199965563\n    if n == 87:\n        return 26684572066591343\n    if n == 88:\n        return 53369148099987"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, index):\n    sum = 0\n    for i in range(index, len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [record[1] for record in records if record[1] == 'Rear']\n"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(t1, t2):\n    return tuple(map(lambda x, y: x - y, t1, t2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, start, end):\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if arr[mid] == end:\n        return mid\n    elif arr[mid] == start:\n        return mid\n    else:\n        if arr[mid] > start and arr[mid] < end:\n            return get_Position(arr, mid + 1, end)\n        else:\n            return get_Position(arr, start, mid - 1)\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(r, h):\n    return 3.1415926535897932384626433832795 * (r * r * h)\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dict, value):\n    return {k: v for k, v in dict.items() if v == value}\n"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple):\n    count = 0\n    for i in range(len(tuple)):\n        if tuple[i] > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    if n == 93:\n        return True\n    if n == 94:\n        return True\n    if n == 95:\n        return True\n    if n == 96:\n        return True\n    if n == 97:\n        return True\n    if n == 98:\n        return True\n    if n == 99:\n        return True\n    if n == 100:\n        return True\n    if n == 101:\n        return True\n    if n == 102:\n        return True\n    if n == 103:\n        return True\n    if n == 104:\n        return True\n    if n == 105:\n        return True\n    if n == 106:\n        return True\n    if n == 107:\n        return True\n    if n == 108:\n        return True\n    if n == 109:\n        return True\n    if n == 110:\n        return True\n    if n == 111:\n        return True\n    if n == 112:\n        return True\n    if n == 113:\n        return True\n    if n == 114:\n        return True\n    if n == 115:\n        return True\n    if n == 116:\n        return True\n    if n == 117:\n        return True\n    if n == 118:\n        return True\n    if n == 119:\n        return True\n    if n == 120:\n        return True\n    if n == 121:\n        return True\n    if n == 122:\n        return True\n    if n == 123:\n        return True\n    if n == 124:\n        return True\n    if n == 125:\n        return True\n    if n == 126:\n        return True\n    if n == 127:\n        return True\n    if n == 128:\n        return True\n    if n == 129:\n        return True\n    if n == 130:\n        return True\n    if n == 131:\n        return True\n    if n == 132:\n        return True\n    if n == 133:\n        return True\n    if n == 134:\n        return True\n    if n == 135:\n        return True\n    if n == 136:\n        return True\n    if n == 137:\n        return True\n    if n == 138:\n        return True\n    if n == 139:\n        return True\n    if n == 140:\n        return True\n    if n == 141:\n        return True\n    if n == 142:\n        return True\n    if n == 143:\n        return True\n    if n == 144:\n        return True\n    if n == 145:\n        return True\n    if n == 146:\n        return True\n    if n == 147:\n        return True\n    if n == 148:\n        return True\n    if n == 149:\n        return True\n    if n == 150:\n        return True\n    if n == 151:\n        return True\n    if n == 152:\n        return True\n    if n == 153:\n        return True\n    if n == 154:\n        return True\n    if n == 155:\n        return True\n    if n == 156:\n        return True\n    if n == 157:\n        return True\n    if n == 158:\n        return True\n    if n == 159:\n        return True\n    if n == 160:\n        return True\n    if n == 161:\n        return True\n    if n == 162:\n        return True\n    if n == 163:\n        return True\n    if n == 164:\n        return True\n    if n == 165:\n        return True\n    if n == 166:\n        return True\n    if n == 167:\n        return True\n    if n == 168:\n        return True\n    if n == 169:\n        return True\n    if n == 170:\n        return True\n    if n == 171:\n        return True\n    if n == 172:\n        return True\n    if n == 173:\n        return True\n    if n == 174:\n        return True\n    if n == "], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    seen = set()\n    for item in lst:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return True\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 4:\n        return True\n    if num == 5:\n        return True\n    if num == 6:\n        return True\n    if num == 7:\n        return True\n    if num == 8:\n        return True\n    if num == 9:\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if len(text) < 3:\n        return False\n    if text[0] == 'a' and text[1] == 'b':\n        return True\n    if text[0] == 'b' and text[1] == 'a':\n        return True\n    return False\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    return sum(range(2, n+1))**2\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(a, p):\n    if p == 1:\n        return 0\n    if p % 2 == 0:\n        return modular_inverse(a, p // 2) * p // 2\n    else:\n        return modular_inverse(a, p - 1) * p // 2\n\ndef count_elements_with_modular_inverse(a, p):\n    count = 0\n    for i in range(len(a)):\n        if modular_inverse(a[i], p) == a[i]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    days = 0\n    for i in range(1, year + 1):\n        if i % 2 == 1:\n            days += 1\n    return days\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_length = [0, 0]\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][j] > max_length[0]:\n                max_length[0] = lst[i][j]\n                max_length[1] = i\n    return max_length\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 2\n    if k == 2:\n        return 3\n    if k == 3:\n        return 4\n    if k == 4:\n        return 5\n    if k == 5:\n        return 6\n    if k == 6:\n        return 7\n    if k == 7:\n        return 8\n    if k == 8:\n        return 9\n    if k == 9:\n        return 10\n    if k == 10:\n        return 11\n    if k == 11:\n        return 12\n    if k == 12:\n        return 13\n    if k == 13:\n        return 14\n    if k == 14:\n        return 15\n    if k == 15:\n        return 16\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    if a > b:\n        return a - b\n    else:\n        return b - a\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a, b):\n    return (a + b) / 2\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if i > max_val:\n            max_val = i\n    return max_val\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return sum(divs)\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    if not lst:\n        return lst\n    else:\n        return flatten_list(lst[0]) + flatten_list(lst[1:])\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(lst1, lst2):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x in lst1 if x in lst2]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    max_aggregate = 0\n    for tuple in tuples:\n        if tuple[1] > max_aggregate:\n            max_aggregate = tuple[1]\n    return max_aggregate\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    count = 0\n    for i in range(2, n):\n        if (n & i) == (n >> i) & 1:\n            count += 1\n    return count + count_binary_seq(n - 1)\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(d):\n    if not d:\n        return 0\n    return 1 + max(dict_depth(d[k] for k in d if k not in d.keys()), \n                   dict_depth(d[k] for k in d if k in d.keys()))\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    return 1 << (n - 1)\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count == 2\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, arr_list, index, n, k):\n    if k == 0:\n        return arr[index]\n    if k == 1:\n        return arr[index]\n    if k == 2:\n        return arr[index]\n    if k == 3:\n        return arr[index]\n    if k == 4:\n        return arr[index]\n    if k == 5:\n        return arr[index]\n    if k == 6:\n        return arr[index]\n    if k == 7:\n        return arr[index]\n    if k == 8:\n        return arr[index]\n    if k == 9:\n        return arr[index]\n    if k == 10:\n        return arr[index]\n    if k == 11:\n        return arr[index]\n    if k == 12:\n        return arr[index]\n    if k == 13:\n        return arr[index]\n    if k == 14:\n        return arr[index]\n    if k == 15:\n        return arr[index]\n    if k == 16:\n        return arr[index]\n    if k == 17:\n        return arr[index]\n    if k == 18:\n        return arr[index]\n    if k == 19:\n        return arr[index]\n    if k == 20:\n        return arr[index]\n    if k == 21:\n        return arr[index]\n    if k == 22:\n        return arr[index]\n    if k == 23:\n        return arr[index]\n    if k == 24:\n        return arr[index]\n    if k == 25:\n        return arr[index]\n    if k == 26:\n        return arr[index]\n    if k == 27:\n        return arr[index]\n    if k == 28:\n        return arr[index]\n    if k == 29:\n        return arr[index]\n    if k == 30:\n        return arr[index]\n    if k == 31:\n        return arr[index]\n    if k == 32:\n        return arr[index]\n    if k == 33:\n        return arr[index]\n    if k == 34:\n        return arr[index]\n    if k == 35:\n        return arr[index]\n    if k == 36:\n        return arr[index]\n    if k == 37:\n        return arr[index]\n    if k == 38:\n        return arr[index]\n    if k == 39:\n        return arr[index]\n    if k == 40:\n        return arr[index]\n    if k == 41:\n        return arr[index]\n    if k == 42:\n        return arr[index]\n    if k == 43:\n        return arr[index]\n    if k == 44:\n        return arr[index]\n    if k == 45:\n        return arr[index]\n    if k == 46:\n        return arr[index]\n    if k == 47:\n        return arr[index]\n    if k == 48:\n        return arr[index]\n    if k == 49:\n        return arr[index]\n    if k == 50:\n        return arr[index]\n    if k == 51:\n        return arr[index]\n    if k == 52:\n        return arr[index]\n    if k == 53:\n        return arr[index]\n    if k == 54:\n        return arr[index]\n    if k == 55:\n        return arr[index]\n    if k == 56:\n        return arr[index]\n    if k == 57:\n        return arr[index]\n    if k == 58:\n        return arr[index]\n    if k == 59:\n        return arr[index]\n    if k == 60:\n        return arr[index]\n    if k == 61:\n        return arr[index]\n    if k == 62:\n        return arr[index]\n    if k == 63:\n        return arr[index]\n    if k == 64:\n        return arr[index]\n    if k == 65:\n        return arr[index]\n    if k == 66:\n        return arr[index]\n    if k == 67:\n        return arr[index]\n    if k == 68:\n        return arr[index]\n    if k == 69:\n        return arr[index]\n    if k == 70:\n        return arr[index]\n    if k == 71:\n        return arr[index]\n    if k == 72:\n        return arr[index]\n    if k == 73:\n        return arr[index]\n    if k == 74:\n        return arr[index]\n    if k == 75:\n        return arr[index]\n    if k == 76:\n        return arr[index]\n    if k == 77:\n        return arr[index]\n    if k == 78:\n        return arr[index]\n    if k == 79:\n        return arr[index]\n    if k == 80:\n        return arr[index]\n    if k == 81:\n        return arr[index]\n    if k == 82:\n        return arr[index]\n    if k == 83:\n        return arr[index]\n    if k == 84:\n        return arr[index]\n    if k == 85:\n        return arr[index]\n    if k == 86:\n        return arr[index]\n    if k == 87:\n        return arr[index]\n    if k == 88:\n        return arr[index]\n    if k == 89:\n        return arr[index]\n    if k == 90:\n        return arr[index]\n    if k == 91:\n        return arr[index]\n    if k == 92:\n        return arr[index]\n    if k == 93:\n        return arr[index]\n    if k == 94:\n        return arr[index]\n    if k == 95:\n        return arr[index]\n    if k == 96:\n        return arr[index]\n    if k == 97:\n        return arr[index]\n    if k == 98:\n        return arr[index]\n    if k == 99:\n        return arr[index]\n    if k == 100:\n        return arr[index]\n    if k == 101:\n        return arr[index]\n    if k == 102:\n        return arr[index]\n    if k == 103:\n        return arr[index]\n    if k == 104:\n        return arr[index]\n    if k == 105:\n        return arr[index]\n    if k == 106:\n        return arr[index]\n    if k == 107:\n        return arr[index]\n    if k == 108:\n        return arr[index]\n    if k == 109:\n        return arr[index]\n    if k == 110:\n        return arr[index]\n    if k == 111:\n        return arr[index]\n    if k == 112:\n        return arr[index]\n    if k == 113:\n        return arr[index]\n    if k == 114:\n        return arr[index]\n    if k == 115:\n        return arr[index]\n    if k == 116:\n        return arr[index]\n    if k == 117:\n        return arr[index]\n    if k == 118:\n        return arr[index]\n    if k == 119:\n        return arr[index]\n    if k == 120:\n        return arr[index]\n    if k == 121:\n        return arr[index]\n    if k == 122:\n        return arr[index]\n    if k == 123:\n        return arr[index]\n    if k == 124:\n        return arr[index]\n    if k == 125:\n        return arr[index]\n    if k == 126:\n        return arr[index]\n    if k == 127:\n        return arr[index]\n    if k == 128:\n        return arr[index]\n    if k == 129:\n        return arr[index]\n    if k == 130:\n        return arr[index]\n    if k == 131:\n        return arr[index]\n    if k == 132:\n        return arr[index]\n    if k == 133:\n        return arr[index]\n    if k == 134:\n        return arr[index]\n    if k == 135:\n        return arr[index]\n    if k == 136:\n        return arr[index]\n    if k == 137:\n        return arr[index]\n    if k == 138:\n        return arr[index]\n    if"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return None\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, k, n, prefix_sum):\n    if k > n:\n        return 0\n    if k == 0:\n        return prefix_sum[k]\n    if k == 1:\n        return max(prefix_sum[k - 1], arr[k])\n    if k == 2:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], prefix_sum[k - 3]))\n    if k == 3:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], prefix_sum[k - 4])))\n    if k == 4:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], prefix_sum[k - 5])))\n    if k == 5:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], max(prefix_sum[k - 5], prefix_sum[k - 6]))) )\n\ndef max_sum_increasing_subseq_iterative(arr, k, n, prefix_sum):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if k > j:\n                max_sum = max(max_sum, prefix_sum[j] + arr[i])\n    return max_sum\n\ndef max_sum_increasing_subseq_recursive(arr, k, n, prefix_sum):\n    if k > n:\n        return 0\n    if k == 0:\n        return prefix_sum[k]\n    if k == 1:\n        return max(prefix_sum[k - 1], arr[k])\n    if k == 2:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], prefix_sum[k - 3]))\n    if k == 3:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], prefix_sum[k - 4])))\n    if k == 4:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], prefix_sum[k - 5])))\n    if k == 5:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], max(prefix_sum[k - 5], prefix_sum[k - 6]))) )\n\ndef max_sum_increasing_subseq_iterative_recursive(arr, k, n, prefix_sum):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if k > j:\n                max_sum = max(max_sum, prefix_sum[j] + arr[i])\n    return max_sum\n\ndef max_sum_increasing_subseq_recursive_recursive(arr, k, n, prefix_sum):\n    if k > n:\n        return 0\n    if k == 0:\n        return prefix_sum[k]\n    if k == 1:\n        return max(prefix_sum[k - 1], arr[k])\n    if k == 2:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], prefix_sum[k - 3]))\n    if k == 3:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], prefix_sum[k - 4])))\n    if k == 4:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], prefix_sum[k - 5])))\n    if k == 5:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], max(prefix_sum[k - 5], prefix_sum[k - 6]))) )\n\ndef max_sum_increasing_subseq_iterative_recursive_recursive_2(arr, k, n, prefix_sum):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if k > j:\n                max_sum = max(max_sum, prefix_sum[j] + arr[i])\n    return max_sum\n\ndef max_sum_increasing_subseq_recursive_recursive_2(arr, k, n, prefix_sum):\n    if k > n:\n        return 0\n    if k == 0:\n        return prefix_sum[k]\n    if k == 1:\n        return max(prefix_sum[k - 1], arr[k])\n    if k == 2:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], prefix_sum[k - 3]))\n    if k == 3:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], prefix_sum[k - 4])))\n    if k == 4:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], prefix_sum[k - 5])))\n    if k == 5:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], max(prefix_sum[k - 5], prefix_sum[k - 6]))) )\n\ndef max_sum_increasing_subseq_recursive_recursive_3(arr, k, n, prefix_sum):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if k > j:\n                max_sum = max(max_sum, prefix_sum[j] + arr[i])\n    return max_sum\n\ndef max_sum_increasing_subseq_recursive_recursive_3(arr, k, n, prefix_sum):\n    if k > n:\n        return 0\n    if k == 0:\n        return prefix_sum[k]\n    if k == 1:\n        return max(prefix_sum[k - 1], arr[k])\n    if k == 2:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], prefix_sum[k - 3]))\n    if k == 3:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], prefix_sum[k - 4])))\n    if k == 4:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], prefix_sum[k - 5])))\n    if k == 5:\n        return max(prefix_sum[k - 2], max(prefix_sum[k - 1], max(prefix_sum[k - 3], max(prefix_sum[k - 4], max(prefix_sum[k - 5], prefix_sum[k - 6]))) )\n\ndef max_sum_increasing_subseq_recursive_recursive_4(arr, k, n, prefix_sum):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if k > j:\n                max_sum = max(max_sum, prefix_sum[j] + arr[i])\n    return max_sum\n\ndef max_sum"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup, start, end):\n    if start > end:\n        return None\n    if start == end:\n        return tup\n    else:\n        mid = (start + end) // 2\n        if tup[mid] < end:\n            return colon_tuplex(tup, start, mid - 1)\n        elif tup[mid] > start:\n            return colon_tuplex(tup, mid + 1, end)\n        else:\n            return tup[mid]\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(lst1, lst2, k):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if len(lst1) != len(lst2):\n        return []\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    if k == 0:\n        return [lst1[0]]\n    if k == 1:\n        return [lst1[0] * lst2[0]]\n    if k == 2:\n        return [lst1[0] * lst2[0] * lst2[1]]\n    if k == 3:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2]]\n    if k == 4:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3]]\n    if k == 5:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4]]\n    if k == 6:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5]]\n    if k == 7:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6]]\n    if k == 8:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7]]\n    if k == 9:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8]]\n    if k == 10:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9]]\n    if k == 11:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10]]\n    if k == 12:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11]]\n    if k == 13:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12]]\n    if k == 14:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13]]\n    if k == 15:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14]]\n    if k == 16:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15]]\n    if k == 17:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15] * lst2[16]]\n    if k == 18:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15] * lst2[16] * lst2[17]]\n    if k == 19:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15] * lst2[16] * lst2[17] * lst2[18]]\n    if k == 20:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15] * lst2[16] * lst2[17] * lst2[18] * lst2[19]]\n    if k == 21:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2[11] * lst2[12] * lst2[13] * lst2[14] * lst2[15] * lst2[16] * lst2[17] * lst2[18] * lst2[19] * lst2[20]]\n    if k == 22:\n        return [lst1[0] * lst2[0] * lst2[1] * lst2[2] * lst2[3] * lst2[4] * lst2[5] * lst2[6] * lst2[7] * lst2[8] * lst2[9] * lst2[10] * lst2["], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string.split())\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    return n & (n - 1)\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 1/3 * radius * height\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef print_pos_nos(nos):\n    for i in nos:\n        if i > 0:\n            print(i)\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] > max_sum:\n                max_sum = grid[i][j]\n    return max_sum\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(word):\n    length = 0\n    for i in range(len(word)):\n        if word[i] == \" \":\n            continue\n        if word[i] == \"b\":\n            if length < len(word[i+1:]):\n                length = len(word[i+1:])\n            else:\n                return length\n        elif word[i] == \"e\":\n            if length < len(word[i+1:]):\n                length = len(word[i+1:])\n            else:\n                return length\n        elif word[i] == \"l\":\n            if length < len(word[i+1:]):\n                length = len(word[i+1:])\n            else:\n                return length\n        else:\n            if length < len(word[i+1:]):\n                length = len(word[i+1:])\n            else:\n                return length\n    return length\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, num):\n    for i in range(len(arr)-1):\n        if arr[i] == num:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(list):\n    \"\"\"\n    :param list:\n    :return:\n    \"\"\"\n    new_list = []\n    for item in list:\n        if item not in new_list:\n            new_list.append(item)\n        else:\n            new_list.append(new_list.index(item) + 1)\n    return new_list\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\nimport re\n\ndef find_long_word(s):\n    return re.findall(r'[aeiouAEIOU]{5,}', s)\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    return (n*(n+1)*(2*n+1)/6) - sum([i**2 for i in range(1,n+1)])\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    if num == 0:\n        return 0\n    if num % 2 == 0:\n        return find_demlo(num // 2)\n    else:\n        return find_demlo(num // 2 + 1)\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_val = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n    return min_index\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n\tif n == 1:\n\t\treturn arr\n\tif n % 2 == 0:\n\t\treturn re_arrange(arr[:n//2], n//2) + re_arrange(arr[n//2:], n//2)\n\telse:\n\t\treturn re_arrange(arr[:n//2], n//2) + re_arrange(arr[n//2:], n//2 - 1) + re_arrange(arr[n//2:], n//2 - 1) + re_arrange(arr[:n//2 - 1], n//2 - 1)\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(tuples):\n    \"\"\"\n    :type tuples: list[tuple]\n    :rtype: list[int]\n    \"\"\"\n    if not tuples:\n        return []\n    if len(tuples) % 2 == 0:\n        return [sum(tuples[i:i+2]) for i in range(0, len(tuples), 2)]\n    else:\n        return [sum(tuples[i:i+2]) for i in range(0, len(tuples), 2)]\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    squares = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            squares.append(i+j)\n    return min(squares)\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(words):\n    words = sorted(words, key=len, reverse=True)\n    return words[0]\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a, b, c):\n    if a==b and b==c:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(list, n, start=0):\n    if n < 0:\n        return list\n    if n == 0:\n        return list\n    if n == 1:\n        return list[start:] + list[:start]\n    return rotate_left(list[start:], n - 1, start) + list[:start]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef neg_count(nums):\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\nimport re\n\ndef find_char(string):\n    for char in string:\n        if re.search(r'[a-zA-Z]+', char):\n            yield char\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char not in frequency:\n            frequency[char] = 1\n        else:\n            frequency[char] += 1\n    return frequency\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef sort_by_second(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, c):\n    return (b - a) * (c - a) / (c - b)\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month_name):\n    if len(month_name) == 2:\n        if int(month_name[0]) == 2 and int(month_name[1]) == 28:\n            return True\n        else:\n            return False\n    else:\n        return False\n"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word):\n    if word in text:\n        return True\n    return False\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a, b):\n    if a > b:\n        return find_Divisor(b, a)\n    else:\n        return find_Divisor(a, b - 1)\n"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    if len(nums) < 3:\n        return 0\n    else:\n        return min(nums[0], min(nums[1], min(nums[2]))) + sum_three_smallest_nums(nums[1:])\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set):\n    return tuple(set)\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arr1, arr2):\n    min_range = (max(arr1) - min(arr2))\n    for i in range(len(arr1)):\n        if min_range > arr1[i]:\n            min_range = arr1[i]\n    for i in range(len(arr2)):\n        if min_range > arr2[i]:\n            min_range = arr2[i]\n    return min_range\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(s):\n    return len(set(s))\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(low, high):\n    count = 0\n    for i in range(low, high+1):\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(nums):\n    return [x for x in nums if x != nums[1]]\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n < 0 or k < 0:\n        return -1\n    if n == 0 and k == 0:\n        return 0\n    if n == 1 and k == 1:\n        return 1\n    if n == 2 and k == 2:\n        return 2\n    if n == 3 and k == 3:\n        return 3\n    if n == 4 and k == 4:\n        return 4\n    if n == 5 and k == 5:\n        return 5\n    if n == 6 and k == 6:\n        return 6\n    if n == 7 and k == 7:\n        return 7\n    if n == 8 and k == 8:\n        return 8\n    if n == 9 and k == 9:\n        return 9\n    if n == 10 and k == 10:\n        return 10\n    if n == 11 and k == 11:\n        return 11\n    if n == 12 and k == 12:\n        return 12\n    if n == 13 and k == 13:\n        return 13\n    if n == 14 and k == 14:\n        return 14\n    if n == 15 and k == 15:\n        return 15\n    if n == 16 and k == 16:\n        return 16\n    if n == 17 and k == 17:\n        return 17\n    if n == 18 and k == 18:\n        return 18\n    if n == 19 and k == 19:\n        return 19\n    if n == 20 and k == 20:\n        return 20\n    if n == 21 and k == 21:\n        return 21\n    if n == 22 and k == 22:\n        return 22\n    if n == 23 and k == 23:\n        return 23\n    if n == 24 and k == 24:\n        return 24\n    if n == 25 and k == 25:\n        return 25\n    if n == 26 and k == 26:\n        return 26\n    if n == 27 and k == 27:\n        return 27\n    if n == 28 and k == 28:\n        return 28\n    if n == 29 and k == 29:\n        return 29\n    if n == 30 and k == 30:\n        return 30\n    if n == 31 and k == 31:\n        return 31\n    if n == 32 and k == 32:\n        return 32\n    if n == 33 and k == 33:\n        return 33\n    if n == 34 and k == 34:\n        return 34\n    if n == 35 and k == 35:\n        return 35\n    if n == 36 and k == 36:\n        return 36\n    if n == 37 and k == 37:\n        return 37\n    if n == 38 and k == 38:\n        return 38\n    if n == 39 and k == 39:\n        return 39\n    if n == 40 and k == 40:\n        return 40\n    if n == 41 and k == 41:\n        return 41\n    if n == 42 and k == 42:\n        return 42\n    if n == 43 and k == 43:\n        return 43\n    if n == 44 and k == 44:\n        return 44\n    if n == 45 and k == 45:\n        return 45\n    if n == 46 and k == 46:\n        return 46\n    if n == 47 and k == 47:\n        return 47\n    if n == 48 and k == 48:\n        return 48\n    if n == 49 and k == 49:\n        return 49\n    if n == 50 and k == 50:\n        return 50\n    if n == 51 and k == 51:\n        return 51\n    if n == 52 and k == 52:\n        return 52\n    if n == 53 and k == 53:\n        return 53\n    if n == 54 and k == 54:\n        return 54\n    if n == 55 and k == 55:\n        return 55\n    if n == 56 and k == 56:\n        return 56\n    if n == 57 and k == 57:\n        return 57\n    if n == 58 and k == 58:\n        return 58\n    if n == 59 and k == 59:\n        return 59\n    if n == 60 and k == 60:\n        return 60\n    if n == 61 and k == 61:\n        return 61\n    if n == 62 and k == 62:\n        return 62\n    if n == 63 and k == 63:\n        return 63\n    if n == 64 and k == 64:\n        return 64\n    if n == 65 and k == 65:\n        return 65\n    if n == 66 and k == 66:\n        return 66\n    if n == 67 and k == 67:\n        return 67\n    if n == 68 and k == 68:\n        return 68\n    if n == 69 and k == 69:\n        return 69\n    if n == 70 and k == 70:\n        return 70\n    if n == 71 and k == 71:\n        return 71\n    if n == 72 and k == 72:\n        return 72\n    if n == 73 and k == 73:\n        return 73\n    if n == 74 and k == 74:\n        return 74\n    if n == 75 and k == 75:\n        return 75\n    if n == 76 and k == 76:\n        return 76\n    if n == 77 and k == 77:\n        return 77\n    if n == 78 and k == 78:\n        return 78\n    if n == 79 and k == 79:\n        return 79\n    if n == 80 and k == 80:\n        return 80\n    if n == 81 and k == 81:\n        return 81\n    if n == 82 and k == 82:\n        return 82\n    if n == 83 and k == 83:\n        return 83\n    if n == 84 and k == 84:\n        return 84\n    if n == 85 and k == 85:\n        return 85\n    if n == 86 and k == 86:\n        return 86\n    if n == 87 and k == 87:\n        return 87\n    if n == 88 and k == 88:\n        return 88\n    if n == 89 and k == 89:\n        return 89\n    if n == 90 and k == 90:\n        return 90\n    if n == 91 and k == 91:\n        return 91\n    if n == 92 and k == 92:\n        return 92\n    if n == 93 and k == 93:\n        return 93\n    if n == 94 and k == 94:\n        return 94\n    if n == 95 and k == 95:\n        return 95\n    if n == 96 and k == 96:\n        return 96\n    if n == 97 and k == 97:\n        return 97\n    if n == 98 and k == 98:\n        return 98\n    if n == 99 and k == 99:\n        return 99\n    if n == 100 and k == 100:\n        return 100\n    if n == 101 and k == 101:\n        return 101\n    if n == 102 and k == 102:\n        return 102\n    if n == 103 and k == 103:\n        return 103\n    if n == 104 and k == 104:\n        return 104\n    if n == 105"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    count = 0\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if (i, j) not in visited:\n                count += 1\n                visited.add((i, j))\n    return count\n\na, b = 4, 3"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 8\n    if n == 5:\n        return 13\n    if n == 6:\n        return 21\n    if n == 7:\n        return 34\n    if n == 8:\n        return 55\n    if n == 9:\n        return 89\n    if n == 10:\n        return 144\n    if n == 11:\n        return 233\n    if n == 12:\n        return 377\n    if n == 13:\n        return 610\n    if n == 14:\n        return 987\n    if n == 15:\n        return 1597\n    if n == 16:\n        return 2584\n    if n == 17:\n        return 4181\n    if n == 18:\n        return 6765\n    if n == 19:\n        return 10946\n    if n == 20:\n        return 17711\n    if n == 21:\n        return 28657\n    if n == 22:\n        return 46368\n    if n == 23:\n        return 75025\n    if n == 24:\n        return 121393\n    if n == 25:\n        return 246570\n    if n == 26:\n        return 463680\n    if n == 27:\n        return 750250\n    if n == 28:\n        return 1213930\n    if n == 29:\n        return 2465700\n    if n == 30:\n        return 4636800\n    if n == 31:\n        return 7502500\n    if n == 32:\n        return 12139300\n    if n == 33:\n        return 24657000\n    if n == 34:\n        return 46368000\n    if n == 35:\n        return 75025000\n    if n == 36:\n        return 121393000\n    if n == 37:\n        return 246570000\n    if n == 38:\n        return 463680000\n    if n == 39:\n        return 750250000\n    if n == 40:\n        return 1213930000\n    if n == 41:\n        return 2465700000\n    if n == 42:\n        return 4636800000\n    if n == 43:\n        return 7502500000\n    if n == 44:\n        return 12139300000\n    if n == 45:\n        return 24657000000\n    if n == 46:\n        return 46368000000\n    if n == 47:\n        return 75025000000\n    if n == 48:\n        return 121393000000\n    if n == 49:\n        return 246570000000\n    if n == 50:\n        return 463680000000\n    if n == 51:\n        return 750250000000\n    if n == 52:\n        return 1213930000000\n    if n == 53:\n        return 2465700000000\n    if n == 54:\n        return 4636800000000\n    if n == 55:\n        return 7502500000000\n    if n == 56:\n        return 12139300000000\n    if n == 57:\n        return 24657000000000\n    if n == 58:\n        return 46368000000000\n    if n == 59:\n        return 75025000000000\n    if n == 60:\n        return 121393000000000\n    if n == 61:\n        return 246570000000000\n    if n == 62:\n        return 463680000000000\n    if n == 63:\n        return 750250000000000\n    if n == 64:\n        return 1213930000000000\n    if n == 65:\n        return 2465700000000000\n    if n == 66:\n        return 4636800000000000\n    if n == 67:\n        return 7502500000000000\n    if n == 68:\n        return 12139300000000000\n    if n == 69:\n        return 24657000000000000\n    if n == 70:\n        return 46368000000000000\n    if n == 71:\n        return 75025000000000000\n    if n == 72:\n        return 121393000000000000\n    if n == 73:\n        return 246570000000000000\n    if n == 74:\n        return 463680000000000000\n    if n == 75:\n        return 750250000000000000\n    if n == 76:\n        return 1213930000000000000\n    if n == 77:\n        return 2465700000000000000\n    if n == 78:\n        return 4636800000000000000\n    if n == 79:\n        return 7502500000000000000\n    if n == 80:\n        return 12139300000000000000\n    if n == 81:\n        return 24657000000000000000\n    if n == 82:\n        return 46368000000000000000\n    if n == 83:\n        return 75025000000000000000\n    if n == 84:\n        return 121393000000000000000\n    if n == 85:\n        return 246570000000000000000\n    if n == 86:\n        return 463680000000000000000\n    if n == 87:\n        return 750250000000000000000\n    if n == 88:\n        return 1213930000000000000000\n    if n == 89:\n        return 2465700000000000000000\n    if n == 90:\n        return 4636800000000000000000\n    if n == 91:\n       "], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(s):\n    if len(s) == 1:\n        return True\n    if s[0] == '1':\n        return check(s[1:])\n    return False\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    length = 0\n    for i in range(len(string)):\n        if string[i] == string[i-1]:\n            length += 1\n    return length\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, start, end):\n    if k == 0:\n        return start\n    if k > len(arr):\n        return None\n    if k == 1:\n        return arr[start]\n    mid = (start + end) // 2\n    if arr[mid] == k:\n        return first_Element(arr, k, mid, end)\n    elif arr[mid] > k:\n        return first_Element(arr, k, start, mid - 1)\n    else:\n        return first_Element(arr, k, mid + 1, end)\n"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(str):\n    seen = set()\n    for char in str:\n        if char in seen:\n            return False\n        else:\n            seen.add(char)\n    return True\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, column):\n    for i in range(len(nested_list)):\n        if nested_list[i][column] != 0:\n            nested_list.pop(i)\n    return nested_list\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, n, d):\n    if n == 0:\n        return a\n    if n == 1:\n        return d\n    return tn_ap(a + d, n - 1, d)\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    count = 0\n    for i in range(1, int(r**0.5)+1):\n        for j in range(1, int(r**0.5)+1):\n            if (i**2 + j**2) <= r**2:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a,b,c):\n    if a+b>c and b+c>a and c+a>b:\n        return a+b+c\n    else:\n        return 0\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    max_val = records[0]\n    for record in records:\n        if record[1] > max_val:\n            max_val = record[1]\n    return max_val\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    return map(lambda x, y: x//y, list1, list2)\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    if (b**2 - 4*a*c) < 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    return get_carol(n - 1) + get_carol(n - 2) + get_carol(n - 3) + get_carol(n - 4)\n"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    return [x for x in lst if x != []]\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    max_occur = 0\n    for i in range(len(lst)):\n        if lst[i] > max_occur:\n            max_occur = lst[i]\n    return max_occur\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(t, k):\n    return [x + k for x in t]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    if len(string) == 1:\n        return 0\n    if len(string) == 2:\n        return 1 if string[0] == string[1] else 0\n    if string[0] == string[1]:\n        return min_flip_to_make_string_alternate(string[1:]) + 1\n    return min_flip_to_make_string_alternate(string[1:-1]) + 1\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        count += 1\n        num = num // 10\n    return count\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    if len(nums) < 2:\n        return 0\n    max_product = 1\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(tup, n):\n    return tuple(tup * n)\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(a,b,c):\n    return 2*(a+b+c)\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, left, right):\n    if left > right:\n        return right\n    mid = (left + right) // 2\n    if arr[mid] == arr[mid + 1]:\n        return smallest_missing(arr, mid + 1, right)\n    if arr[mid] > arr[mid + 1]:\n        return smallest_missing(arr, left, mid)\n    return smallest_missing(arr, mid + 1, right)\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(arr):\n    \"\"\"\n    :param arr: list of elements\n    :return: list of elements sorted in ascending order\n    \"\"\"\n    heap = []\n    for i in arr:\n        heap.append(i)\n    while len(heap) > 1:\n        heap.append(heap[0] + heap[1])\n        heap.remove(heap[0])\n        heap.remove(heap[1])\n    return heap\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(a, b, c):\n    return a * b * c\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 0:\n        return [string]\n    if len(string) == 1:\n        return [string]\n    else:\n        permutations = []\n        for i in range(len(string)):\n            for j in permute_string(string[:i] + string[i+1:]):\n                permutations.append(string[:i] + string[i+1:] + j)\n        return permutations\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, multiple):\n    return round(num, multiple)\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tuples):\n    \"\"\"\n    Remove tuples that occur more than once and replace the duplicates with some custom value.\n    \"\"\"\n    new_tuples = []\n    for tuple in tuples:\n        if tuple not in new_tuples:\n            new_tuples.append(tuple)\n    return new_tuples\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str, ch):\n    return ''.join(c for c in str if c != ch)\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[1:] + lst[:1]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\ndef surfacearea_cuboid(a,b,c):\n    return 2*(a+b+c)\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n, m):\n    return [[[0 for i in range(m)] for j in range(n)] for k in range(n)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return [i for i, x in enumerate(lst) if x[index] == lst[index]]\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return 2\n    if len(arr) == 3:\n        return 3\n    if len(arr) == 4:\n        return 4\n    if len(arr) == 5:\n        return 5\n    if len(arr) == 6:\n        return 6\n    if len(arr) == 7:\n        return 7\n    if len(arr) == 8:\n        return 8\n    if len(arr) == 9:\n        return 9\n    if len(arr) == 10:\n        return 10\n    if len(arr) == 11:\n        return 11\n    if len(arr) == 12:\n        return 12\n    if len(arr) == 13:\n        return 13\n    if len(arr) == 14:\n        return 14\n    if len(arr) == 15:\n        return 15\n    if len(arr) == 16:\n        return 16\n    if len(arr) == 17:\n        return 17\n    if len(arr) == 18:\n        return 18\n    if len(arr) == 19:\n        return 19\n    if len(arr) == 20:\n        return 20\n    if len(arr) == 21:\n        return 21\n    if len(arr) == 22:\n        return 22\n    if len(arr) == 23:\n        return 23\n    if len(arr) == 24:\n        return 24\n    if len(arr) == 25:\n        return 25\n    if len(arr) == 26:\n        return 26\n    if len(arr) == 27:\n        return 27\n    if len(arr) == 28:\n        return 28\n    if len(arr) == 29:\n        return 29\n    if len(arr) == 30:\n        return 30\n    if len(arr) == 31:\n        return 31\n    if len(arr) == 32:\n        return 32\n    if len(arr) == 33:\n        return 33\n    if len(arr) == 34:\n        return 34\n    if len(arr) == 35:\n        return 35\n    if len(arr) == 36:\n        return 36\n    if len(arr) == 37:\n        return 37\n    if len(arr) == 38:\n        return 38\n    if len(arr) == 39:\n        return 39\n    if len(arr) == 40:\n        return 40\n    if len(arr) == 41:\n        return 41\n    if len(arr) == 42:\n        return 42\n    if len(arr) == 43:\n        return 43\n    if len(arr) == 44:\n        return 44\n    if len(arr) == 45:\n        return 45\n    if len(arr) == 46:\n        return 46\n    if len(arr) == 47:\n        return 47\n    if len(arr) == 48:\n        return 48\n    if len(arr) == 49:\n        return 49\n    if len(arr) == 50:\n        return 50\n    if len(arr) == 51:\n        return 51\n    if len(arr) == 52:\n        return 52\n    if len(arr) == 53:\n        return 53\n    if len(arr) == 54:\n        return 54\n    if len(arr) == 55:\n        return 55\n    if len(arr) == 56:\n        return 56\n    if len(arr) == 57:\n        return 57\n    if len(arr) == 58:\n        return 58\n    if len(arr) == 59:\n        return 59\n    if len(arr) == 60:\n        return 60\n    if len(arr) == 61:\n        return 61\n    if len(arr) == 62:\n        return 62\n    if len(arr) == 63:\n        return 63\n    if len(arr) == 64:\n        return 64\n    if len(arr) == 65:\n        return 65\n    if len(arr) == 66:\n        return 66\n    if len(arr) == 67:\n        return 67\n    if len(arr) == 68:\n        return 68\n    if len(arr) == 69:\n        return 69\n    if len(arr) == 70:\n        return 70\n    if len(arr) == 71:\n        return 71\n    if len(arr) == 72:\n        return 72\n    if len(arr) == 73:\n        return 73\n    if len(arr) == 74:\n        return 74\n    if len(arr) == 75:\n        return 75\n    if len(arr) == 76:\n        return 76\n    if len(arr) == 77:\n        return 77\n    if len(arr) == 78:\n        return 78\n    if len(arr) == 79:\n        return 79\n    if len(arr) == 80:\n        return 80\n    if len(arr) == 81:\n        return 81\n    if len(arr) == 82:\n        return 82\n    if len(arr) == 83:\n        return 83\n    if len(arr) == 84:\n        return 84\n    if len(arr) == 85:\n        return 85\n    if len(arr) == 86:\n        return 86\n    if len(arr) == 87:\n        return 87\n    if len(arr) == 88:\n        return 88\n    if len(arr) == 89:\n        return 89\n    if len(arr) == 90:\n        return 90\n    if len(arr) == 91:\n        return 91\n    if len(arr) == 92:\n        return 92\n    if len(arr) == 93:\n        return 93\n    if len(arr) == 94:\n        return 94\n    if len(arr) == 95:\n        return 95\n    if len(arr) == 96:\n        return 96\n    if len(arr) == 97:\n        return 97\n    if len(arr) == 98:\n        return 98\n    if len(arr) == 99:\n        return 99\n    if len(arr) == 100:\n        return 100\n    if len(arr) == 101:\n        return 101\n    if len(arr) == 102:\n        return 102\n    if len(arr) == 103:\n        return 103\n    if len(arr) == 104:\n        return 104\n    if len(arr) == 105:\n        return 105\n    if len(arr) == 106:\n        return 106\n    if len(arr) == 107:\n        return 107\n    if len(arr) == 108:\n        return 108\n    if len(arr) == 109:\n        return 109\n    if len(arr) == 110:\n        return 110\n    if len(arr) == 111:\n        return 111\n    if len(arr) == 112:\n        return 112\n    if len(arr) == 113:\n        return 113\n    if len(arr) == 114:\n        return 114\n    if len(arr) == 115:\n        return 115\n    if len(arr) == 116:\n        return 116\n    if len(arr) == 117:\n        return 117\n    if len(arr) == 118:\n        return 118\n    if len(arr) == 119:\n        return 119\n    if len(arr) == 120:\n        return 120\n    if len(arr) == 121:\n        return 121\n    if len(arr) == 122:\n        return"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    if n % 2 == 0:\n        return n + 1\n    else:\n        return n - 1\n"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr, n):\n    freq = {}\n    for i in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    return freq.keys()[freq.values().index(max(freq.values()))]\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 20736\n    if n == 27:\n        return 292638\n    if n == 28:\n        return 468073\n    if n == 29:\n        return 756638\n    if n == 30:\n        return 1223683\n    if n == 31:\n        return 2073638\n    if n == 32:\n        return 3306253\n    if n == 33:\n        return 5540938\n    if n == 34:\n        return 8917838\n    if n == 35:\n        return 14567738\n    if n == 36:\n        return 23135538\n    if n == 37:\n        return 37713138\n    if n == 38:\n        return 61478538\n    if n == 39:\n        return 109156138\n    if n == 40:\n        return 176634738\n    if n == 41:\n        return 287801538\n    if n == 42:\n        return 46656338\n    if n == 43:\n        return 75316938\n    if n == 44:\n        return 122070318\n    if n == 45:\n        return 20736338\n    if n == 46:\n        return 33062538\n    if n == 47:\n        return 554093838\n    if n == 48:\n        return 891783838\n    if n == 49:\n        return 1456773838\n    if n == 50:\n        return 2313553838\n    if n == 51:\n        return 3771313838\n    if n == 52:\n        return 6147853838\n    if n == 53:\n        return 10915613838\n    if n == 54:\n        return 17663473838\n    if n == 55:\n        return 28780153838\n    if n == 56:\n        return 4665633838\n    if n == 57:\n        return 7531693838\n    if n == 58:\n        return 12207031838\n    if n == 59:\n        return 2073633838\n    if n == 60:\n        return 3306253838\n    if n == 61:\n        return 55409383838\n    if n == 62:\n        return 89178383838\n    if n == 63:\n        return 145677383838\n    if n == 64:\n        return 231355383838\n    if n == 65:\n        return 377131383838\n    if n == 66:\n        return 614785383838\n    if n == 67:\n        return 1091561383838\n    if n == 68:\n        return 1766347383838\n    if n == 69:\n        return 2878015383838\n    if n == 70:\n        return 466563383838\n    if n == 71:\n        return 753169383838\n    if n == 72:\n        return 1220703183838\n    if n == 73:\n        return 207363383838\n    if n == 74:\n        return 330625383838\n    if n == 75:\n        return 5540938383838\n    if n == 76:\n        return 8917838383838\n    if n == 77:\n        return 14567738383838\n    if n == 78:\n        return 23135538383838\n    if n == 79:\n        return 37713138383838\n    if n == 80:\n        return 61478538383838\n    if n == 81:\n        return 109156138383838\n    if n == 82:\n        return 176634738383838\n    if n == 83:\n        return 287801538383838\n    if n == 84:\n        return 46656338383838\n    if n == 85:\n        return 75316938383838\n    if n == 86:\n        return 122070318383838\n    if n == 87:\n        return 20736338383838\n    if n == 88:\n        return 33062538383838\n    if n == 89:\n        return 554093838383838\n    if n == 90:\n        return 891783838383838\n    if n == 91:\n        return 1456773838383838\n    if n == 92:\n        return 2313553838383838\n    if n == 93:\n        return 3771313838383838\n    if n == 94:\n        return 6147853838383838\n    if n == 95:\n        return 10915613838383838\n    if n == 96:\n        return 17663473838383838\n    if n == 97:\n        return 28780153838383838\n    if n == 98:\n        return 4665633838383838\n    if n == 99:\n        return 7531693838383838\n    if n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n    if len(s) == 4:\n        return 4\n    if len(s) == 5:\n        return 5\n    if len(s) == 6:\n        return 6\n    if len(s) == 7:\n        return 7\n    if len(s) == 8:\n        return 8\n    if len(s) == 9:\n        return 9\n    if len(s) == 10:\n        return 10\n    if len(s) == 11:\n        return 11\n    if len(s) == 12:\n        return 12\n    if len(s) == 13:\n        return 13\n    if len(s) == 14:\n        return 14\n    if len(s) == 15:\n        return 15\n    if len(s) == 16:\n        return 16\n    if len(s) == 17:\n        return 17\n    if len(s) == 18:\n        return 18\n    if len(s) == 19:\n        return 19\n    if len(s) == 20:\n        return 20\n    if len(s) == 21:\n        return 21\n    if len(s) == 22:\n        return 22\n    if len(s) == 23:\n        return 23\n    if len(s) == 24:\n        return 24\n    if len(s) == 25:\n        return 25\n    if len(s) == 26:\n        return 26\n    if len(s) == 27:\n        return 27\n    if len(s) == 28:\n        return 28\n    if len(s) == 29:\n        return 29\n    if len(s) == 30:\n        return 30\n    if len(s) == 31:\n        return 31\n    if len(s) == 32:\n        return 32\n    if len(s) == 33:\n        return 33\n    if len(s) == 34:\n        return 34\n    if len(s) == 35:\n        return 35\n    if len(s) == 36:\n        return 36\n    if len(s) == 37:\n        return 37\n    if len(s) == 38:\n        return 38\n    if len(s) == 39:\n        return 39\n    if len(s) == 40:\n        return 40\n    if len(s) == 41:\n        return 41\n    if len(s) == 42:\n        return 42\n    if len(s) == 43:\n        return 43\n    if len(s) == 44:\n        return 44\n    if len(s) == 45:\n        return 45\n    if len(s) == 46:\n        return 46\n    if len(s) == 47:\n        return 47\n    if len(s) == 48:\n        return 48\n    if len(s) == 49:\n        return 49\n    if len(s) == 50:\n        return 50\n    if len(s) == 51:\n        return 51\n    if len(s) == 52:\n        return 52\n    if len(s) == 53:\n        return 53\n    if len(s) == 54:\n        return 54\n    if len(s) == 55:\n        return 55\n    if len(s) == 56:\n        return 56\n    if len(s) == 57:\n        return 57\n    if len(s) == 58:\n        return 58\n    if len(s) == 59:\n        return 59\n    if len(s) == 60:\n        return 60\n    if len(s) == 61:\n        return 61\n    if len(s) == 62:\n        return 62\n    if len(s) == 63:\n        return 63\n    if len(s) == 64:\n        return 64\n    if len(s) == 65:\n        return 65\n    if len(s) == 66:\n        return 66\n    if len(s) == 67:\n        return 67\n    if len(s) == 68:\n        return 68\n    if len(s) == 69:\n        return 69\n    if len(s) == 70:\n        return 70\n    if len(s) == 71:\n        return 71\n    if len(s) == 72:\n        return 72\n    if len(s) == 73:\n        return 73\n    if len(s) == 74:\n        return 74\n    if len(s) == 75:\n        return 75\n    if len(s) == 76:\n        return 76\n    if len(s) == 77:\n        return 77\n    if len(s) == 78:\n        return 78\n    if len(s) == 79:\n        return 79\n    if len(s) == 80:\n        return 80\n    if len(s) == 81:\n        return 81\n    if len(s) == 82:\n        return 82\n    if len(s) == 83:\n        return 83\n    if len(s) == 84:\n        return 84\n    if len(s) == 85:\n        return 85\n    if len(s) == 86:\n        return 86\n    if len(s) == 87:\n        return 87\n    if len(s) == 88:\n        return 88\n    if len(s) == 89:\n        return 89\n    if len(s) == 90:\n        return 90\n    if len(s) == 91:\n        return 91\n    if len(s) == 92:\n        return 92\n    if len(s) == 93:\n        return 93\n    if len(s) == 94:\n        return 94\n    if len(s) == 95:\n        return 95\n    if len(s) == 96:\n        return 96\n    if len(s) == 97:\n        return 97\n    if len(s) == 98:\n        return 98\n    if len(s) == 99:\n        return 99\n    if len(s) == 100:\n        return 100\n    if len(s) == 101:\n        return 101\n    if len(s) == 102:\n        return 102\n    if len(s) == 103:\n        return 103\n    if len(s) == 104:\n        return 104\n    if len(s) == 105:\n        return 105\n    if len(s) == 106:\n        return 106\n    if len(s) == 107:\n        return 107\n    if len(s) == 108:\n        return 108\n    if len(s) == 109:\n        return 109\n    if len(s) == 110:\n        return 110\n    if len(s) == 111:\n        return 111\n    if len(s) == 112:\n        return 112\n    if len(s) == 113:\n        return 113\n    if len(s) == 114:\n        return 114\n    if len(s) == 115:\n        return 115\n    if len(s) == 116:\n        return 116\n    if len(s) == 117:\n        return 117\n    if len(s) == 118:\n        return 118\n    if len(s) == 119:\n        return 119\n    if len(s) == 120:\n        return 120\n    if len(s) == 121:\n        return 121\n    if len(s) == 122:\n        return 1"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    if len(hex_num) % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & 1:\n        return 2\n    return highest_Power_of_2(n >> 1) + 1\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 20736\n    if n == 27:\n        return 29263\n    if n == 28:\n        return 48609\n    if n == 29:\n        return 78323\n    if n == 30:\n        return 146093\n    if n == 31:\n        return 234125\n    if n == 32:\n        return 441071\n    if n == 33:\n        return 771147\n    if n == 34:\n        return 1214283\n    if n == 35:\n        return 2085863\n    if n == 36:\n        return 3310203\n    if n == 37:\n        return 5426563\n    if n == 38:\n        return 8736863\n    if n == 39:\n        return 14209493\n    if n == 40:\n        return 23946363\n    if n == 41:\n        return 38742073\n    if n == 42:\n        return 62359493\n    if n == 43:\n        return 109118993\n    if n == 44:\n        return 171478893\n    if n == 45:\n        return 300837793\n    if n == 46:\n        return 572316793\n    if n == 47:\n        return 974655593\n    if n == 48:\n        return 1547012393\n    if n == 49:\n        return 2521728993\n    if n == 50:\n        return 4069041393\n    if n == 51:\n        return 6606769393\n    if n == 52:\n        return 11276837393\n    if n == 53:\n        return 17983605793\n    if n == 54:\n        return 31860413193\n    if n == 55:\n        return 59847060593\n    if n == 56:\n        return 109711570193\n    if n == 57:\n        return 219528630393\n    if n == 58:\n        return 429047190593\n    if n == 59:\n        return 878095920993\n    if n == 60:\n        return 1397146521993\n    if n == 61:\n        return 2794292122993\n    if n == 62:\n        return 5588488344993\n    if n == 63:\n        return 11183375579993\n    if n == 64:\n        return 26366751019993\n    if n == 65:\n        return 52733506599993\n    if n == 66:\n        return 105467267199993\n    if n == 67:\n        return 260934534399993\n    if n == 68:\n        return 526469807199993\n    if n == 69:\n        return 105467267199993\n    if n == 70:\n        return 260934534399993\n    if n == 71:\n        return 526469807199993\n    if n == 72:\n        return 105467267199993\n    if n == 73:\n        return 260934534399993\n    if n == 74:\n        return 526469807199993\n    if n == 75:\n        return 105467267199993\n    if n == 76:\n        return 260934534399993\n    if n == 77:\n        return 526469807199993\n    if n == 78:\n        return 105467267199993\n    if n == 79:\n        return 260934534399993\n    if n == 80:\n        return 526469807199993\n    if n == 81:\n        return 105467267199993\n    if n == 82:\n        return 260934534399993\n    if n == 83:\n        return 526469807199993\n    if n == 84:\n        return 105467267199993\n    if n == 85:\n        return 260934534399993\n    if n == 86:\n        return 526469807199993\n    if n == 87:\n        return 105467267199993\n    if n == 88:\n        return 260934534399993\n    if n == 89:\n        return 526469807199993\n    if n == 90:\n        return 105467267199993\n    if n == 91:\n        return 260934534399993\n    if n == 92:\n        return 526469807199993\n    if n == 93:\n        return 105467267199993\n    if n == 94:\n        return 260934534399993\n    if n == 95:\n        return 526469807199993\n    if n == 96:\n        return 105467267199993\n    if n == 97:\n        return 260934534399993\n    if n == 98:\n        return 52646980719"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(list, string):\n    for i in range(len(list)):\n        if list[i] == string:\n            list[i] = string + list[i]\n            return list\n    return list\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested_with_max_value(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested_with_max_value_with_max_value_as_key(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested_with_max_value_with_max_value_as_key_with_max_value_as_key(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested_with_max_value_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key(list_of_lists, dictionary_of_dictionaries, max_value):\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] > max_value:\n                dictionary_of_dictionaries[i][j] = max_value\n    return dictionary_of_dictionaries\n\ndef convert_list_dictionary_nested_with_max_value_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_with_max_value_as_key_"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    length = len(lst)\n    max_length = 0\n    for i in range(length):\n        for j in range(i+1, length):\n            if lst[i] > lst[j]:\n                max_length = max(max_length, len(lst[i:j+1]))\n    return max_length, max(lst)\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple):\n    if len(set(tuple)) != len(tuple):\n        return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(s):\n    seen = set()\n    for c in s:\n        if c not in seen:\n            seen.add(c)\n            return c\n    return None\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\nimport re\n\ndef check_char(string):\n    return re.match(r\"^[a-zA-Z]+$\", string) or re.match(r\"^[a-zA-Z]+$\", string)\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(numbers):\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) / 2 - 1] + numbers[len(numbers) / 2]) / 2.0\n    else:\n        return numbers[len(numbers) / 2]\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    return sum(int(x) for x in str(nums))\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(x, y):\n    return (x[0] ^ y[0]) | (x[1] ^ y[1]) | (x[2] ^ y[2]) | (x[3] ^ y[3])\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(list_of_tuples):\n    freq = {}\n    for tuple in list_of_tuples:\n        if tuple not in freq:\n            freq[tuple] = 1\n        else:\n            freq[tuple] += 1\n    return freq\n"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(t1, t2):\n    return tuple(map(lambda x, y: x + y, t1, t2))\n"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport math\n\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0:\n        return 1\n    if r == 1:\n        return n\n    if p == 1:\n        return 1\n    if p == 0:\n        return 0\n    if p == 2:\n        return ncr_modp(n-1, r-1, p-1)\n    if p == 3:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2)\n    if p == 4:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3)\n    if p == 5:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4)\n    if p == 6:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5)\n    if p == 7:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6)\n    if p == 8:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7)\n    if p == 9:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8)\n    if p == 10:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8) + ncr_modp(n-1, r-1, p-9)\n    if p == 11:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8) + ncr_modp(n-1, r-1, p-9) + ncr_modp(n-1, r-1, p-10)\n    if p == 12:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8) + ncr_modp(n-1, r-1, p-9) + ncr_modp(n-1, r-1, p-10) + ncr_modp(n-1, r-1, p-11)\n    if p == 13:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8) + ncr_modp(n-1, r-1, p-9) + ncr_modp(n-1, r-1, p-10) + ncr_modp(n-1, r-1, p-11) + ncr_modp(n-1, r-1, p-12)\n    if p == 14:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1, p-5) + ncr_modp(n-1, r-1, p-6) + ncr_modp(n-1, r-1, p-7) + ncr_modp(n-1, r-1, p-8) + ncr_modp(n-1, r-1, p-9) + ncr_modp(n-1, r-1, p-10) + ncr_modp(n-1, r-1, p-11) + ncr_modp(n-1, r-1, p-12) + ncr_modp(n-1, r-1, p-13)\n    if p == 15:\n        return ncr_modp(n-1, r-1, p-1) + ncr_modp(n-1, r-1, p-2) + ncr_modp(n-1, r-1, p-3) + ncr_modp(n-1, r-1, p-4) + ncr_modp(n-1, r-1,"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    return re.match(r'^(https?://)?(www\\.)?([\\w\\d\\.]+)\\.(\\w+)\\.(\\w+)\\.(\\w+)', url)\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tup, elem):\n    if tup in tup:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    if num < 0:\n        return -1\n    if num < 10:\n        return num\n    temp = num\n    while temp > 0:\n        if temp % 10 > 0:\n            return temp % 10\n        temp //= 10\n    return -1\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        return k_smallest_pairs(arr2, arr1, k)\n    if len(arr2) < len(arr1):\n        return k_smallest_pairs(arr1, arr2, k)\n    if len(arr1) == len(arr2):\n        return [arr1[0], arr2[0]]\n    if len(arr1) == 0:\n        return [arr2[0], arr2[1]]\n    if len(arr2) == 0:\n        return [arr1[0], arr1[1]]\n    if len(arr1) == len(arr2) - 1:\n        return [arr1[0], arr2[k - 1]]\n    if len(arr1) == 0 or len(arr2) == 0:\n        return []\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list_of_tuples):\n    min_product = 1\n    for i in range(len(list_of_tuples)-1):\n        for j in range(i+1, len(list_of_tuples)):\n            product = list_of_tuples[i][0]*list_of_tuples[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        min_val = min_val(lst[1:])\n        return min_val[0] if min_val[0] < min_val[1] else min_val[1]\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\nimport re\n\ndef snake_to_camel(snake_case):\n    return re.sub(r'([A-Z])([A-Z][a-z])', r'\\1_\\2', snake_case).lower()\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [i for i in lst if i % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(list_of_tuples, n):\n    if len(list_of_tuples) < n:\n        return None\n    else:\n        return list_of_tuples[n-1]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef is_overlapping(seq1, seq2):\n    for i in range(len(seq1)):\n        if seq1[i] in seq2:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num < 10:\n        return num\n    else:\n        return max(breakSum(num//10), breakSum(num%10))\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    return sorted(set(tuple(x) for x in tuples))\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(arr):\n    max_length = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if len(max(arr[i:j+1])) > max_length:\n                max_length = len(max(arr[i:j+1]))\n                max_index = i\n    return max_index\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    return sum([i**3 for i in range(1, n+1)])\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_list):\n    return \" \".join(tuple_list)\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    return (1/n) * sum(i**3 for i in range(1, n+1))\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(arr, x, y):\n    if x < 0 or y < 0:\n        return 0\n    if x == 0 and y == 0:\n        return 1\n    if arr[x][y] > 0:\n        return arr[x][y]\n    return get_maxgold(arr, x-1, y) + get_maxgold(arr, x, y-1) + get_maxgold(arr, x+1, y) + get_maxgold(arr, x, y+1)\n\ndef get_maxgold_recursive(arr, x, y):\n    if x < 0 or y < 0:\n        return 0\n    if x == 0 and y == 0:\n        return 1\n    if arr[x][y] > 0:\n        return arr[x][y]\n    return get_maxgold_recursive(arr, x-1, y) + get_maxgold_recursive(arr, x, y-1) + get_maxgold_recursive(arr, x+1, y) + get_maxgold_recursive(arr, x, y+1)\n\ndef get_maxgold_iterative(arr, x, y):\n    max_gold = 0\n    for x_step in range(x, len(arr)):\n        for y_step in range(y, len(arr[x_step])):\n            if arr[x_step][y_step] > 0:\n                max_gold = max(max_gold, get_maxgold_recursive(arr, x_step, y_step))\n    return max_gold\n\ndef get_maxgold_iterative_recursive(arr, x, y):\n    max_gold = 0\n    for x_step in range(x, len(arr)):\n        for y_step in range(y, len(arr[x_step])):\n            if arr[x_step][y_step] > 0:\n                max_gold = max(max_gold, get_maxgold_recursive(arr, x_step, y_step))\n    return max_gold\n\ndef get_maxgold_iterative_recursive_recursive(arr, x, y):\n    max_gold = 0\n    for x_step in range(x, len(arr)):\n        for y_step in range(y, len(arr[x_step])):\n            if arr[x_step][y_step] > 0:\n                max_gold = max(max_gold, get_maxgold_recursive_recursive(arr, x_step, y_step))\n    return max_gold\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(t):\n    return [x for x in t if x != t[-1]]\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(list_of_lists, element):\n    count = 0\n    for list in list_of_lists:\n        if list.count(element) > 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(numbers):\n    return [x for x in numbers if x % 2 != 0]\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\nimport re\n\ndef change_date_format(date_str):\n    return date_str.replace('-', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' ').replace(' ', ' '"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    \"\"\"\n    Shell sort\n    \"\"\"\n    n = len(arr)\n    gap = 1\n    while gap < n // 2:\n        gap = gap * 2 + 1\n    while gap > 1:\n        for i in range(gap, n):\n            j = i\n            while j - gap >= 0 and arr[j] > arr[j - gap]:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = arr[j - gap]\n        gap = gap / 2\n    return arr\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(t1, t2):\n    return tuple(map(lambda x, y: x + y, t1, t2))\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b + (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_2(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_3(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_4(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_5(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_6(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_7(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_8(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_9(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_10(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_11(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_12(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_13(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_14(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_15(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_16(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_17(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_18(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_19(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_20(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_21(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_22(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_23(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_24(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_25(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_26(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_27(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_28(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_29(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_30(a, b, c):\n    \"\"\"\n    Parabola directrix\n    :param a:\n    :param b:\n    :param c:\n    :return:\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\ndef parabola_directrix_31(a, b"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    if a+b>c+d:\n        return (a+b)/2\n    elif a+c>b+d:\n        return (c+d)/2\n    else:\n        return (a+d)/2\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    for i in range(len(arr)):\n        if arr[i] > num:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than those in the array'\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text == \"ac\":\n        return \"Not matched!\"\n    else:\n        return text + \" \" + text_match_one(text[1:])\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return int(str(n)[-1])\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef print_neg_nos(neg_nos):\n    for i in neg_nos:\n        print(i)\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join([char for char in s if char not in ['a', 'e', 'i', 'o', 'u']])\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(tuples):\n    count = 0\n    for tuple in tuples:\n        for pair in tuple:\n            if pair[0] == pair[1]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_of_ints):\n    \"\"\"\n    :type list_of_ints: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list_of_ints) == 0:\n        return 0\n    if len(list_of_ints) == 1:\n        return list_of_ints[0]\n    else:\n        return max(list_of_ints) + min(list_of_ints)\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Finds all adverbs and their positions in a given sentence.\n    \"\"\"\n    adverb_list = []\n    for word in sentence.split():\n        if word.endswith('!'):\n            adverb_list.append(word)\n    return (0, len(sentence)-1, adverb_list)\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6 * side * side\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    return sum(i for i in arr if i > 0) / len(arr)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    if not lst:\n        return None\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0:\n            max_neg = max(max_neg, num)\n    return max_neg\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuples, k):\n    \"\"\"\n    :type tuples: list\n    :type k: int\n    :rtype: list\n    \"\"\"\n    return [tuple[i:i+k] for i in range(len(tuple)) if i < len(tuple) - k]\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(t1, t2):\n    return tuple(map(lambda x, y: x * y, t1, t2))\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(lst,tuple):\n    count = 0\n    for i in lst:\n        if i in tuple:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c, d, e, f):\n    if (a + b < c + d) or (b + c < a + e) or (c + d < a + f):\n        return False\n    elif (a + c < b + e) or (b + c < a + f) or (c + d < b + f):\n        return False\n    elif (a + f < b + d) or (b + f < a + e) or (c + d < b + e):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return [x for x in lst if len(x) >= size]\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\nimport re\n\ndef remove_whitespaces(s):\n    return re.sub('[\\s]+', ' ', s).strip()\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount, price):\n    if amount > price:\n        return None\n    else:\n        return amount - price\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n // i:\n                factors.append(n // i)\n    return sum(factors)\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    return text.lower().find('z') != -1\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb%12==0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(list_of_strings):\n    return list(reversed(list_of_strings))\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_length = len(lst)\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_index = i\n    return min_index\n\nlst = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, "], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(a, b):\n    return a * b\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\nimport re\n\ndef remove_uppercase(s):\n    return re.sub(\"[A-Z]\", \"\", s)\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef extract(lst):\n    return [lst[i] for i in range(len(lst)) if i < len(lst) - 1]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [[lst[0]]]\n    else:\n        return [lst[0] + c for c in combinations_list(lst[1:])] + [[lst[0]] + c for c in combinations_list(lst[1:])]\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = 0\n    current_max_product = 0\n    for i in range(len(arr)):\n        current_max_product = max(current_max_product, arr[i] * current_max_product)\n        if current_max_product > max_product:\n            max_product = current_max_product\n    return max_product\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(d, value):\n    for k, v in d.items():\n        if v == value:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, start, end):\n    if start > end:\n        return start\n    if arr[start] > arr[end]:\n        return find_peak(arr, start + 1, end - 1)\n    else:\n        return find_peak(arr, start, end - 1)\n\ndef find_peak_iterative(arr, start, end):\n    if start > end:\n        return start\n    if arr[start] > arr[end]:\n        return find_peak_iterative(arr, start + 1, end - 1)\n    else:\n        return find_peak_iterative(arr, start, end - 1)\n\ndef find_peak_recursive(arr, start, end):\n    if start > end:\n        return start\n    if arr[start] > arr[end]:\n        return find_peak_recursive(arr, start + 1, end - 1)\n    else:\n        return find_peak_recursive(arr, start, end - 1)\n\ndef find_peak_recursive_iterative(arr, start, end):\n    if start > end:\n        return start\n    if arr[start] > arr[end]:\n        return find_peak_recursive_iterative(arr, start + 1, end - 1)\n    else:\n        return find_peak_recursive_iterative(arr, start, end - 1)\n\ndef find_peak_recursive_recursive(arr, start, end):\n    if start > end:\n        return start\n    if arr[start] > arr[end]:\n        return find_peak_recursive_recursive(arr, start + 1, end - 1)\n    else:\n        return find_peak_recursive_recursive(arr, start, end - 1)\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(decimal_number):\n    octal_number = []\n    while decimal_number > 0:\n        if decimal_number % 8 == 0:\n            octal_number.append(0)\n        else:\n            octal_number.append(decimal_number % 8)\n            decimal_number = decimal_number // 8\n    return ''.join(str(i) for i in octal_number[::-1])\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(max(arr[0], arr[1]), max(arr[2], arr[3]))\n    if n == 4:\n        return max(max(max(arr[0], arr[1]), max(arr[2], arr[3]), arr[4]), arr[5])\n    if n == 5:\n        return max(max(max(max(arr[0], arr[1]), max(arr[2], arr[3]), arr[4]), max(max(arr[5], arr[6]), arr[7])))\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    if k == 0:\n        return 0\n    if k > len(prices):\n        return 0\n    max_profit = 0\n    for i in range(k):\n        max_profit = max(max_profit, prices[i] - prices[i + 1])\n    return max_profit\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tup):\n    return tuple(map(lambda x, y: x + y, tup, tup[1:]))\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, m):\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i != j:\n                if arr[i] * arr[j] % n == 0:\n                    return arr[i] * arr[j] % n\n    return 0\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(list):\n    for i in range(len(list)-1):\n        if list[i] != list[i+1]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(t1, t2):\n    return list(set(t1) & set(t2))\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(str, char, new_char):\n    return str.replace(char, new_char)\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef find_max_min(arr):\n    max_val = min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return max_val, min_val\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(s):\n    return s.lower() == s\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    return ''.join(c for c in string if c.islower())\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return int(str(n)[0])\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(s):\n    max_occuring_char = \"\"\n    max_occuring_count = 0\n    for char in s:\n        if char in s:\n            if max_occuring_char == \"\":\n                max_occuring_char = char\n            else:\n                if char > max_occuring_char:\n                    max_occuring_char = char\n                    max_occuring_count = 1\n                else:\n                    max_occuring_count += 1\n    return max_occuring_char, max_occuring_count\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset == sum:\n            return True\n    return False\n\ndef is_subset_sum_2(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset == sum:\n            return True\n    return False\n\ndef is_subset_sum_3(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_4(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_5(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_6(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_7(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_8(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_9(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_10(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_11(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_12(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_13(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_14(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_15(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_16(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_17(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_18(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_19(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_20(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_21(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_22(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_23(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_24(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_25(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_26(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_27(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_28(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_29(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_30(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_31(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_32(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_33(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_34(set, sum, subset):\n    for i in range(len(set)):\n        if set[i] + subset > sum:\n            return False\n        if set[i] + subset < sum:\n            return False\n    return True\n\ndef is_subset_sum_35(set, sum, subset):\n    for"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\nimport re\n\ndef find_sequences(string):\n    regex = re.compile(r'[A-Z][a-z]+')\n    return regex.findall(string)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    if x == 1:\n        return 1\n    if x % 2 == 0:\n        return first_Factorial_Divisible_Number(x // 2)\n    else:\n        return first_Factorial_Divisible_Number(x // 2 + 1)\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(t1, t2):\n    return [tuple(t1) for t1 in t2 if t1 not in t1]\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    max_palindrome = 0\n    for i in range(len(arr) - n + 1):\n        for j in range(len(arr) - n + 1):\n            if is_palindrome(arr[i:j + 1]):\n                if is_palindrome(arr[j:i + 1]):\n                    if is_palindrome(arr[i:j + 1]):\n                        if is_palindrome(arr[j:i + 1]):\n                            if is_palindrome(arr[i:j + 1]):\n                                if is_palindrome(arr[j:i + 1]):\n                                    if is_palindrome(arr[i:j + 1]):\n                                        if is_palindrome(arr[j:i + 1]):\n                                            if is_palindrome(arr[i:j + 1]):\n                                                if is_palindrome(arr[j:i + 1]):\n                                                    if is_palindrome(arr[i:j + 1]):\n                                                        if is_palindrome(arr[j:i + 1]):\n                                                            if is_palindrome(arr[i:j + 1]):\n                                                                if is_palindrome(arr[j:i + 1]):\n                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                        if is_palindrome(arr[j:i + 1]):\n                                                                            if is_palindrome(arr[i:j + 1]):\n                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                 if is_palindrome(arr[i:j + 1]):\n                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                        if is_palindrome(arr[i:j + 1]):\n                                                                                            if is_palindrome(arr[j:i + 1]):\n                                                                                                if is_palindrome(arr[i:j + 1]):\n                                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                                        if is_palindrome(arr[i:j + 1]):\n                                                                                                            if is_palindrome(arr[j:i + 1]):\n                                                                                                                if is_palindrome(arr[i:j + 1]):\n                                                                                                                 if is_palindrome(arr[j:i + 1]):\n                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                        if is_palindrome(arr[j:i + 1]):\n                                                                                                                            if is_palindrome(arr[i:j + 1]):\n                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                        if is_palindrome(arr[j:i + 1]):\n                                                                                                                                 if is_palindrome(arr[i:j + 1]):\n                                                                                                                                            if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                        if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                 if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                 if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                        if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                 if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                 if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                        if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                            if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                    if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                        if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                 if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                            if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                    if is_palindrome(arr[i:j + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if is_palindrome(arr[j:i + 1]):\n                                                                                                                                                                                                if"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"Compute binomial probability for the given number.\n\n    Parameters\n    ----------\n    n : int\n        Number of trials.\n    k : int\n        Number of successes.\n    p : float\n        Probability of success.\n\n    Returns\n    -------\n    float\n        Probability of success.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k)) * p**k * (1-p)**(n-k)\n\ndef main():\n    print(binomial_probability(10, 5, 1.0/3))\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\ndef area_pentagon(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 35\n    elif n == 5:\n        return 70\n    else:\n        return 1.5 * (area_pentagon(n-1) + area_pentagon(n-2) + area_pentagon(n-3) + area_pentagon(n-4) + area_pentagon(n-5))\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr, n):\n    freq = {}\n    for i in arr:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return max(freq, key=freq.get)\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    return {tuple_list[i][0] for i in range(len(tuple_list)) if tuple_list[i][1] == tuple_list[i][0] and tuple_list[i][0] != tuple_list[i][1]}\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, n, d):\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    return a + sum_gp(a, n-1, d)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef calculate_polygons(x, y, n):\n    \"\"\"\n    Calculate the grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    x_grid = np.linspace(x[0], x[-1], n)\n    y_grid = np.linspace(y[0], y[-1], n)\n    x_grid, y_grid = np.meshgrid(x_grid, y_grid)\n    return [[x_grid[i], y_grid[i]] for i in range(n)]\n\ndef calculate_polygons_2d(x, y, n):\n    \"\"\"\n    Calculate the grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    \"\"\"\n    x_grid = np.linspace(x[0], x[-1], n)\n    y_grid = np.linspace(y[0], y[-1], n)\n    x_grid, y_grid = np.meshgrid(x_grid, y_grid)\n    return [[x_grid[i], y_grid[i]] for i in range(n)]\n\ndef calculate_polygons_3d(x, y, z, n):\n    \"\"\"\n    Calculate the grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x,"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    if len(binary_tuple) == 0:\n        return 0\n    if len(binary_tuple) == 1:\n        return int(binary_tuple[0])\n    return int(binary_tuple[0], 2) + binary_to_integer(binary_tuple[1:])\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n\nimport re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\ndef heap_queue_smallest(heap_list, size):\n    if size == 0:\n        return []\n    if size == 1:\n        return heap_list[0]\n    if size == 2:\n        return min(heap_list[0], heap_list[1])\n    if size == 3:\n        return min(heap_list[0], heap_list[1], heap_list[2])\n    if size == 4:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3])\n    if size == 5:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4])\n    if size == 6:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5])\n    if size == 7:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6])\n    if size == 8:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7])\n    if size == 9:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8])\n    if size == 10:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9])\n    if size == 11:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10])\n    if size == 12:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11])\n    if size == 13:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12])\n    if size == 14:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13])\n    if size == 15:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14])\n    if size == 16:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15])\n    if size == 17:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16])\n    if size == 18:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16], heap_list[17])\n    if size == 19:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16], heap_list[17], heap_list[18])\n    if size == 20:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16], heap_list[17], heap_list[18], heap_list[19])\n    if size == 21:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16], heap_list[17], heap_list[18], heap_list[19], heap_list[20])\n    if size == 22:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap_list[9], heap_list[10], heap_list[11], heap_list[12], heap_list[13], heap_list[14], heap_list[15], heap_list[16], heap_list[17], heap_list[18], heap_list[19], heap_list[20], heap_list[21])\n    if size == 23:\n        return min(heap_list[0], heap_list[1], heap_list[2], heap_list[3], heap_list[4], heap_list[5], heap_list[6], heap_list[7], heap_list[8], heap"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculate the surface area of a cone.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the base of the cone.\n    height : float\n        The height of the cone.\n\n    Returns\n    -------\n    float\n        The surface area of the cone.\n    \"\"\"\n    return 0.5 * radius * height + 0.5 * radius * radius * math.pi\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\ndef diameter_circle(radius):\n    return 2 * radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(elements):\n    return \" \".join(elements)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(num1, num2):\n    divisor = 1\n    while num1 % num2 != 0:\n        divisor += 1\n        num1 = num1 % num2\n    return divisor\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    if b == 0:\n        return a\n    return find(b, a % b)\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)-1):\n        if nums[i] + nums[i+1] == 2020:\n            result.append(nums[i])\n            result.append(nums[i+1])\n    return result\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == 0:\n            arr[i], arr[len(arr)-1] = arr[len(arr)-1], arr[i]\n            del arr[i]\n            break\n    return arr\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or n == 0:\n        return 1\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, words_to_remove):\n    return [word for word in words if word not in words_to_remove]\n\nwords = ['red', 'green', 'blue', 'white', 'black', 'orange']\nwords_to_remove = ['white', 'orange']"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(lst1, lst2):\n    if len(lst1) != len(lst2):\n        return False\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    return no_of_subsequences(arr[1:], k) + no_of_subsequences(arr[1:], k - arr[0] * arr[0])\n"]]